(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1514269,      28573]
NotebookOptionsPosition[   1501885,      28374]
NotebookOutlinePosition[   1502339,      28391]
CellTagsIndexPosition[   1502296,      28388]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Feedforward neural network - classification", "Title",
 CellChangeTimes->{
  3.798285266341728*^9},ExpressionUUID->"489b5234-b6bb-44aa-8fe1-\
ae36e24ba814"],

Cell[CellGroupData[{

Cell["Loading of package and data", "Section",
 CellChangeTimes->{{3.7982853581335278`*^9, 
  3.7982853638380437`*^9}},ExpressionUUID->"d2da1a06-ed3b-45f6-aea9-\
ea7226a7bad7"],

Cell[BoxData[
 RowBox[{"<<", "NeuralNets`"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"8d5a3c11-b393-444d-83cf-526c3fe93d43"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<FisherIris\>\""}], "}"}], 
     ",", "\"\<TrainingData\>\""}], "]"}]}], ";", 
  RowBox[{"testData", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<FisherIris\>\""}], "}"}], 
     ",", "\"\<TestData\>\""}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"1c4609a8-4184-43ca-831e-b21d7e13b8b2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"xTrain", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", "trainingData"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"yTrain", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<setosa\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], ",", 
         RowBox[{"\"\<versicolor\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], ",", 
         RowBox[{"\"\<virginica\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "1"}], "}"}]}]}], "}"}]}], ")"}], 
     "&"}], "/@", "trainingData"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.79828194469814*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"9e85df36-da3b-4537-8826-e05c874c6356"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"xTest", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", "testData"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"yTest", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<setosa\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], ",", 
         RowBox[{"\"\<versicolor\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], ",", 
         RowBox[{"\"\<virginica\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "1"}], "}"}]}]}], "}"}]}], ")"}], 
     "&"}], "/@", "testData"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.798281960110603*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"eca16094-cd4e-41e3-ab2a-64174a673549"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Initializing of our first fnn(Neuron \[Rule] \
Sigmoid,OutputNonlinearity\[Rule]Sigmoid)\
\>", "Section",
 CellChangeTimes->{{3.798285375628089*^9, 
  3.7982854318743653`*^9}},ExpressionUUID->"b95b27da-62bc-460e-8891-\
c8894420d094"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"net1", "=", 
   RowBox[{"InitializeFeedForwardNet", "[", 
    RowBox[{"xTrain", ",", "yTrain", ",", 
     RowBox[{"{", "6", "}"}], ",", 
     RowBox[{"OutputNonlinearity", "\[Rule]", "Sigmoid"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"net1", ",", "fitrecord"}], "}"}], "=", 
   RowBox[{"NeuralFit", "[", 
    RowBox[{"net1", ",", "xTrain", ",", "yTrain", ",", "80"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.798553799068*^9, 
  3.798553806931959*^9}},ExpressionUUID->"07fa77a2-f463-4e1e-97ff-\
bdb44f137152"],

Cell[CellGroupData[{

Cell["Graph of the global error", "Subsection",
 CellChangeTimes->{
  3.7985537124650493`*^9},ExpressionUUID->"fc5d1a09-4321-4080-8ff5-\
7af1fc45d117"],

Cell[BoxData[
 GraphicsBox[{{}, {{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJw1ywtM01cYxuH/KHFVDCsOzdh0wpzCXCnKRdGKfaGK1FJoi+tEB8rUJaKI
eAs6F8u6eWFRySLIRZdsVpdOmJdMqFhp3dgUtIIVJGGwDopGM3AlCMq0xhm/
7yQnJ09+5w37NF+/zk8QBN3/9+XLJ9Z38Hz3z12KV/IqKlb3vO2/p4Ms4E51
SVlD2h2yGMP3Kg5rc9vJEsjX6iss1W3kYCz46uDdwXHst3DWv2dKpXCbPBm3
FUd123Jd5FCMt8l2d/hukd/DZ9IgZ/Y89vt4uGbqflF7K3kGLOX9vd+Z2BGw
/TLDc9TTQp6Jx3PfiOnMZEuRIoorc7tvkmVIspZPc3Q7ybPwlzmn+JMv2LPR
l9lcuvfGDXI0qgzNzswUdgx2yk3/eR9cJ8eiMHh5YHgUOw55P8nzKp82kefg
z+hOsTiLPRdDEe0/fPDsGjkexyKOmxUb2PMga3qyI2DVVfJ8PCywK1e9zpbj
Q2dRT9GRP8gLoLd7VDkqdgKKI91jDzz9nbwQQ9J/DINmtgIxo9usfhI2ULUy
W9NT1/jKRqCjsD9h4kqykIjqvsCEcs9v1BMhOv+3TLSXLCQh6DXDLsHAPQlx
QX2thhDuSlzQXNrUeOpX6kqMa5EGeCVkYRE2HQqOUpRcob4IazXmnBEpWViM
Ha71kbEC98VI/rEpUX3RQT0ZwVnzS3tXkI3JKDxS6QwatVNfgtrQWZv/NZGN
S2BNXX9ZXddAPQUFjpqP4r+9TD0FV7aE77P12qir8KV7MCR1P9moQmRXyBST
kvtSTB5rV7UNX6K+FF3mMktlA1lQY5I2auTzndzVeOKW1Hs13FMxUnb8+TQJ
91S43Kf9bQP11DWwdX8t21JLNmrQN9QmHr+VexoGXI/ufjydexpcJ+0zV49e
pJ4O3dVbpRvPkY3pkGsnNScf5q7Fze+l72YXkKGFr3q4JFrN/7XoVk709oeR
HVpYnaIVJjHvdQjwDcSP6bTSXof0Y60h7mtkow6N0pqE+xfIDh0ODdXb95WT
BT0mWL9BThHv9bBsmH36xGbe61Ec+mZNVTrv9bh+VuJrU/I+A6Vn8u+Fz+F9
BvKyOrcvC+V9BpafGAh7HMj7DOgaLJ5cP94vw+78lndqH9QpXgDTIIGP
       "]]}}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {
     FormBox["\"Iterations\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"RMSE\"", TraditionalForm],
  PlotRange->{{0, 80.}, {0, 0.44817297398545297`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Print",
 CellChangeTimes->{3.7985527965049973`*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"72cfd63c-da91-4e71-a1c7-a94a999e02a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training and testing error", "Subsection",
 CellChangeTimes->{
  3.798285573718405*^9, {3.798552816557672*^9, 
   3.7985528210935817`*^9}},ExpressionUUID->"c91fb9c5-c52d-4316-8663-\
cf77f815ffb5"],

Cell["\<\
As we can see from the graph of the global error - training error is near 0.1
Let\[CloseCurlyQuote]s calculate testing error\
\>", "Text",
 CellChangeTimes->{{3.798552825382058*^9, 3.7985528596728573`*^9}, {
  3.798553055371745*^9, 3.7985530657459826`*^9}, {3.798553664283783*^9, 
  3.7985536677036276`*^9}},ExpressionUUID->"736e4652-7b25-4c10-8cd9-\
90a9bccac517"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"100", " ", "-", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"Count", "[", 
      RowBox[{
       RowBox[{"Abs", "[", 
        RowBox[{"yTest", " ", "-", " ", 
         RowBox[{"Round", "[", 
          RowBox[{"net1", "[", "xTest", "]"}], "]"}]}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}]}], "]"}], " ", "/",
      " ", 
     RowBox[{"Length", "[", "testData", "]"}]}], " ", "*", " ", "100.0"}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.7982820954337025`*^9, 3.798282097219654*^9}, {
  3.7982821369567084`*^9, 3.798282164963216*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"5bc832df-e388-449e-b23a-316e4c424314"],

Cell[BoxData["2.2222222222222285`"], "Output",
 CellChangeTimes->{{3.798282145622327*^9, 3.7982821655877914`*^9}},
 CellLabel->"Out[11]=",ExpressionUUID->"8f0d82ca-e781-499a-adcb-302d5390a5ad"]
}, Open  ]],

Cell["\<\
Testing error is quite big form the first look, but we\[CloseCurlyQuote]re \
calculating it comparing to our expected dataset which isn\[CloseCurlyQuote]t \
really big. 
But still our model may be a bit overfitted.\
\>", "Text",
 CellChangeTimes->{{3.7985531775540686`*^9, 
  3.7985533259004407`*^9}},ExpressionUUID->"4ffc694d-5b0a-4bc2-b6d7-\
2b8ceed22880"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The distribution via classes", "Subsection",
 CellChangeTimes->{{3.7982859830179834`*^9, 
  3.79828598646875*^9}},ExpressionUUID->"5952f9e2-b598-4a00-8cdc-\
03ffe6822b38"],

Cell["\<\
We can also look at the distribution via classes on each 20 iterations.\
\>", "Text",
 CellChangeTimes->{{3.7985553208296723`*^9, 
  3.798555340872044*^9}},ExpressionUUID->"b8663dfe-0262-45b9-9c3a-\
9355f33d8f88"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetPlot", "[", 
  RowBox[{"fitrecord", ",", "xTrain", ",", "yTrain", ",", 
   RowBox[{"DataFormat", "\[Rule]", "BarChart"}], ",", 
   RowBox[{"OutputNonlinearity", "\[Rule]", "UnitStep"}], ",", 
   RowBox[{"Intervals", "\[Rule]", "20"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7982832467203884`*^9, 3.7982832482972927`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"af1b21ae-320b-4934-86f9-9b1150ad785c"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{69.77292738699956, 
                 114.78831220960424`}, {-105.39376898099059`, \
-26.328311222625715`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 15.}, {1.091, 0., 15.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 15.}, {2.091, 0., 15.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{96.60395940557675, 
                 135.19512631075025`}, {-94.15420001005425, \
-45.87925763587287}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 15]& ,
              TagBoxNote->"15"],
             StyleBox["15", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[15, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    19.}, {2.1820000000000004`, 0., 19.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 19.}, {3.1820000000000004`,
                     0., 19.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{117.07273267349031`, 
                 156.11053922174185`}, {-115.07571030322863`, \
-63.66655703769803}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 19]& ,
              TagBoxNote->"19"],
             StyleBox["19", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[19, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 14.}, {0., 1.2, 14.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 14.}, {1., 1.2, 14.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{54.401113927733284`, 
                 93.90745704608946}, {-90.28531625115095, \
-42.93786875257705}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 14]& ,
              TagBoxNote->"14"],
             StyleBox["14", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[14, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{76.20235564172239, 
                 
                 117.08607042819952`}, {-136.09190201247554`, \
-60.98542236610456}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    15.}, {2.1820000000000004`, 1.2, 15.}, {
                    3.1820000000000004`, 1.2, 0.}, {3.1820000000000004`, 2.2, 
                    0.}, {3.1820000000000004`, 2.2, 15.}, {
                    3.1820000000000004`, 1.2, 15.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{99.8085004533558, 
                 135.51753335530415`}, {-121.84211586288029`, \
-77.46459899135385}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 15]& ,
              TagBoxNote->"15"],
             StyleBox["15", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[15, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    24.}, {0., 2.4000000000000004`, 24.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 24.}, {1., 2.4000000000000004`, 
                    24.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{34.692981624812695`, 
                 76.86027310500225}, {-117.26594226849483`, \
-58.26583576531211}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 24]& ,
              TagBoxNote->"24"],
             StyleBox["24", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[24, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 29.}, {1.091, 2.4000000000000004`, 
                    29.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    29.}, {2.091, 2.4000000000000004`, 29.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{58.71898511267832, 
                 
                 97.41330890651443}, {-139.19793249783905`, \
-74.97699166996135}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 29]& ,
              TagBoxNote->"29"],
             StyleBox["29", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[29, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{81.5112512950935, 
                 118.98737954123055`}, {-161.6621117228897, \
-90.28723734974335}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 0\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -197.16666666666666}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True], InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{69.77292738699956, 
                 114.78831220960424`}, {-105.39376898099059`, \
-26.328311222625715`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 12.}, {1.091, 0., 12.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 12.}, {2.091, 0., 12.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{96.61661685041427, 
                 134.6967575294089}, {-90.3060265947573, -45.87925763587287}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 12]& ,
              TagBoxNote->"12"],
             StyleBox["12", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[12, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    22.}, {2.1820000000000004`, 0., 22.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 22.}, {3.1820000000000004`,
                     0., 22.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{117.07273267349031`, 
                 156.89993924296468`}, {-119.20146598029737`, \
-63.66655703769803}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 22]& ,
              TagBoxNote->"22"],
             StyleBox["22", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[22, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 12.}, {0., 1.2, 12.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 12.}, {1., 1.2, 12.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{54.809534060571416`, 
                 93.90745704608946}, {-87.73623105666611, \
-42.93786875257705}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 12]& ,
              TagBoxNote->"12"],
             StyleBox["12", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[12, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{76.20235564172239, 
                 117.08607042819952`}, {-136.09190201247554`, \
-60.98542236610456}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    21.}, {2.1820000000000004`, 1.2, 21.}, {
                    3.1820000000000004`, 1.2, 0.}, {3.1820000000000004`, 2.2, 
                    0.}, {3.1820000000000004`, 2.2, 21.}, {
                    3.1820000000000004`, 1.2, 21.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{99.8085004533558, 
                 136.47883668869048`}, {-129.92501091634452`, \
-77.46459899135385}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 21]& ,
              TagBoxNote->"21"],
             StyleBox["21", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[21, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    22.}, {0., 2.4000000000000004`, 22.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 22.}, {1., 2.4000000000000004`, 
                    22.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{35.2919569209267, 
                 76.86027310500225}, {-114.45503545326274`, \
-58.26583576531211}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 22]& ,
              TagBoxNote->"22"],
             StyleBox["22", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[22, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 21.}, {1.091, 2.4000000000000004`, 
                    21.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    21.}, {2.091, 2.4000000000000004`, 21.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{60.1229302816736, 
                 97.41330890651443}, {-127.74281695162928`, \
-74.97699166996135}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 21]& ,
              TagBoxNote->"21"],
             StyleBox["21", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[21, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{81.5112512950935, 
                 118.98737954123055`}, {-161.6621117228897, \
-90.28723734974335}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 20\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -591.5}, ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True], InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{69.77292738699956, 
                 114.78831220960426`}, {-105.39376898099061`, \
-26.328311222625715`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 16.}, {1.091, 0., 16.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 16.}, {2.091, 0., 16.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{96.59965937943059, 
                 135.36440051396545`}, {-95.46045185813072, \
-45.87925763587288}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 16]& ,
              TagBoxNote->"16"],
             StyleBox["16", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[16, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    18.}, {2.1820000000000004`, 0., 18.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 18.}, {3.1820000000000004`,
                     0., 18.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{117.07273267349032`, 
                 155.85220899955314`}, {-113.72476117897584`, \
-63.666557037698055`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 18]& ,
              TagBoxNote->"18"],
             StyleBox["18", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[18, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 19.}, {0., 1.2, 19.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 19.}, {1., 1.2, 19.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{53.34503747419187, 
                 93.90745704608946}, {-96.86699789124668, \
-42.93786875257707}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 19]& ,
              TagBoxNote->"19"],
             StyleBox["19", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[19, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{76.20235564172239, 
                 117.08607042819953`}, {-136.09190201247557`, \
-60.98542236610456}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    21.}, {2.1820000000000004`, 1.2, 21.}, {
                    3.1820000000000004`, 1.2, 0.}, {3.1820000000000004`, 2.2, 
                    0.}, {3.1820000000000004`, 2.2, 21.}, {
                    3.1820000000000004`, 1.2, 21.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{99.8085004533558, 
                 136.4788366886905}, {-129.92501091634455`, \
-77.46459899135387}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 21]& ,
              TagBoxNote->"21"],
             StyleBox["21", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[21, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    14.}, {0., 2.4000000000000004`, 14.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 14.}, {1., 2.4000000000000004`, 
                    14.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{37.57781254034083, 
                 76.86027310500225}, {-103.70643124880311`, \
-58.265835765312126`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 14]& ,
              TagBoxNote->"14"],
             StyleBox["14", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[14, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 18.}, {1.091, 2.4000000000000004`, 
                    18.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    18.}, {2.091, 2.4000000000000004`, 18.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{60.62355467810565, 
                 97.41330890651443}, {-123.6495969471312, \
-74.97699166996138}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 18]& ,
              TagBoxNote->"18"],
             StyleBox["18", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[18, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{81.5112512950935, 
                 118.98737954123057`}, {-161.66211172288973`, \
-90.28723734974338}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 0.}],
             {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 40\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -985.8333333333333}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True], InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{69.77292738699956, 
                 114.78831220960426`}, {-105.39376898099061`, \
-26.328311222625715`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 20.}, {1.091, 0., 20.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 20.}, {2.091, 0., 20.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                ImageSizeCache->{{96.58203907883649, 
                 136.0578630489584}, {-100.80749208746128`, \
-45.87925763587288}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 20]& ,
              TagBoxNote->"20"],
             StyleBox["20", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[20, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    17.}, {2.1820000000000004`, 0., 17.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 17.}, {3.1820000000000004`,
                     0., 17.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{117.07273267349032`, 
                 155.59622578916307`}, {-112.3856962028634, \
-63.666557037698055`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 17]& ,
              TagBoxNote->"17"],
             StyleBox["17", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[17, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 21.}, {0., 1.2, 21.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 21.}, {1., 1.2, 21.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{52.90797239476986, 
                 93.90745704608946}, {-99.586815390279, -42.93786875257707}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 21]& ,
              TagBoxNote->"21"],
             StyleBox["21", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[21, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{76.20235564172239, 
                 117.08607042819953`}, {-136.09190201247557`, \
-60.98542236610456}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    21.}, {2.1820000000000004`, 1.2, 21.}, {
                    3.1820000000000004`, 1.2, 0.}, {3.1820000000000004`, 2.2, 
                    0.}, {3.1820000000000004`, 2.2, 21.}, {
                    3.1820000000000004`, 1.2, 21.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{99.8085004533558, 
                 136.4788366886905}, {-129.92501091634455`, \
-77.46459899135387}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 21]& ,
              TagBoxNote->"21"],
             StyleBox["21", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[21, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    13.}, {0., 2.4000000000000004`, 13.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 13.}, {1., 2.4000000000000004`, 
                    13.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{37.851786998380426`, 
                 76.86027310500225}, {-102.41586058548543`, \
-58.265835765312126`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 13]& ,
              TagBoxNote->"13"],
             StyleBox["13", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[13, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 16.}, {1.091, 2.4000000000000004`, 
                    16.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    16.}, {2.091, 2.4000000000000004`, 16.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{60.949920112101715`, 
                 97.41330890651443}, {-120.97874370186946`, \
-74.97699166996138}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 16]& ,
              TagBoxNote->"16"],
             StyleBox["16", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[16, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{81.5112512950935, 
                 118.98737954123057`}, {-161.66211172288973`, \
-90.28723734974338}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 60\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -1380.1666666666665}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True], InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{69.77292738699956, 
                 114.78831220960426`}, {-105.39376898099061`, \
-26.328311222625715`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 25.}, {1.091, 0., 25.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 25.}, {2.091, 0., 25.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{96.55902091133251, 
                 136.96333823228846`}, {-107.7789986097828, \
-45.87925763587288}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 25]& ,
              TagBoxNote->"25"],
             StyleBox["25", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[25, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    13.}, {2.1820000000000004`, 0., 13.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 13.}, {3.1820000000000004`,
                     0., 13.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                ImageSizeCache->{{117.07273267349032`, 
                 154.59513478156583`}, {-107.14519569964007`, \
-63.666557037698055`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 13]& ,
              TagBoxNote->"13"],
             StyleBox["13", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[13, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 23.}, {0., 1.2, 23.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 23.}, {1., 1.2, 23.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{52.4621685380683, 
                 93.90745704608946}, {-102.35856947960046`, \
-42.93786875257707}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 23]& ,
              TagBoxNote->"23"],
             StyleBox["23", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[23, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{76.20235564172239, 
                 117.08607042819953`}, {-136.09190201247557`, \
-60.98542236610456}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    18.}, {2.1820000000000004`, 1.2, 18.}, {
                    3.1820000000000004`, 1.2, 0.}, {3.1820000000000004`, 2.2, 
                    0.}, {3.1820000000000004`, 2.2, 18.}, {
                    3.1820000000000004`, 1.2, 18.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{99.8085004533558, 
                 135.99185501280755`}, {-125.83197359676315`, \
-77.46459899135387}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 18]& ,
              TagBoxNote->"18"],
             StyleBox["18", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[18, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    19.}, {0., 2.4000000000000004`, 19.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 19.}, {1., 2.4000000000000004`, 
                    19.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{36.16930132637336, 
                 76.86027310500225}, {-110.33358126702906`, \
-58.265835765312126`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 19]& ,
              TagBoxNote->"19"],
             StyleBox["19", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[19, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 13.}, {1.091, 2.4000000000000004`, 
                    13.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    13.}, {2.091, 2.4000000000000004`, 13.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{61.42877897743318, 
                 97.41330890651443}, {-117.05648657149165`, \
-74.97699166996138}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 13]& ,
              TagBoxNote->"13"],
             StyleBox["13", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[13, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{81.5112512950935, 
                 118.98737954123057`}, {-161.66211172288973`, \
-90.28723734974338}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 80\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -1774.5}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True]}, 
   StyleBox[{{}, {LineBox[{{0, 0}, {0, -394.3333333333333}}], 
      LineBox[{{0, -394.3333333333333}, {0, -788.6666666666666}}], 
      LineBox[{{0, -788.6666666666666}, {0, -1183.}}], 
      LineBox[{{0, -1183.}, {0, -1577.3333333333333`}}], 
      LineBox[{{0, -1577.3333333333333`}, {0, -1971.6666666666665`}}], 
      LineBox[{{378., 0}, {378., -394.3333333333333}}], 
      LineBox[{{378., -394.3333333333333}, {378., -788.6666666666666}}], 
      LineBox[{{378., -788.6666666666666}, {378., -1183.}}], 
      LineBox[{{378., -1183.}, {378., -1577.3333333333333`}}], 
      LineBox[{{378., -1577.3333333333333`}, {378., -1971.6666666666665`}}], 
      LineBox[{{0, 0}, {378., 0}}], 
      LineBox[{{0, -394.3333333333333}, {378., -394.3333333333333}}], 
      LineBox[{{0, -788.6666666666666}, {378., -788.6666666666666}}], 
      LineBox[{{0, -1183.}, {378., -1183.}}], 
      LineBox[{{0, -1577.3333333333333`}, {378., -1577.3333333333333`}}], 
      LineBox[{{0, -1971.6666666666665`}, {378., -1971.6666666666665`}}]}},
    Antialiasing->False]},
  ImageSize->{213.41934398654334`, Automatic},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{3.7985551449671783`*^9},
 CellLabel->"Out[30]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzsvXdcVVf2Nn5fwJpMMplMqpkUE1M0xRSTaExMYmzEXqKS2LEXLCjYsTcU
CwqC0qSroEgRFUFBFEFAAQVLTBA1JrEk48x8k8lkvXvtcs4+555z7z3EeX9/
/L75fM4NXMB7ztrPs9daz1p77x4jfMeNnjzCd/yoEc92mT5i6rjxo2Y829ln
OnnL/f/YbP/H22Zr9OdnbR7ka7DZ7F5G22yuft2AvoHveOFLQ+ldmzvYpP/o
NwMNfuD+v3/zv3/zv3/zv3/z/7+/SWHvBR0+fHjqli1b6Hdx1v6J3fTVI7em
pgYOHToEY8aMwX/K4r+yi742xH8l5NLpo0D+vyYxcqP412Kt/WvJ9LXJx+fO
ncN/yfubwh3kiio+X1Xe+m6ur/wv23ZY+6eT6Ot98j/d+nZsB3LTh0MuVRxt
fTt7WOvbuT5++ekx+BErly1bZoux9hGJ9PVP+o8gV7uQC2X8Y1J7yR/1P9On
T6MfFW3toxLo64MGH9Wm9Y3IN4jByvDJWt9O6sA+Mp1+pGdm+MyfF8yff33l
ypW2KGsfGU9fH7L7yBvqR5KrlP7sUkG49NHedh8dae2jGSYfxo9GKJh9dOsb
YS28Lx3ZYnAL5OmzfVrfLViIBr89d+5cW4S1W2BAbow4p2i8ndRJ3AJ+FPvI
I6EeeA+2Jng3evsvWDZ77NVxY8egEegdbLd2BwzvTaQ78DS6A3IDLW0N1NtA
4zBopPby3Ld+uOe+4AloCOU2tlm7jRjT22in3kYBuY3IljY3vBn7e2lH7oX8
UboXGRRyL7lzfli9aiW9l3Br9xJtNyjyvUSIe3HDm6H30hDvxQ1vw9aI3UiS
3Y38a+rUqbYwazcSZXYjkZobcccbcacjhK8t8Cvlu5bsvhob3VdESNAKvC+c
+EKt3Vqk2XhF0kkJP5NyhfDI5oH310R7L20Y1FP7k3tBIvvivYCvry/eS4i1
e2GIbyhNIXEqkSLb0Q9FG71Bb6QpNU1Tcpc5FDg37O9ldXLUJnEvW6zdyzYX
7gWB00a9IWoZ230tf9zectDlk4l8VCPUm6IzndZLbbZ2V+EuWki6K5xyWtKv
3F64EWP1/oKt3V+Yw/trQ++vAf0K7+9+Ogs8gLf1zLVtrzzx/Y6X8ZJuLlzv
oeSb22Tt3rbq763I/t4aKrZrTO/NHY2FX1HTMQP+Ce8R7xe/G/p1YZR6r7Ea
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
eyI+aWLwqxbnlwX0tamJzZOl97zx/UbU9n9D2/vNHPA0+PR4SPGWRnZfy+2+
3vsxSPB/EX7N6khs/wm5Oujs/65kfyVcHJfi/8zre2e/SGPf+wzs3czU3hgW
04xNtvczBgZj00wDRPZ8btc0MYmz0IRO6qNFbCnP9hjO6H8Z31M+wGIQM5++
NmatBNUV3rWlxPLZ1NHKo4ETjjd1s8NYnEPGhDmBp8moPKtkHTSGwVEZohuV
kY9BEB+VjaMfh8TZL8Ov+zuz0ckSo/OhbnR0sU/SKzPCJz31SsKsFjg6Rg7g
KYeDQ7OzNXHbg0Q6/bT54CzhQTh+g7EhDcaZL3CXA3tGETYQDcUvpklZAPpt
i7PSPDYmLIivriDjMYGNSXp/1CLEmHgYjAkLOZ9tWxDUhY7L9N5/0YyLCH3M
xiV47OOQNOcV+DW7Kxuf/Z+R8fmUzWB0fD5gIVOaHDLJselzJGR62WhsqH/w
oFGrywP0N4MB4hbThKKNFZp0tGbquYamxonHSzZ1A2rqF2VT44VmDhjfo5ld
tiTMjH53zQjVzBvQzGOYmbeMexyS57aEXw98TszdjVwOzG0XI8kR6sss82rw
ac6aTsLceFHzPIpfNVXNrg2MRJqLZo9UzP6UgdmZET2QEyKJxfioSX0tP8fc
8phNkffK8ftGWssrFjdKmoTFA2WLj34MNkkWDx3/OOyc3wp+PdiDWf4AWr4L
sXwnyfLEVafrIyS76LT7woFP0vyLTwtf7FjYWzH7Q/jVn5nZMRNQKiysvk/M
nk67Nvzy0qOECtYMLcLFBTnetN3H7Kc4BPzvE2vmnk1fmxqYexjeFnsvF2uC
3vh+Q2r2l/DHaHIS0D9smkaJ4HKdzuSbhcknPAFhE5+AXfNfg38f6k1M35Nc
etN3VE2veGmz4JSaXqhWXdOXe4rwZO2CqV9R+92vmJ/mYawordo/SbZ/hNKz
MN2aTf3payODeVqxKU7IuT44STO7UrOy2eRlYtjedoY1itrRsDhBy4YNGa8a
dtukJ2D3AmLcnL7MwIfQwN2JgT11BjYKgwzDUL/MBc25tuC3aqaXsC8T6Kld
/+TYrp77QqYoIug0a3b1Y+/JdkU7Zg+zuUtY9ZFsq+DWxpxiq47bZn5MMqK/
GmZEq2TbKs5Pa9utkm0jJj8B+5a0hn8fHkBs3M/Axl1dCGZk7exVuBn3MtoY
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
SE0yQ6uuLAN15Qc9Q0LYU3B1F3GNR2fYV5vDPMOJHM+Q7lNz7RORzWYXBjdz
02rsMVVjBkke5tuTlqfHKfT0GHMam2BLY2h++Aw9y0QcUyVOUu0mzE/RIeba
ON+C/1/e8h67Npo/vUmc4pOGdaW+3rGXbwsdbuc6zAkkOpzHdFgw/xnqSK/u
JmHu2Gyiy5lEl9OJLqeRm4/98Ie6NKJi9vVtYM5IdZlYteZ1i5uiw2dQh6zh
wVNVHiuWqPIEcTjanPbGO9IePcCGnULdw3/WwNdgao+HqI4wJVxG3GHy7GY8
jLMQfiOjJamLmjpVGyX62koNua6ITrLnoq6eUXS1k+hq14JnoWx9F/j9+Fz4
/dicBuhMDoJ3JaVM/HrN66iozvE+r08P7/MQUoIZHZpp1JZtW22jzKnN20pt
c1ksE2pzVc5eUi2PBb5e/rOGvQlTez5EGRzUYjhnFFL9X2FXSYNDG+JN36Xv
sUejO5PgixQFtZin02LhwmehZHVn+P3EPKbN43OIRiVtVui0Wf6fSkAVMjTx
wNLXO2QGvFE5+E0XWNjOxT+q30OW5s4qcqQ5RbIcR1o4VLWH2yAe8hNKdUmP
/GLK60vPDEcFzujzMFXOEq5AzCnVPpnP+AV2gMtJrShNZ1ShWVcCT9qsBIwU
uJsrcG8wua38BH4/OZ8rMpDcAogi/YkiZ1mHxnJ7GU1Dc1NNJVGT6vccDHrd
AqPfskBwRzfIG+i+cFG3h3DVi+V1m8rMH+l/SJotGGFOmTzXkYq7PTSzXGBx
xb95zbCPHgcWaRkgGyfqdeHEvq/SFRpUryMY1YepC2aZqL/Mec3VtICEkcsp
bcj7Hr3j2iGX67VA6JXotBB1GvIs7FtEbpHEQE8FE/0uIPoNIjcH+nUm9Ske
3ICMlc0qb/B6gurV620LhHZqBEWj7oW8QR6ZEd0ao34dqRf5lPigoCDLcHPq
ZYmRxKec5rZaGkrUu48/d6CRol2q1cwpvZ+mWg2VtBo5liUy6FJRs0fWfswC
D3dTl1Pbk4rxUbvzFM7UE1Sr1NUyre7hWt1PtFoU+hzsX/Up/F65SNXuSZ12
HQXWu5LYqiRynPeTVKvjW1ogrMs9UDzuEaLd+4h2PWvWfObqSLvdd65Vufph
5rTLEqcm1tqt0GiXnx62lh0ZORAPGK/x6vYIBKKGiZ9FlgwpYqphb6Zh1CJq
+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
Y8Yp9JUQSpmzq6mNQO07yqc1gbbDytzQJVhgHi854Wskv7aS8BoUtvwDC1lV
09FAOWe3VlbFTQmIVcWjSQ31I68SvW0+HWemUgqNUqWGeK3Z498gATWxOhH/
PvoasjGiB9wsWK+dZle7MfJ7Yp+0kuV+UNvxNqit3uZty4jDuyKno6e32A5X
FL+frkzAOR+cEse9QTgpblxrbmfUdjOrNdezWpNhNnI5rzWDea2Z7zUZFk6c
6pCUQylTUFfCKuE0AgZNjITBE6Nh9uIQSM7+Fk4gZtOb4Vgqx2x0YqMq/2jk
WAP5R5Zj18tyrNgcMXdVEdaWbQmvrRGvsNZjxvasY74mAVYaOFL+5+QNwRys
bZ64q4A1UlF9QrraBGuxUYZd2FQeIWdYoc3eDApb+YHd/gctG5Z0VwWoir+T
dm0zDol16PWaBHOQENfK0CVaSSBSVqzcR4GoKXUuOd5kw3Zj+OfQhBewypxb
HY4P0S0lO2iD+266T9zXUdO4ZQ/lxzA+l6Hhvg4654oSDtI+Ihw4x51EuH0S
9xLZrkW30EZK1T8QvgQOr3CF0SM8oOdQb0Nuqxd6eEINoYQ6UCTUwROjCKhD
JsWCm0cIpOfdgJQcBtis65AgAHs0GQF7jQCrEYciLmlcc3sU15yRXiv6JwvW
FpMQJLJrfU1luWyE69OiTNrpbtxQ9umrdCkxozLuipVoayWzkjZEWm0bgmeh
US5d2FRxXMmlrPzMJCuOUSukStcKkfXXawKSZPgUXXmUX0qDJ6shYeZd2VpZ
gvJpoi6f3qNUJI3aN6UtoNeECsmkGfDTuXjzZhj6c+VXQrhuvtdPt3npPnDg
fEc4sC17eUvaKZZlafPpo3A2J5qG+HCXJe4kx30Q+rL0mpWyFNeIeS9xJUu3
ynGHW3JcreQjOO545LgRApLRMHhSDEHym8lx4L4yGrIKb0J6PodmEkIzo5nK
UlUmUqCJZamk2x60o9uuFTLR0s2nouYs8KXdLqJdosDy24KCAvKH93UOm2/R
j+2pXUL4VBqZkV3pn9Yw2tqcQgvkFBpSXyKK1NpcTKFV5eXlZB1QJFkzNm1L
stcFNsmiJlr2iIWToVN0un6hZDTN0hkvT9josbRcPmrKWER/L0znl3I84b8a
M3R8W9oto9npGabjvIe0nNdiT64tzjvfCc7Lr1lriRPIdn/F0oLXfPoY1Ocf
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
YThDQy2HTSVnqTGui1L3KjFj/KXU5yntMARjjHkzsV/pDRfKW+Yt1D9fPN6o
vFlaQqba6p/+rUnvlMGACY37XWs/4Em309XM/S47hqLKTZc3iGv5sROXyOm6
H8iZc38nJ05/X56Ysv9+VRJQJJ/VZra01+5VrymprRZNJW0+2Qfz0yIPF6Yy
swhSdYNK2s0GIXGKwN0wE7gSxT42omtTFj1qMLeA2IHBBDF0RfSM9wB6SCKn
npYJx0xnLXHDdwRQI9mLGsn5aCSvVR+gvp6rRnKbYiQTp3Q2rPwmjmpP6nM3
sKnesEkchjvATBaYiaZEyHorOc2BlRzIreTnkpWUS1BiY+/rWIKqcFiCMuuT
diGxpRuEkbIzTemvMN5gLs1Vk3bXiIH9mtZMeeubNGjYUar6RM2VXhu3JHCY
e4Lolaek7yO5BRVwHS2hhyo+4F3K1hB+juSe6R8rZh49Lp/Kqdqfm359b166
75ljB9xBxkCEmJQpQvZvEjWwbCBuIgXV4+KBDXcgal4gah68CkwvugeXZ4RR
O7eN2rkIjDiH2mZQI/cJNXJrSUNFPms9xGNvJCNXZWbkIknazPftCrOHI2eQ
bw/GqO/Dyb/CfV2jM3ILVSO3SzJy2yfiYeO1vNtLMXJrv5A2M+iNnK6Hw7Q4
pN8n5KAZ2kmOKWt3jqZB2GyKkrw/XByhbDfOYW2tskdoLp876sgnHTp5P0nd
cyo8KiZNSNN99Enkh2RpglgQc0X8Gvz8EY8X/ygJa4vPXq3Z3h1M4gZXluST
wrw9kYcPFroqae6NLc/ad0uqksZTPWDVhFNpc2k/ggNhYxkc5l7mcffSm71M
bd2c7P1pEBBGgq1jkucv2blizGkodq5asnNHmZ2DJl5on98z5yN1esP450ll
3ALluHOlelvC7SG1c985tXOzDewcFHDEFiJq5yIGsgLOaqnVYqlJq8XsV3UF
HN20VV0BB/I8xk3Qxnme7NRc7Y41fWOwycRf/RZvLMnqpjK44loOmbi3f8e3
x9mmNUYafLg0UBgrAVQDlYai64X5uSAVbnABngwdvD9EFtQpamB51MxIwWb3
Ru7QQXG4i1kcgLvO4kwFH09ncUqZVoWQQW9xjuwiOfO7I94Llgwk31fl8a4F
WT5EjdPE4sCkapxSLeqcwuIESF2GWovztTRmqcaVdoQ5HXRThk2qGka9wk6y
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
36+qJNUK6x3t0fOUK5Y8IEQcYLrI9h5VA9sITsTM2sZA4KrcT9fKvV/AQbJ4
TZl2gh1MHl1nMHnUZNw06oNApg/gWDHn+uC/G6MPNkRsSLaIgp743Fyy/yWa
XhdAwC+AgMoQ8AlcPahEba61eSws25dKCrKF8N8Z93mlyUfI/nzbu3yz3I5/
zAqMUjiscvewQ/kePLGIBK08TNZuO218Zo3JAXKK3IP2X2Qw0p+fWzMhIN1Q
7u2iQdflfsOWHTlWTf1nTNiZqb/BTb2u4Ciz+jZWgazzGpw74DNX9slNwWvU
8y2Q12+XjB673pL0jg3YRyK2VtoflGJynBjOE45gUm13PhG4eyHVKNX6w1IG
UKmOji82l+pLlqR6Q1xCkVUe91Z5zLI5l8s0TfVCof8CogwKne34scpjLzDg
wGeu1Xf7njqU4iqbzZL8dyN7X44fMzbaabJFiO3y9RVkR9JZu5HR6nxG9ZwA
7XmQ0rx0UN6rDE6NCxHirD2Gauq8fFJy+LQQZzfgse0uY2k2S/vW3tywM+GA
Ve72YYqamWtsVC3S7OES0vsLU9TWZpF4y72plJ/pIL+Uv7spn5PtqjcuZmpL
QnjhZj5ui6HSy9grSewII3s7k/rLGfV2A5M1I/GNDgaUJoPbnTQmHQfh7NjP
wRP2mkjyP1yV5PC0zDKr/O2Hz15UO59kjcNa7ewGzAV9yNgrcjDmoxE0LIUH
qGVqhneDWrbIUsi+hDAN/A7y0EwspywoJeujK0nW3m+xf18zsS+bbdqGcap2
x3roh18bHG+gPeRRe6COkoiZb5yIEdb34mWTXKy9vJYfPNwA3T2rrbGxPz57
c0N7kvtTcj4lwiZ4yZUw4+W1SvMt4D56XoL6zd6fv5uKabLvqYPJrmbPkZFM
GN9JHTpqo6EALg4vI1n59djAoplkXsS28didVSGNfnY0st/snBY8j1cnmEoY
NU/NqIBgQn7VqmAeO3mtpXVGDlAZieGOds8sWlLOSHeVkS5s5Nc284LDlAZc
pMo2ucfFo4yTIOfYSaw8zOshBoFxMy6pvhNiNGnL6QsPk+iEk7j1AgqIypzN
0h/sz2UwOoxHGllv50tFN7geIUkZE3HU+gSr6VNJakvLzjeCwYMYg7lB1Xf5
axl8GzQui3m1VtTpVlSodaEnTFVvcmRpgUMGO853+EhsFamJpWsP4QhVZXxa
lTo+zWwesOn4dkMfyjwkEicSmJ05Y5QVdVgj0cnwoYrGsHUwPjeX7Gie0tog
RzngJ92ujbU2dwN8X0hgJwNHr3OOWs5c8ri1U/3uiTVDx6aSgMVHoEuQxnd/
1RweDuld/Vxcs6HlpkdMSIcI2XtM5rHPAidns4oM5+iZ5S7J65Gj7MxWi9wc
gs88br1SIWlhnp6oDlM5Srl7uyFPEVDX9op7iTQ0sBW0MLBV2FSXWerJWArJ
5jr/OfHkdO0PbBqXNOpQnn0EWXvN1Dijoxb0I48lByrW5Fy09c7iHY2sMgdq
ulH6gp+S7aiCIY7htcjSr/DZSzKsmm40N1S87iyOqWQcNU8xOuQoPEj05nBS
sEdRvRY5+k6X4s2jkgpzC7HLBwCtPw9czFgzHGBZ9hfXvag0Ay8qzvjgI6cH
KUuJCn36UVOOkIS1vPJCI7TtcKZtW4swU989oshmGWpbV/bh+wj2kcVBM8El
AtZxXZvY+ErBfCwH4cX3U1cNqSkrr6EOxI+ooMSEMpztWKvOdmTzc/+mzM81
G0xu2WHaYeAwGYY5ZlkJx0lGqn0awcuR+HwXtZwVdlseGS+Bj5yXNKRhaQVk
JNtgoGciMFAU+IGRXLsmUO2a0Kicv9IKGqJ0g4XYOneqzwiYmZ8SX3O86iwV
zR81YxD1M2aVOd6VBk7SQQMnydkxsBDo8INA7JwkFwIdowzEAKlC8PXZHxqj
ZEfhM0QvJdxuajv7qN0EwUPCci0reKlnZQvKxgBgZ2DMxoWlYaFz0tYsDdy4
O3YtsJKylLL2SAJ3Y6OAh44HLHoj095mQlqpPN5LjxiRmpOVh4e4s3mr2jlu
J8UsS/1hAUYnueiHsRudnG10sqKSED6nOEWhRkGMVPY1TD1wmSw5dDq8oOiY
VeZ9gc9er40fP34sP7IXHkvGjh0LR/2yP7l3MD9TGy73pv8Dr8mShYGTdm9f
BbwmoQum6+WWhM6bRt8zV+GzzYeEBs+R0wuU27P67E9bC1wHAXYjixfMtHkN
ytu1EhQwtaVJkaV5iWTx/Bn0MR35bfPusz9+cWlYyEyyeN60qPVLp79TX7BE
yeIzOfUMjFntn7Zm0TT6nin0vdO6V6QuwIzWUlun91PXDK+povIrVPJZo6GR
mnG75iPNXXGctAf5mBwoqzt2DeV3hYH8Bmnld9DY7MGTJwc0LnWEJzeLU575
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
8Dezvcuy3do34VzaXrYxA8fy03exnVO45xGvEVSyUrSQlfCmaZqVZsCZw0JW
2odZ6T2WlWj7A7MSCjMvs/bHhoHc5vAXDdRLHtG3P2bL2h+KMFNhIcxU6IUZ
g4E+LyVJP/AhWu8M1ldxyPFYdM3EeYv9qOL571rYIyUT0w/+OkiROb9XePS9
kZeZ2FiUmTD0ajPCox7hQcDR9X8PIWgGQGQgQpDW6RFiMgU6QkhfipCFUcfG
3O8WOUuY9Qeo9xuiHdKqaK/ICwOk+SRs1INSSaM2eClcKQhmc0s4N48z89n7
6Io2c0JZY0ooeCF7ByaUI9O0hLJfSSgohQxlDQb1Z1VMALzBsOrPehOAimpj
g8Gey9ZKCtH2C2TEx+guflXmNEQDnTgXlV10pfFwaB6dxfitBgOsfKiOwWMY
f/0Gr46+L2gwZPbpf7cDQzw7qLIoDfKzUoIqS7JRFbzVhSC41cGUQg6Qlj7/
DFwgFjB7qLzLfVx4MVzgLwk2HnSZT2Fjq3HvaNrY0hcNrwmZZKA0k4SN/oEO
Y6lzHoWzeceoMwxn/HC+D2f76Fwf7pVQU8lOSSpZxVPJYkkqmcJSCdX4eSqh
Gr9VJ/1p2klXNP5qK41/xg8NJlmZBFFtKUH4+x1oTc+p0N3wyLbJ6Kcoak9/
2RgRXzFx2Yq9NGVscyeO+z10h7aWsEgoG3q9s4rEce6N/JysoMrSfBrJjuP5
HrvKsnjuq8QzluxK+e7dnHvE0+WxwvvoJO88GsbOkp7EKT+Hav/JGtswtoFM
x/3zpuM+5v0fqzV3ztYx0F2bzAyPOMSDRke6xCiCjaraPe4/0o77GOW4X0Rq
de24P0OO+/bAyfy4H2s+7u32k7m2IFO+DeZPtKB1VGax415Xq5tHeUMCY4IW
rIyh5slT9NrD/9CtYsEx2Kq660F7/KPxWN/uTvTe/8g/ruWzAxV7M7dIhN66
OvT6+ebG4rwsEsWZ3mcaKyifl0YxpStWAlQvWiXEjbxcL0YOw87pjDCbS0GN
p7TeOeHJO7PZk23zBp4PH94aM9LTIXvBsMz/6F1oD2VXzncGe5MydIbAGngY
8QaK/vQepDu9Uz74CaQt+DM0nfCjZBiJMJaKaBtA3w/OzNzz6R2mnN7859Sd
3qP1p7dlh5YLyMuwXP6DTkAuMwje1OLoaJKWs5u2whMBk733YkTq/IKllR3o
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
vr13/MX/AWhs0gc=\
\>", "ImageResolution" -> \
120.],ExpressionUUID->"acdb395f-c040-44d0-90f9-ced864a9c621"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.798285971446949*^9, 
  3.798285971488837*^9}},ExpressionUUID->"88072dfa-ad0b-44e2-84bf-\
ea832f003f3d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The confusion matrix ", "Subsection",
 CellChangeTimes->{{3.7982860085918674`*^9, 
  3.798286011134104*^9}},ExpressionUUID->"082d76a4-963e-468d-ba91-\
716807b477d8"],

Cell["Let\[CloseCurlyQuote]s look at the desired values", "Text",
 CellChangeTimes->{{3.7982860240567555`*^9, 3.798286027705756*^9}, {
  3.7982860788996973`*^9, 
  3.7982861016742487`*^9}},ExpressionUUID->"0187a472-1d51-470e-9ba5-\
b21d44b64257"],

Cell[CellGroupData[{

Cell[BoxData["yTest"], "Input",
 CellChangeTimes->{{3.798282393447655*^9, 3.798282395648221*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"d22e7dfa-8477-489a-8cbb-82c9c7611465"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7982824221155972`*^9, 3.798553344974429*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"800c06d0-a6ff-4113-9078-8c69d5daa941"]
}, Open  ]],

Cell["and actual ones", "Text",
 CellChangeTimes->{{3.7982861151265187`*^9, 
  3.798286121297454*^9}},ExpressionUUID->"b00794e5-719e-489e-be89-\
566be1162239"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Round", "[", 
  RowBox[{"net1", "[", "xTest", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.798282445063433*^9, 3.7982824617451167`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"5d9bd895-73e4-4f6d-9846-0b101bc9c7b5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7982824546757135`*^9, 3.7982824624832153`*^9}, 
   3.798553349800256*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"2c8b6492-3c70-4764-8239-6441098eaa5b"]
}, Open  ]],

Cell["and their difference ", "Text",
 CellChangeTimes->{{3.798286130964257*^9, 
  3.798286144295931*^9}},ExpressionUUID->"92ea973e-8dab-43bf-a44e-\
e0f925986634"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"yTest", " ", "-", " ", 
  RowBox[{"Round", "[", 
   RowBox[{"net1", "[", "xTest", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7982827191513577`*^9, 3.7982827298210306`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"549fdcb2-82e4-45ac-a629-64574cd17d26"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7983143481003428`*^9, 3.798553353817542*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"1b88e5d4-ffa1-454f-9098-3a9075a0f749"]
}, Open  ]],

Cell["\<\
First, we will calculate the number of correct predictions for each class:\
\>", "Text",
 CellChangeTimes->{{3.798286222532174*^9, 
  3.7982862649882383`*^9}},ExpressionUUID->"70413ffc-07b1-431d-b545-\
77a9511ce848"],

Cell["\<\
setosa classified as setosa: 15
versicolor classified as versicolor: 14
virginica classified as virginica: 15

Now, we can calculate the number of incorrect predictions for each class:

setosa classified as versicolor: 0
setosa classified as virginica: 0

versicolor classified as  setosa: 0
versicolor classified as  virginica: 1

virginica classified as setosa: 0
virginica classified as versicolor: 0\
\>", "Text",
 CellChangeTimes->{{3.7982825523738923`*^9, 3.798282606236208*^9}, {
   3.798282684169224*^9, 3.798282690811138*^9}, 3.798282786737258*^9, {
   3.798282833771536*^9, 3.7982829978850965`*^9}, {3.798283095064706*^9, 
   3.798283095250504*^9}, {3.7982862833886557`*^9, 3.7982862877397585`*^9}, {
   3.79855340672185*^9, 
   3.7985534579651484`*^9}},ExpressionUUID->"0fdb4af4-d6f2-4d54-ba9d-\
fc7cf465a361"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.798282503502961*^9, 
  3.7982825051513834`*^9}},ExpressionUUID->"bbcad62a-ccb7-4c54-b419-\
a162c2bed861"],

Cell["So now we can plot a matrix:", "Text",
 CellChangeTimes->{{3.7982862959398303`*^9, 
  3.7982863077960815`*^9}},ExpressionUUID->"67b7b571-bd21-4a97-89e8-\
665f434b454d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"matrix", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"15", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "14", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "15"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"keys", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<setosa\>\"", ",", "\"\<versicolor\>\"", ",", "\"\<virginica\>\""}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{"MatrixPlot", "[", 
  RowBox[{"matrix", ",", 
   RowBox[{"ColorRules", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", "\[Rule]", "White"}], "}"}]}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<actual\>\"", ",", "\"\<predicted\>\""}], "}"}]}], ",", 
   RowBox[{"FrameTicks", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          "keys"}], "]"}], ",", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          RowBox[{"Total", "@", 
           RowBox[{"Transpose", "@", "matrix"}]}]}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          RowBox[{"Total", "[", "matrix", "]"}]}], "]"}], ",", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          "keys"}], "]"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"#", ",", "16"}], "]"}], ",", 
         RowBox[{"#2", "-", 
          RowBox[{"1", "/", "2"}]}]}], "]"}], "&"}], ",", 
      RowBox[{"Transpose", "@", 
       RowBox[{"Reverse", "@", "matrix"}]}], ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.798283127549922*^9, 3.7982831652683744`*^9}, {
  3.7985534347239127`*^9, 3.798553446560234*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"c4feb9e1-ea02-4652-8aee-adf77e02b427"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{1., 1., 1.}, {1., 1., 1.}, {0.857359, 0.131106, 0.132128}}, {{
   1., 1., 1.}, {0.8929546, 0.38966159999999994`, 0.1794008}, {0.6660832, 
   0.7430418, 0.32293540000000004`}}, {{0.857359, 0.131106, 0.132128}, {1., 
   1., 1.}, {1., 1., 1.}}}, {{0, 0}, {3, 3}}, {0, 1}],
  Epilog->{{
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[1, 2], 
        Rational[1, 2]}, {0.5, 0.5}]], 
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[1, 2], 
        Rational[3, 2]}, {0.5, 1.5}]], 
     InsetBox[
      FormBox[
       StyleBox["15", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[1, 2], 
        Rational[5, 2]}, {0.5, 2.5}]]}, {
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[3, 2], 
        Rational[1, 2]}, {1.5, 0.5}]], 
     InsetBox[
      FormBox[
       StyleBox["14", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[3, 2], 
        Rational[3, 2]}, {1.5, 1.5}]], 
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[3, 2], 
        Rational[5, 2]}, {1.5, 2.5}]]}, {
     InsetBox[
      FormBox[
       StyleBox["15", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[5, 2], 
        Rational[1, 2]}, {2.5, 0.5}]], 
     InsetBox[
      FormBox[
       StyleBox["1", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[5, 2], 
        Rational[3, 2]}, {2.5, 1.5}]], 
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[5, 2], 
        Rational[5, 2]}, {2.5, 2.5}]]}},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted\"", TraditionalForm], 
    FormBox["\"actual\"", TraditionalForm]},
  FrameTicks->{{{{2.5, 
       FormBox["\"setosa\"", TraditionalForm]}, {1.5, 
       FormBox["\"versicolor\"", TraditionalForm]}, {0.5, 
       FormBox["\"virginica\"", TraditionalForm]}}, {{2.5, 
       FormBox["15", TraditionalForm]}, {1.5, 
       FormBox["15", TraditionalForm]}, {0.5, 
       FormBox["15", TraditionalForm]}}}, {{{0.5, 
       FormBox["15", TraditionalForm]}, {1.5, 
       FormBox["14", TraditionalForm]}, {2.5, 
       FormBox["16", TraditionalForm]}}, {{0.5, 
       FormBox["\"setosa\"", TraditionalForm]}, {1.5, 
       FormBox["\"versicolor\"", TraditionalForm]}, {2.5, 
       FormBox["\"virginica\"", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]}]], "Output",
 CellChangeTimes->{{3.7982831471690636`*^9, 3.7982831672176437`*^9}, 
   3.7985534793842535`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"797e6283-d246-424d-b8f7-ac21cb4b53ea"]
}, Open  ]],

Cell["\<\
So as we can see our model got one classification wrong. 

So our model has small enough training and testing errors, got one item \
wrong, and is just a bit overfitted.
\
\>", "Text",
 CellChangeTimes->{{3.7985535015612855`*^9, 3.7985535562692113`*^9}, {
  3.7985555740436106`*^9, 
  3.7985556826840096`*^9}},ExpressionUUID->"e7f048ef-71b9-4595-a92e-\
03ff7ebdab17"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Initializing of our second fnn(Neuron \[Rule] \
Tanh,OutputNonlinearity\[Rule]SaturatedLinear)\
\>", "Section",
 CellChangeTimes->{{3.798286444931346*^9, 3.7982864497066164`*^9}, 
   3.798286648773728*^9},ExpressionUUID->"876dddeb-da6b-4ed0-b1f0-\
5db8d8042702"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net2", "=", 
   RowBox[{"InitializeFeedForwardNet", "[", 
    RowBox[{"xTrain", ",", "yTrain", ",", 
     RowBox[{"{", "8", "}"}], ",", 
     RowBox[{"Neuron", " ", "\[Rule]", " ", "Tanh"}], ",", 
     RowBox[{"OutputNonlinearity", "\[Rule]", "SaturatedLinear"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.798286464150961*^9, 3.7982864644142075`*^9}, {
  3.7982866335444818`*^9, 3.7982866396072626`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"e3715893-c315-4ad5-a74f-8a29f44408bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"net2", ",", "fitrecord"}], "}"}], "=", 
   RowBox[{"NeuralFit", "[", 
    RowBox[{"net2", ",", "xTrain", ",", "yTrain", ",", "80"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7982879176062703`*^9, 3.7982879203239937`*^9}, 
   3.798553586522695*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"e6945835-aec3-4b9e-8f69-183970e01c52"],

Cell[CellGroupData[{

Cell["Graph of the global error", "Subsection",
 CellChangeTimes->{
  3.7985537513972816`*^9},ExpressionUUID->"7348c112-683f-4f7d-b009-\
756bc9a3613d"],

Cell[BoxData[
 GraphicsBox[{{}, {{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJw1yw1QzHkcx/F/5aFR1KymS7bYzahcHoraEvazPdlU2z6kdLMyjobaRofB
uPPwH2UmIk0mJkWUQqXcajckbZ2jmds8bknDiIazZbKIw2U8TN/fb+Y3v3nN
+/cR/ZqtTrfnOE71/f542Xlzs6dbfLBVOiqbVG912W7X0ULmkMKlaYy6y2RH
JP+X6l9WdInsCqdXpVnpb5vIbsgfclk9aT2zBzortkywfTCShWgcqP0n0MI8
HXUqYfrLG8xieN5fsm9aM/MMZL529HirZ54Jq/OAqf8Esx9EzoJPlZuZZ6En
sZHLW8ccgGKjp2F2GvMceJ472nEolnkeHE1DK8K8mQNh817u82IicxBa+lKC
JnDM82Hhom+g10BeAMPGKe4FPHMwviq1g0IZcwiS815F+kxmlsBD8a+96mEj
ORQTv8q95l5hDsO25eLBwnLmhahb8H6aex5zOH7qO/xLUzLzIkj+XqOYZ7tI
Xowig6SdW8u8BGuzhqX7avRkKXbqE0+lRjADHzW5z9vu/TlqHuiOaRqxuJI5
GUxpuV53TReoy5BkDh/8vYDMRaCwZ+7PA3GsR8BLOK7nQHUD9Ujc6Xze3+BT
Tz0S/h3FVzLNddSjkF15677IicxHQdwqzHxWXks9Gseu6notu8h8NCSlqQ4r
tazHwO7pzgC1O+sxuBz/3m12Tg31pRB+zs91aDlHfSl8gxJcfB+fpS6H7+O7
zbe3knk5auav8N+Vwnosjhra3l2XsB6L7INagfnjGerLoFvVLu/aTOaXYa8m
Y8/K/dXU4xAyRza14EsV9Tg0VK1CiPY09XgMDW/bUelN5uNxz0+XUcGxnoAi
0dPzzV2V1BNQX1z1ekcOmVNgvCDDfthSQV2Bixqr+JriFPVElN3OGysOJ/OJ
GA7Tyab7sq6EvLCrOnQKGUo8ixT6mZ3YfyVsDsFN/4+cHLVJiaJ1+k3VvWRO
hSP5gV9Sd5OhgqpTdNi0pZz2Kuzpk95xDz1BexWiCrqfCJRltFej1fKbZMNg
Ke3VMAu07f0tx2ivxmLXLJeSMSW0V2Pk1h/N1owjtNdAO2BMfhRLhgal10sq
jPZkXoOwtL+uttmRTRocr623PuDYPglR3gE5M7/7G5XRca0=
       "]]}}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {
     FormBox["\"Iterations\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"RMSE\"", TraditionalForm],
  PlotRange->{{0, 80.}, {0, 0.1232473158386538}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Print",
 CellChangeTimes->{3.7985535929115963`*^9},
 CellLabel->
  "During evaluation of \
In[17]:=",ExpressionUUID->"c6238ce1-924b-4709-b1d9-3b527bf4fee6"],

Cell[CellGroupData[{

Cell["Training and testing error", "Subsubsection",
 CellChangeTimes->{
  3.7982869560582676`*^9},ExpressionUUID->"e80dc04b-8307-403f-958d-\
b110885a8a7d"],

Cell["\<\
As we can see from the graph of the global error - training error is really \
small near 0.02
But we can\[CloseCurlyQuote]t say the same about our testing error
Seems like our model suffers a bit from overfitting\
\>", "Text",
 CellChangeTimes->{{3.7985538884642467`*^9, 
  3.798553947682198*^9}},ExpressionUUID->"0f98e422-1e1e-4672-84c0-\
102fac42fb37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"100", " ", "-", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"Count", "[", 
      RowBox[{
       RowBox[{"Abs", "[", 
        RowBox[{"yTest", " ", "-", " ", 
         RowBox[{"Round", "[", 
          RowBox[{"net2", "[", "xTest", "]"}], "]"}]}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}]}], "]"}], " ", "/",
      " ", 
     RowBox[{"Length", "[", "testData", "]"}]}], " ", "*", " ", "100.0"}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.7982869678845778`*^9, 3.798286968181782*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"c049b448-b683-43d1-8f67-ca27257c8119"],

Cell[BoxData["4.444444444444443`"], "Output",
 CellChangeTimes->{3.798286970154261*^9, 3.798553823519524*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"d31a60fa-8c41-40b2-bd84-06738eca46e0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The distribution via classes", "Subsubsection",
 CellChangeTimes->{
  3.7982871357478237`*^9},ExpressionUUID->"8c85fa73-0058-4401-bb33-\
863b3371beef"],

Cell["\<\
We can also look at the distribution via classes on each 20 iterations.\
\>", "Text",
 CellChangeTimes->{
  3.7985553764137125`*^9},ExpressionUUID->"6f23f781-73a0-412b-8b55-\
571f2e15a482"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetPlot", "[", 
  RowBox[{"fitrecord", ",", "xTrain", ",", "yTrain", ",", 
   RowBox[{"DataFormat", "\[Rule]", "BarChart"}], ",", 
   RowBox[{"OutputNonlinearity", "\[Rule]", "UnitStep"}], ",", 
   RowBox[{"Intervals", "\[Rule]", "20"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7982871490282836`*^9, 3.79828715370278*^9}, {
  3.7985553711746874`*^9, 3.798555396853964*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"a00331d7-7934-4df9-996e-518956ae5884"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{72.78021032953191, 
                 120.00387305418965`}, {-110.19559970458813`, \
-27.173837752241738`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 15.}, {1.091, 0., 15.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 15.}, {2.091, 0., 15.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{100.98866522460435`, 
                 141.45831039099215`}, {-98.37902574138036, \
-47.728469779523174`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 15]& ,
              TagBoxNote->"15"],
             StyleBox["15", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[15, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    19.}, {2.1820000000000004`, 0., 19.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 19.}, {3.1820000000000004`,
                     0., 19.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{122.50824252172922`, 
                 163.44745644035117`}, {-120.374582193819, \
-66.42891456801033}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 19]& ,
              TagBoxNote->"19"],
             StyleBox["19", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[19, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 14.}, {0., 1.2, 14.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 14.}, {1., 1.2, 14.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{56.619255122108086`, 
                 98.05105884105295}, {-94.31152535854979, \
-44.636079014014435`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 14]& ,
              TagBoxNote->"14"],
             StyleBox["14", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[14, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{79.53970570782674, 
                 
                 122.4195911310847}, {-142.469680715785, \
-63.610138667072405`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    15.}, {2.1820000000000004`, 1.2, 15.}, {
                    3.1820000000000004`, 1.2, 0.}, {3.1820000000000004`, 2.2, 
                    0.}, {3.1820000000000004`, 2.2, 15.}, {
                    3.1820000000000004`, 1.2, 15.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{104.35771757947076`, 
                 141.79726882419197`}, {-127.4883542581603, \
-80.93530566845438}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 15]& ,
              TagBoxNote->"15"],
             StyleBox["15", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[15, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    24.}, {0., 2.4000000000000004`, 24.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 24.}, {1., 2.4000000000000004`, 
                    24.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{35.899367763763536`, 
                 80.12872477066702}, {-122.67725394938846`, \
-60.75093683284623}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 24]& ,
              TagBoxNote->"24"],
             StyleBox["24", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[24, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 29.}, {1.091, 2.4000000000000004`, 
                    29.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    29.}, {2.091, 2.4000000000000004`, 29.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{61.15879256811178, 
                 
                 101.73689038138026`}, {-145.7351652781541, \
-78.31999221820888}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 29]& ,
              TagBoxNote->"29"],
             StyleBox["29", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[29, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{85.12114377838168, 
                 124.41850762149}, {-169.35258655311364`, \
-94.41621894521609}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 0\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -197.16666666666666}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True], InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{72.78021032953191, 
                 120.00387305418965`}, {-110.19559970458813`, \
-27.173837752241738`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 12.}, {1.091, 0., 12.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 12.}, {2.091, 0., 12.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{101.00197246383163`, 
                 140.9343568852214}, {-94.33329890766548, \
-47.728469779523174`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 12]& ,
              TagBoxNote->"12"],
             StyleBox["12", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[12, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    22.}, {2.1820000000000004`, 0., 22.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 22.}, {3.1820000000000004`,
                     0., 22.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{122.50824252172922`, 
                 164.2773818370864}, {-124.71214151110888`, \
-66.42891456801033}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 22]& ,
              TagBoxNote->"22"],
             StyleBox["22", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[22, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 12.}, {0., 1.2, 12.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 12.}, {1., 1.2, 12.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{57.04864229168946, 
                 98.05105884105295}, {-91.63157794979799, \
-44.636079014014435`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 12]& ,
              TagBoxNote->"12"],
             StyleBox["12", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[12, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{79.53970570782674, 
                 122.4195911310847}, {-142.469680715785, \
-63.610138667072405`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    21.}, {2.1820000000000004`, 1.2, 21.}, {
                    3.1820000000000004`, 1.2, 0.}, {3.1820000000000004`, 2.2, 
                    0.}, {3.1820000000000004`, 2.2, 21.}, {
                    3.1820000000000004`, 1.2, 21.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{104.35771757947076`, 
                 142.80792252180362`}, {-135.98620034844052`, \
-80.93530566845438}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 21]& ,
              TagBoxNote->"21"],
             StyleBox["21", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[21, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    22.}, {0., 2.4000000000000004`, 22.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 22.}, {1., 2.4000000000000004`, 
                    22.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{36.52909261415304, 
                 80.12872477066702}, {-119.72204380104877`, \
-60.75093683284623}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 22]& ,
              TagBoxNote->"22"],
             StyleBox["22", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[22, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 21.}, {1.091, 2.4000000000000004`, 
                    21.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    21.}, {2.091, 2.4000000000000004`, 21.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{62.63481197531675, 
                 101.73689038138026`}, {-133.6919792397128, \
-78.31999221820888}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 21]& ,
              TagBoxNote->"21"],
             StyleBox["21", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[21, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{85.12114377838168, 
                 124.41850762149}, {-169.35258655311364`, \
-94.41621894521609}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 20\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -591.5}, ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True], InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{72.78021032953188, 
                 120.00387305418967`}, {-110.19559970458818`, \
-27.173837752241738`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 16.}, {1.091, 0., 16.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 16.}, {2.091, 0., 16.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{100.98414444830668`, 
                 141.6362746125319}, {-99.7523365522563, \
-47.728469779523195`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 16]& ,
              TagBoxNote->"16"],
             StyleBox["16", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[16, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    18.}, {2.1820000000000004`, 0., 18.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 18.}, {3.1820000000000004`,
                     0., 18.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{122.50824252172923`, 
                 163.17586433701354`}, {-118.95427948572201`, \
-66.42891456801036}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 18]& ,
              TagBoxNote->"18"],
             StyleBox["18", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[18, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 19.}, {0., 1.2, 19.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 19.}, {1., 1.2, 19.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{55.50896294308028, 
                 98.05105884105295}, {-101.23109034396747`, \
-44.63607901401445}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 19]& ,
              TagBoxNote->"19"],
             StyleBox["19", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[19, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{79.53970570782674, 
                 122.41959113108472`}, {-142.46968071578505`, \
-63.610138667072434`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    21.}, {2.1820000000000004`, 1.2, 21.}, {
                    3.1820000000000004`, 1.2, 0.}, {3.1820000000000004`, 2.2, 
                    0.}, {3.1820000000000004`, 2.2, 21.}, {
                    3.1820000000000004`, 1.2, 21.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{104.35771757947076`, 
                 142.80792252180368`}, {-135.98620034844058`, \
-80.9353056684544}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 21]& ,
              TagBoxNote->"21"],
             StyleBox["21", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[21, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    14.}, {0., 2.4000000000000004`, 14.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 14.}, {1., 2.4000000000000004`, 
                    14.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                ImageSizeCache->{{38.93229704893761, 
                 80.12872477066702}, {-108.42163922933662`, \
-60.75093683284626}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 14]& ,
              TagBoxNote->"14"],
             StyleBox["14", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[14, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 18.}, {1.091, 2.4000000000000004`, 
                    18.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    18.}, {2.091, 2.4000000000000004`, 18.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{63.16113689253757, 
                 101.73689038138026`}, {-129.38862587661637`, \
-78.31999221820892}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 18]& ,
              TagBoxNote->"18"],
             StyleBox["18", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[18, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{85.12114377838168, 
                 124.41850762149}, {-169.35258655311372`, \
-94.41621894521613}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 40\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -985.8333333333333}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True], InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{72.78021032953188, 
                 120.00387305418967`}, {-110.19559970458818`, \
-27.173837752241738`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 20.}, {1.091, 0., 20.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 20.}, {2.091, 0., 20.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{100.9656195755324, 
                 142.36533738679373`}, {-105.37387742428747`, \
-47.728469779523195`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 20]& ,
              TagBoxNote->"20"],
             StyleBox["20", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[20, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    17.}, {2.1820000000000004`, 0., 17.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 17.}, {3.1820000000000004`,
                     0., 17.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{122.50824252172923`, 
                 162.9067397338606}, {-117.54647102147487`, \
-66.42891456801036}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 17]& ,
              TagBoxNote->"17"],
             StyleBox["17", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[17, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 21.}, {0., 1.2, 21.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 21.}, {1., 1.2, 21.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{55.04946028322915, 
                 98.05105884105295}, {-104.09053493004083`, \
-44.63607901401445}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 21]& ,
              TagBoxNote->"21"],
             StyleBox["21", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[21, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{79.53970570782674, 
                 
                 122.41959113108472`}, {-142.46968071578505`, \
-63.610138667072434`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    21.}, {2.1820000000000004`, 1.2, 21.}, {
                    3.1820000000000004`, 1.2, 0.}, {3.1820000000000004`, 2.2, 
                    0.}, {3.1820000000000004`, 2.2, 21.}, {
                    3.1820000000000004`, 1.2, 21.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{104.35771757947076`, 
                 142.80792252180368`}, {-135.98620034844058`, \
-80.9353056684544}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 21]& ,
              TagBoxNote->"21"],
             StyleBox["21", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[21, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    13.}, {0., 2.4000000000000004`, 13.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 13.}, {1., 2.4000000000000004`, 
                    13.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{39.22033651520417, 
                 80.12872477066702}, {-107.06481462714113`, \
-60.75093683284626}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 13]& ,
              TagBoxNote->"13"],
             StyleBox["13", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[13, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 16.}, {1.091, 2.4000000000000004`, 
                    16.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    16.}, {2.091, 2.4000000000000004`, 16.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{63.50425692675074, 
                 
                 101.73689038138026`}, {-126.58065921889857`, \
-78.31999221820892}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 16]& ,
              TagBoxNote->"16"],
             StyleBox["16", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[16, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{85.12114377838168, 
                 124.41850762149}, {-169.35258655311372`, \
-94.41621894521613}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 60\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -1380.1666666666665}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True], InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{72.78021032953188, 
                 120.00387305418967`}, {-110.19559970458818`, \
-27.173837752241738`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 25.}, {1.091, 0., 25.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 25.}, {2.091, 0., 25.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{100.94141972591972`, 
                 143.3172968883846}, {-112.70327970555084`, \
-47.728469779523195`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 25]& ,
              TagBoxNote->"25"],
             StyleBox["25", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[25, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    13.}, {2.1820000000000004`, 0., 13.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 13.}, {3.1820000000000004`,
                     0., 13.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{122.50824252172923`, 
                 161.85425578489742`}, {-112.03693929826615`, \
-66.42891456801036}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 13]& ,
              TagBoxNote->"13"],
             StyleBox["13", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[13, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 23.}, {0., 1.2, 23.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 23.}, {1., 1.2, 23.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{54.58077022408016, 
                 98.05105884105295}, {-107.00458237162721`, \
-44.63607901401445}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 23]& ,
              TagBoxNote->"23"],
             StyleBox["23", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[23, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{79.53970570782674, 
                 122.41959113108472`}, {-142.46968071578505`, \
-63.610138667072434`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    18.}, {2.1820000000000004`, 1.2, 18.}, {
                    3.1820000000000004`, 1.2, 0.}, {3.1820000000000004`, 2.2, 
                    0.}, {3.1820000000000004`, 2.2, 18.}, {
                    3.1820000000000004`, 1.2, 18.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{104.35771757947076`, 
                 142.2959407005543}, {-131.683039048744, -80.9353056684544}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 18]& ,
              TagBoxNote->"18"],
             StyleBox["18", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[18, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    19.}, {0., 2.4000000000000004`, 19.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 19.}, {1., 2.4000000000000004`, 
                    19.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{37.45147719001844, 
                 80.12872477066702}, {-115.38900679993812`, \
-60.75093683284626}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 19]& ,
              TagBoxNote->"19"],
             StyleBox["19", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[19, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 13.}, {1.091, 2.4000000000000004`, 
                    13.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    13.}, {2.091, 2.4000000000000004`, 13.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{64.00769893727256, 
                 101.73689038138026`}, {-122.45704543943106`, \
-78.31999221820892}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 13]& ,
              TagBoxNote->"13"],
             StyleBox["13", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[13, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{85.12114377838168, 
                 124.41850762149}, {-169.35258655311372`, \
-94.41621894521613}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 80\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -1774.5}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True]}, 
   StyleBox[{{}, {LineBox[{{0, 0}, {0, -394.3333333333333}}], 
      LineBox[{{0, -394.3333333333333}, {0, -788.6666666666666}}], 
      LineBox[{{0, -788.6666666666666}, {0, -1183.}}], 
      LineBox[{{0, -1183.}, {0, -1577.3333333333333`}}], 
      LineBox[{{0, -1577.3333333333333`}, {0, -1971.6666666666665`}}], 
      LineBox[{{378., 0}, {378., -394.3333333333333}}], 
      LineBox[{{378., -394.3333333333333}, {378., -788.6666666666666}}], 
      LineBox[{{378., -788.6666666666666}, {378., -1183.}}], 
      LineBox[{{378., -1183.}, {378., -1577.3333333333333`}}], 
      LineBox[{{378., -1577.3333333333333`}, {378., -1971.6666666666665`}}], 
      LineBox[{{0, 0}, {378., 0}}], 
      LineBox[{{0, -394.3333333333333}, {378., -394.3333333333333}}], 
      LineBox[{{0, -788.6666666666666}, {378., -788.6666666666666}}], 
      LineBox[{{0, -1183.}, {378., -1183.}}], 
      LineBox[{{0, -1577.3333333333333`}, {378., -1577.3333333333333`}}], 
      LineBox[{{0, -1971.6666666666665`}, {378., -1971.6666666666665`}}]}},
    Antialiasing->False]},
  ImageSize->{223.01934398654333`, Automatic},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{3.798555400020602*^9},
 CellLabel->"Out[32]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
Ss+qS7rkVEvQOgIlUdNFwoYUnkxEwm7LOrwbGXVl69atbj3qh1aiXpZEvaIQ
9WqwnUfdXW9RxDiY2uEJvwuXKUpznM5OmYHiokjRTYys6FwkFGXPJq97ykG5
veqHcisFo7ORb9Kmr3KrdM7STxV2GN4MM1irYORrnoNT74BHVhr7DvwQX105
D7naTnXDw8sRY2tFPT6/khEJv6HIZIqJLQUYb415N9SYuPjZ640j82Dl1xps
Zezcxo4N4V/DL7m74OeTyfBT9ja4eXwL/HhsI/zgkL3qAtNOJ4FplCIwOUzY
U5ryUsfXZ/HvQmjUYR2EjdsOW1Ouw6Yd12D9tu8gdvNVWBnPWLruMiyOuUiK
L7JUVXz14ss4a/GlyePOmSoSU8ytCMHmoJQQxtB06js4SQVQeaxauHCh2/S0
igcpz3KnePc6I+XlrAsXLiAp0XEWGczkitJe6UIThrd9nYjpq6pplFQEMacb
LXSyeomKrbGzClcXL+4YTK7VrZL7q0XJPT73TSja3kBff+H3lLqMHF8ycjBi
7KzJyGEQ4+7m9xg5X9aJ6e+UCqduAjUZ/SGWueft7Pv3fs3O4yt2HnU8z0N3
6Z6h7/mkgQpB7coyStJqCn3vX9J64+gCasVDYiY11yB+eEP45dQeQdAdjKBJ
jKCJjKAsaT3CktaMuHuQl2ymDVra99ImNYK6zSOhSacNMHziDtiR9j1s23MD
Nu+8BhuSCiF2y1VYlXAFohlBVQV4GirAjKBjZxkKsF6SGaqXZISWJKqgB5i7
TO1a4bd9PYORkGWIkEHoJSUZr2RmZrqssnAJOJh3vV44H1J4VeciVVkuoDT0
z7vsKEI6agYplbiWSJkwot3rftQ3y+n1zQPKtAzZTZcrNFpUgs5uD1NaU1bC
sZUt7lm7zYr6FIp2NjOtAYHbpf+eUk9fG0uNb28lVIGs2S9CYTGVIY88UypD
a6vC31Ka8XOgbdsbKIOD53kYHlzmxu8SKS+v/xquMgJ4L81Yu/nuXz76c3Yk
deVtZ2RMbqFBwohGcOtMGtw6tRd+ydsNP+cwUp5gpMxK9K4k7fVHSRphVpJs
OvnSpjSDr1ouhaZdNjGPGQfbUi7BTkbKJEHKeEbKtYyUqxkpzZqvUZbRNV+l
LKNovrw7D93mPuY207shKdFtHiC3mdoVX8NDewAJGohppxaEMa1kafq2bdtc
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
tz0755fNkpRD8/7NtCHw97z5yvfOVpYtn2KO3O9L9Fz8BivnGlLxst7z2ydD
er+XxYZ8coN52nzGlPXuZVnvtn6VWNY7W8963fRr2E/2sZewpoRPpQWlsSLb
nVG329DjMJhRNzv3Ozh/+Tc4U3CHJKwslLCIuj+T+LznwI/exefVFvHZqB/l
9xq0+dNN0xppD9n7XJfbZnLuBjLeNibu3lxbTQvQ2Ys/VdDKcK+7bt62Yzui
Zb475HrudvxOLPbKzikKkQM5Z1l2G0X9Uf4WfWR38HVZ1JGdFEJZwv+z13UV
WJLrOqTR71sl5OyEgfDr6dXGbmS49gFNH1iqT/Lha8TiQpWCP7mq27UqVgNN
6/re3tuZVDOv2WzCZ3D98BzTJrbG985RNuYoTsgc4iVkbuYlZLbrtfKzcOR2
ot71PXDj5HrY1ftVWpBd30IQN42yy3rbYdYboGS9qlrFst68PTYdHIy3R5wm
/dirVVNHTId+Y7hqhDXY7uGct9903QzxiSehgPEW1apcRa1yIz3bLR7Tf1Ra
reUj6uFavnb+1uU2zxX5B8oaGS3622qBVtp6et0zx4ZcP5lgeN3CQr3hUaXt
luHPeVR9cq1VH4tgLGeWy0Z+dF98H5zyLBoWs1QKj5IbOLOln9G6mCAEqF2j
4R8XE4ymHmpej6WJBbRsiZj5Y46YrW53vEPEzOlze18INXY5NfoXrv8M7uQt
0/umzUPGImV921mWTPteI+bWNhGzt8kG1gas+1A5Uubs3cjZANt7v2Hs/on7
vfUrV8xs123bBl9qxipYbZg9EfqMOEytE30FdXsgdcOOQ9u+e2FtwjHIPf0D
nBVC8wmkbs4tyBCClWyRTCLBylloVpeZGTwunWhbxt7V1isObQPL3kzW01vu
ajUkrRSl+LOKgUThUjLftXjebdLzkscN4NRNmN//Hb7Cp22dR0xfVbqKnWiL
/5+NrAB3N5mjue/PpUF+4gBDfFr1GZzfPUHZTEi0A+DK7dg5S95XUkl6wcV8
qWifghVGrkghLljdTu1FhWa7RLZwe2f4R8E65Tulx1eHjcXKyvDC65/yJ2oe
6CVq7mjb/eUZNXvrvLq/taIbuQmQ3O8tZf9SYxc654S3JE94+1aEG3n7PRNe
ny0bTvOE+OLCx2NGQ89h+0jzxdVEcSmY3oK+IWFZ0GHAfpi5KB1yz/yg680n
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
47vCrxeSvOu/dq7aadLeSTtX7bCsum1jpff+DixF8f6OLHtX7a0UdV/UMH+q
xk5Nleq8Jae425rD3P+4+24yy3OXt6IZ8/ryjupuQ7FDHfcE4/mzeUN5c/5s
lKF4/qxMQCxm/nw+YxvMXZpJs3Rx/gCu+opr4OBeY6iEzbEqYQuclLA8GyUs
m9yzVML6Cy1bNFNGzpofWzxKl72bPhQJzCmdTN4ZuSopjVSWtPaH0qftKI2E
Do8Pe5Farb7dPwd+vZziHK3q3tqPNW9OSW9tWTAjy5u3tm5V5NQM8qVnM4i/
ZSpXCwV4ymJYXaaWrR+sw4eb6rJTh+V/KPo2DZPm2Q44Bzo7dhCc2xKhLx33
bSJf9ZGv2DravPXQKmPrIfOe821EKt2Mp9IzzKk07660ptJvG2v3+JFKy8UB
buSlQfSKPTSLAOfrIqWjBKV1SUyk0lZJTG0C8SmJiVYtFLflfOL9GQUkfzUr
FqfL30kfJDjdifMaN2ExOI08xsgbI3Dkty9On7LjdNLSvmXhyqGF8NvVA86S
kt+u2sv8epOr9rZqs+qqXXSNxL8P1zOji1G4uh8SmTr/wZ/Ss1Mb5v9MBI57
DX+7sQ1kxE7lW4qJxdRxWbkrSeomCOPhUryyo4m3DbAXGEUrjxZMNaMe7Saj
/qtHRo3y2KplG2j+/WrBaVzrCufhL1ljyGNzrfLYQi/y2GT7xi51Gb0tyach
49jFssWlMy7uMZTTVqfzULEsfB/hqgMlrTmd0VkTpwOJ08GWVpH6YsYD9oqc
RD4PSF7Sz8GveVGVXPtpm4Wt7Py0302bzu0k5vKVzfX4Kl9d8lK+slHJ7GdC
+FOI9mzYdJzPZBt6jy9W6P23va0hZ31fuLRnOdw4ECNWZ1YWtNkhV1YXmyNs
kpsjYEatbseLGXVvvXR12rF0ZWnWHGuZkegyo05gfJ45ez3ND1qz+SotfIXT
8JHPmFEvsWbUNgoZbyPxv/tLTiuOXp3aeuLE2S65/KYabushdydiL04wHsqX
DEBOy9fYY0nJa9Vls/9nIbk13+w+geyuFdXntfxzmZv9KwLdq8fOUT32CO8e
myZP+NPn6WeriVNRy1tLthfNDIvTzpqZP8Vpf3o8nRYQcBmFH+rGPHAvOIWM
TV8rlqMTE+nVbYt2LzKvvU5RuNg3gRLr4Xwb3xjPbXz1gpaf/Z1uE+vYXp/A
qgUxEJd4mSbjxyXyBTZiBLsxsV4qE2vBbrXFBJe6Q71ssgu9jBJr0dvZvNvm
jqGhI926aRO1U0IFtUkoI1LbUztIpTa6bV7hCmY/jjcayOioj3+AxeEnzVMn
1tasun9q5fDdK8Nyv8/f8R/03Q6LUpr8jZcJF+nSdzczK7cOrSf3VOHyUza7
njYaogeL6UAespmXcrVpJPGnDbT4sfjfDvSEgq3Mv6auN6YHqTsM0sx6sUSG
vkn3fBGLs/xaLs2+cbyxL+jaMP+qW5YWUMfZi17y611dn4RVY0IhIekCTS3C
Dc1we2BcaxZnBOIMfVzUDvNrq2Rm13IiJTNqOfFDMgsZeiirebcN5TXXJWhB
aEbYkQqhkcAjkbb++GrFXy9Ff+2Hr86UmTX664QjyYvuo7/2ZIDZX1vmZdj6
a1+tob7mJq8Uc5PvobnbJhov2DUaFrd5DubU0mBCDQ3ydiz0oZq5rVlb20It
y+b6EY3fTusDx7fOg2tZu5T5CXIqkZjwp2y4cD1thXmfI3WrMnWLQX/rW/Na
+dcSqi70M1gul/syxLV/BhJWbIDte7+jKUi47CwyGmfp40JYuN4GLoaFjF4j
GE2KmcyubZpPcA8lp2lTw6edMilmIUP2hnxcs9eDyEqXvZ2cyiUq3c1QqIx+
OmMcvubM5lJWNitC+CJsDw3wQmi+CkhDJHPVvVPfRhed/21OkoNsfK8u2mHd
6Gzpov2ZreF/E4pR2XKYuexU2bK5HimXHVrWDSZ9qsGSOpoWAJF1NW0YzP9S
g0Ud3rLMh/Q2U8OfgrWb4Ntc/L+8rR+kLRusN2XITkmacJ+ziyYb3cRlM/S1
oNd5LjGpb3xk2bSsOFWtWXZVLXUepJFa7xvwBsQObgA7U7+lzZJwghIutYGT
lHDDM5xTiJP1kcwJgsym1HqDTK0veTSfSKnM1HyiS2U8tR40/mhWp36b0BW3
dMffN/TYehzncLrk8EgkasY4JC+9Tmm1l1Q6UCU0Kd6dtEDeIJoQFbk/YZbm
H6NpYpXhovX6rjcXveMeXfRE/6ZOuukT9daGUszC1q950bB7YReY9hljcl0N
eQxRdZHRS+tp2lCI/kqDVT0qQfbWOV4EMxe1ap9zr6zLeE2Av2eOhqzY/nBs
eRicWz8ajqweB99m7RHLaIieSX22Lwu6s3wF3WJfFVnU2moUtS5Zi1qr/Sxq
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
iDuPreb/sptp4ussWEhlT3fIY71U0UQkicaWwD/CmcBHoSl2JInKKPKKZJFJ
H5EiMg9IkWlGIw1s6G6SNoemPAmbSURufcMGoRP+As37xpPIHMMjczDU7/gY
6rb2h1oqbVBWv6aV1fOflbwbqXCvejcx+z68ByPzp8rj8X66OvduVMx883uc
FJu+mincD12LzUGWsVnBPtdWTeIyE+PTAwNUl8E96dtVRMX4i1DFV8LiYY9Q
+9mRPUjLXqiQJQcHQy1XCVEWWrSyTkIKeWJnyTr+IGIPoc7CJTT7a0LUGTUt
OKSDEG1SQvRROBv0KP315cKV8L/tMeQVzUM1Qg3Vc2aKx4pruqh4LEL10NSn
aIhuf9MG4RN9oOXgZGjePwGagj6D03tHQIP/EB6qA5xU4XoH6F50gHiPSV/c
j8Jj9Zd8fXzmIJy2qY7jCw4T0OLxEEuYpHgd4Fq8MmV+ly5eQ/Txijk9E3M5
e6SyeG2NZ2RzXa+y+I2rxn/4l/qSLU/1SQicg78bRXjz8qG/0bUrWhuOqSJc
ueDGcBPEEMOVmjUktDAcO0s3qv/05J+9s2g5/fP0kscoXE0F905ZcKuSR4Tr
GR6urcGP0nC+2USephfiSMjG8rCN4vlfJqFWEslfF7Z6h3yNiUOuF+r2Eil0
2p9ouO7sa6NP2NrgySRsp5Cw9SVhO5ZkiZEkbIcSifSJtVCnYfsn+8YErXnU
96DfX6lCUqP2bgdRmzdNidr+rkXtJ3ZRW+Jzmz4mo+SoxXjNxEdsim2TTEox
XldP/fTPMGvAL+By2DNwLfwpv5oDb/fbsewzygRovE6RDXJrszJbF69UxPCM
jY9CjC2Mx87jWzj/20P/7TuLV1NG4apENxRD/lox1KKL17Z9j5J4xpglj9aO
BBK38eQVyx65Stw64q2OTPc7E08RM56m8er/lg22kcftqZAZcDZsJrQcmgrN
IROhKZjEbcAo8vccaiHtX5Kk/Z9UaW9gMB0Z5N0nYcUL+LjlMftTGrM9dOtk
adzapMBVzj994FrgMv3Py9FYueGBe7s1ngRulQhcb/q43ao+bjtIzCazmMWi
Do7AXg73oSOEt448m5C19s/UaLe2lexjVthKImap7tnKnoeYujG2Crb9HW7W
BUjPr72ULiAOzGLWYbVQr6EMYvYcj9nz+x+l33OzmTxfOxLJ6wiP3Tgpdp1k
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
YpI7ug2Dnqx4jKQSsx15f9j2nwWgLgferWDvPoq9+6yTIInDjOUfKHhLR1GX
Qau7mRKb5HDjlJIJvuhhD0DxpsHqjCEdfxdb0N7XrVp6Farodhd5M+iz3KuR
t/P+lnk1aPGP/7nk1fSE7GHd59XI5bDmvMOQdXgnLFuy3PDMgbOrLt2hnCrs
FMq5PTQizwBy+PHLOuHmWuKjWo1/zSjxcRRRFM4xwaCrWZCBsKcEQlZHo5qu
q468ryJo6WYweiHl5Akxgnwc4tndYyE6GPZUXRih+OgiCgbDn1MY3muaAnEE
Cxsw7FPdWNNUR/2Zea9DTcB47RoKzbQ8rjyTUuDaN6QU+BJfeya2ZD8NZXOe
gOOzrKoIwpBRU6BzhsxRlgKd6M3F1Lc39LRTKxaUk3hmVw7ugIyWnbiCxst9
xjikSLKp+kyHQwdqj/ooBgRUfB0prZcKxTcl8/SOoagS0kyKtR+6qlD6ddVR
/FVxr0UlqRyPFI1GxT0nMInokMfrqwI4PCNwd4zNFJvuTpsYY5M5MvG78WX7
JSLSk64uvAd/b5+ENa9rMuSZY0m01yNdbeDwQCwSROprcIjQmJEPQu7KD9QJ
fDqyJaaJcQmTmMKXdp9pFjGJ3fW94MSyF/mu0OdcqGbcTasZSZ96WrQnWpsy
B3dvgisnUuxqexi8u/ZXOTz0LDbsrXfjPJ4zxLSiulNFpAI1xArii/stA6Qk
qQLzXjMjdBj/tUAoq1kw7Bg5oUbfF0y+rtQ3usEJ/QP7Bm7OKLLRS4C0y3WQ
eho0dnkoM2AKNMXWUKSwhMrSzNkNDcWOZ8MGeim50pPmSk9+eyl4wqmUlbaf
KGj1pr3Id5FM2n9eWtA86KjJh9aydNr8a9dnNdbOnYmf/jw0HF7Adzmpw/9i
MIzNLEuJlK71lXaHKjudpNW+8l0XTWXjUevKhuTqmFc2zF0djMS2UraD5nJF
EpxIO0Q/t+fgSdOFYEaHn43udi3edNpgd7vzhLaqVoKqUixEANp6aD8ne6XC
2REVCvat3qIQmM6xalEnVBPnHSHwv9lXOGdN4VAqpmDrcacwdFDz99avohH5
0oMlS8SkD18xavPqRhzSpHkXRZ8Xok7kSvy4pwLA+ygAvWm+PJYcQqv4kkxk
vb9jNb2/BZuGQWP0CnW8WVlYOFebL/f7SvkSlxZKW2uUvdrS4kLNrRe+W3u+
QRFjym8kI8fdBkutkRMbsoPG3EH/jVAQvw8ulMRBYGg1RPCFRpbnZA22RVuy
WIOr63Ys9gJjsdX1V3XAe0Kr7bSf+5n6OcVzube78NPzse/b0uz13o0m8r7J
5jCddd4ZjoxXOuHmwIxQzG1soZpbODIekPES8JCyF76nVs5A+tWf0W/s8e7e
6S9S/SZpO+6rML2XimsIDy6VlgOIpn0+02yXvqbytdd85YayjnCwujVNWX39
lrRtV1eUWGBVlLBouWw45rYf03E8AfaF17CVRsnWK41Mr78anv5xjW02nflq
e2pmhYQc5HVyysKPg4Xt+aMi567g0tyECfUlKTzrVCFiCHJaBXpcAg++yXSq
X9kEMggTTD744ulHgoxTHcwOIeOlPXCUsvoB+h2T+x5c8A9a/M428D8yN42B
s+n+bP0XzuXSIRexH42NidlnHD++I03OOKOVjFOvZJz+fDs1v2xkUjZXSweP
GZcOHHZfOu+bdJQlQljcabaEJVUcMNddh4wyvg5ptP9VoXubzeme/loyp3vb
M7MrRJpBYKCgoqYIj2r8+E0uun4ssDzMvnLfD03FwaV5iZCTfiS49GiKwMaN
Vvq2iYGH48UMNT84hxqDxi8r1CBaZOR0H2p6KknFg35SXG3fj++pvSHAgwVt
GThJE/4IJXun07Eo1pOpLhhUJl+UZWlS0olepK5252s6xa0F+6TzMV/V+YFB
JbyXlHRcLQKwhk37vhMri4NRtosVyRAac0rZuxJnsYMyyGAHpTMHPozOqxpQ
tu0RsZm2ue4Eu/eDbFSLenck2DMgNzNlQmN1iVG80yzRwyDANd66Cz2OxqHO
DQKZWLkY5walLyW0ByrhPoImiXUkQQTiCz/+OYvz8MjB92p0fpLvY3A6+yDf
wSp2mYVKU15ywtjC95nJCWOxQcKYrE0Ye8RedXaGi9Wa3zOvNeuM9jI7o/1X
qtHudOejvT9wsTIVwuPrNQvD7c4JW931doVgrTMnWCOnHw1/oc9M9+L8rse+
v5zLtDTTDRjj1QU5GeSVjh97YLzjm6YeBuZ1N/Yyeeri3Ev7TM8O9HTU2uso
1L1VXe2JQa08xZlcmBwT+vE9ipguP7iEbR4WK5GU9t1IF57oKwye6DP4Ckzp
iU5Na77VnB63+tC6rGtnWj9uYFobdxI6K8IvnciA6MQGtlU476pL27oFJbLr
azJrvze+Xlg9eELcsF5vL6Tsx63o7qlUX24jFcFH9q0O8r6TRPZxmwfGuCvx
7UbB1Ci+0R9SF0lgmLPHedoBhyHuqJGB8hE83x3IQpwbTyNsLOwnxuz78B7I
mPoU1ORG0wcZJmzt0qJEtx7mbXydnnIgg24Bkx/maPZKO8bxYa5vHNJXTZe8
YG32TrYye/8itfBVwk0TtZyfnss2XZksABbERVXL9rUZq6Yh0cKuv0w2ZdGx
4PeHbKeDs/NdC+3fs68gG+cP7mJu+LRivN7qROv0Rid5dQSXFuVBblYaeZ9r
89AwlzotU//RY76nHPM+bOE+oTFJh/HRTkPetZadXxo8x39CP+e7ZVbfX0BT
SRp9tlGp11TMLBHRAVfj4Jmep64BZ/Ppumd6rNjEqn+ms2swTYFjtM90TauO
QSFy6Yvq0UJqrD7llLGq6ZBr0T/TVZmbm5JpeoaPXmV36syJWZuO/WWhuWsq
qz+bmTjszQ+W4LN7gVvxzQi4eHTz+Pak8e0p4lt9jJNIIGRFWDc2o2e5o+KB
q80vqvzUxDWr5RHSEorRmR2o1PJcCu8HVLEpODh/ho/rv3bc35qbi5Pgi+ZS
qbvF2Wd5iMWzfK3yLD9n9yyfpm67t3uWq4W7U0aFu2UvGTifTzjlfFpPDZZC
Xlq2MoxtuPxTdwhB1A1CzeoGFq3Yc1cVBw8as+sXGJ6L3Ilpb2oz3lYM+laM
ZvLq8sIP8PncYevBCXi6IODaeHajGOZaPHsaLbki3OQQPquRo7jRXvmA+qwW
opIH85heZbveXR25bRZ01herz+vmO31eb7J+XofOUBtH+PUubWul1DiiL4SZ
TfMY2pLaoXDRzmWkMo9m5Gh2rNudpcq1V5mmNr5J08jq7TXVMxYlD/tg0PIl
7sSvF49fYZN3eOqC1xuDGsmGIB1O++h32Phk2F1hEMk9yBM5GJ/N+BJPZ9ee
zL/S2oD0yXwv/dwo/DJ5Or/o4Omc4cTTea/6dE7TPZ3piSx2U4GdotM9nTX9
ifZtFZZ1Kf2wjJ1FaD/TrVqEjHyUF5UZLfPTnJNKM1p0buSxG9xYW7m1zPfd
/vTcxlLXgvh39G1PQizYQ/i25iF8w+eH2zcogbaLaN0jucjlypAbZVWnIxrr
qhjJIqrdjWiN5+dbnbSWtgB5isEwX9sw8qz+aHXkjjn8WV3Rzc/q1fbPatq0
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
A8yiq1n87cLedJT6G8iE57Aex/guQBrpVBoZqjTes7nzmB2RxZwQ5kaPO7uZ
BerNLLJ2M8v00oCbsZNGJliCLtLNtDwT37pNcaSvTW+54T5AHCyewtdeV/D1
pN19ZGjuA6IXcR8Lrd3HUvU+Ei5VHaH3wVGVT+/jmOY+euDNMHx5tKyJbx02
sUfDysPRz3eL6N/IjQkHbkgRjjt75FEMu5XG+FhXZNe6u+Gx2DoleFxg7W6Y
vZOigPJN/I56iztidvtwJsqD3RLTfx96S+0qx3R+mIT0eJj8vKEZORffOCx3
6rNwZ83+ntOWakpOK7yd1qA8eCMvsdvRRKU6Jyrfznxrt8PMnZfZ7bhxX5Pf
A8xxD7yjLtyjfmRjTqieclfTej9Cpn/xN/Jz1ivkt/zm9O6a0Lt7Hu4Obqzh
j5u4OoFFaGXxxuZZu7HFLtwY3E5hDw7GHuhxmLj4jbXZE9miMrg7u7G5/R4l
M/vQm9v4Gr251/EGf8lsGrZi5JNN1kxsBjdGbw+sdivhfWxNHd2i6kwhkitd
vHhxlLVbjHFwizfFLXowuwG3yW7VEwX5sBBk+5xpvniP4X5/w3uMHPAomd2X
3me2L/ltyxv0gnt9lfyyoWlOwcxnXs6a+QoIU9xnM4NbNIgXRLD6Mg6ZddGI
pbzs1vCxnrwTudimDZ6LfmiDhkdvP6l7B/4Gmt+gAwsb2dpYm9NoV+e0P59X
nFtJQ3BiYVKrg7o+wia1P5vUeQMfJXPoBP+c/Rb5bWsLesmT+3LlvqhGACSw
bTC5rxhixy5wERPblN+M3IfI5rSu2EpNNFGabfjNOrF8HgwODhYNUXJjKExz
grqmU96tFD7R4kQvUieazukZnX72EIFgYX97BPOJDooa+CwZ1/UhMsfvUc0k
Lxj0GD7/Oacl+a3gbXrBZL9JJ9tXTHZ1xZLnOiYGvgjOobm1iX7JYKJ5c6PY
OFu0mPGuYXk/bdaK5m4qLO1rra3NKXPMImI4Q+fLn15DYE5pHpHJ/FJ5DsLX
DWZVZwDRBdsemTSr7zNsYvvpJnbwY2TRkMfw+c+5rchv21obTDA1j5tfqayI
e77T1M+esj3Mgg24LcVDN8RHnl9AES9DFzeVhir5xYsG08K72QGM7TkCG6n9
dJolGPJ0w/vFWuF7Md0LHE73Rm4/crwQxU/oUdyyZnXHkJl9niFTP38EZzrC
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
KctJmllSYCbJotlP4+s3D4SQP8rDyO/lU6hEQ6lEJ9lL9LBOononWipsrqux
q0NONfX0ipeRUoJ1ETXxrW114afnQaKsk9dbL0oIVBSCz9+aLFnS4SPLksU9
ZeGyLPEoLibMnkExo9/CrA4FOYgJEuzphrAX1CCPRgZXUl/H97iS3TlLJjbx
KAcEWcAFuZ0Lsji8Eb5+8+Bk8sfx6VSgU7UCPSYEWvuoyHlwa5iMUGE2A/GF
jXn/oW0jW3h3XBv0Mi4Sa2oqT5a1K/IcYU2egXbyjBLyhPiVOdEzu/k5p9LR
auz0sChbr6CYQC7eAYxCBPHGcuJk08ym/Jbb4+1eSXsLed0VLtQgnOUgduKl
oi0KZ+ItmdOIvk5FXDaV/HFiJhPzcfqzImYjF2sUK5mQZabBr9Padk5h+Esg
XvLZSzYy+z336vU9PMKS+j7SXCPhfHMJD7cmYZbYeOokHM6sMLzCjo/sJ8sW
rpY1BSEhESN8cUFIJJdt9FBVtqDCVzZ2ZPfMY8MrGe/Q9z3qNL90mqCg/X0K
wyKwvyDbHSBbKtedcxuRXRGNUOY3y6aRP07O1sk4TOdx9TKm9rlspAtknJBx
T5N42JCePh8f8BTp/4qNDHuNyredF9kzuC5J/dQ9bNnnj9gcC7kkWOwRYxtm
TcijVSGD2kpCjmZC9hGnTkbZ/BTJzuKSXSBJFrITCGxBwldzPubIZindlcx3
aWr6qAvVFoOMxSDgNZPsnshG+Lubh2aQPyrmcAnPohd9fnyagYTvVUzlvIC/
bNDjZDiVrP/rNjKtXR1SOuIhsmdIXZLdywMk3LpsfstXzIWM6arCcg+1JmQW
RUsM3pmd7HBCJmgQM72q8bRGdnjtAFBqEHfqVL9ncNkaMKsLeEENQmAImkDc
EPaCUb6a20UtglG/dSWrHTIRQtxyfqOv9xjlN0aB1A5uoGVx7416Bn938zAV
c0UEF3u4vdgdBV5/Uii9ZGADEuBrI6PesJFZHeqTfaMe52KvR7b19ZwT2fkh
ELvNZbkPsSZ3Fm772MsdDbUidzx/ksl9IJX5LCQlZtGcNopXNoAMXMJTHoit
EnnOCj0uVzd1Z04N56QbSZ/S1GlOmxXievAsy3w3l3kplfm+ec9Q1adyP0Jl
XRlF5R5Jr7k62TuK0cbVIkZzLejeN68ZGUFVPfBNG5na1pvsGdOI7KdzVer/
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
6RC+nZbFz9nFgLa8obHCzXQ6af34Z+sWLn+nmraRVkd1Pqirk5PPp/aZ1YnC
Rx4LufEBztQZZKlOROYEps4dUp38EuCvVGTiQ1Mlcirxo2ryt8e8xK2k16cm
j399y8BmNe47SVJDQytVbp30FHv+Cbizl6nxaLBQ6XD2CLo/lbqFLr7yklyl
l6NeSo0e+qSroqZPgufjqE/eplnZTpFESDqctDDUoyZ3Sk1WlprUgRkU2r82
BZKYUCH44ka/yP0JBmXMUO+lvXF5cqcallr0llxZBfhSi+lCi1uEFjMmP8We
Z5rMZRrMH8O0OYppc6S7Ng+q2vQW75QlEDUmCLeTX4/Nmf2CS1fiU7ZKxNRM
YZX7OVOiuPnMXYl5IRhu4nP87p8qpMaWCEhNfRhyYgiDKkoc+wo3WHxrbN+5
nfIWe/5PvudnXvIBK/VtY+rbPuUpev7OvlHw7/xxRjUekWq0CIN++7A1KXP6
80QsiRMQePtZSsPnfdVkgDNN8nyjopUmXZjZndFv3ZKXAsrLglvXLd4SHBQa
+DZMbP9H0ipGNgg63DLTJtfihoxehnmXkvh3KSv3muUNM2rVKqlw0yrT6Dam
0e0hT0Hm1Kfp+Tv7x8C/j01gj3FMw1K7wSZP6jDIteK47IJcdyqXafalenmz
64wc1uQPl9u/6hcU1+1hftLlVWvtahSKxuH2daZdHv9W0k8QYSooI6G8EFIw
XbnHr/FuixoNnt63NrXYY56OThFxyPFXAw6v+JhsnN49s+uSpAbkVH0pRHhL
P9LJUTKNii0WNbpDaHTntKeZpplW85g2j08Smh3PNDuWaXa04lDNmmVbcF5/
H3kyH+Je9zL2xo0TX5ravd6D0PV1F4z/wB82tqsYlNb7cVcte6V2MSi1jzOl
DtSVKjLLnUKpdJESKZVf69dFRS0+UL+x4zo9R0UQ1C/mIYhIDHBwT0UkXkvv
wK2eyQT3sZJ1nzJ0P+quX1/yk7HG/AQDITv97pr+NO3Pdw4wvZ6YwvQ8mT0m
2ui5HAInB7Hw7E6PQTem34A3XTD2wyqwp/fvYWunSsGx3R+rW7z8o9c9qzpQ
U3VvZ6oe4FHV80nVVbQ79lydUL8Fo9o8rtEFqF/0oeg7Ub+oI9TXtS1duYzQ
f7Gd7VrqF+znH7WtvljlLJ4C3QzhY3eEPA1Zin53z3ia9H7nANPryalMzyHu
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
988jB+qk3JblJXfDKOqgcHjSrI4xs8K1nIxrx0wrQphXuGJei7yE69NswvXR
9xeui5zvWlozmMwcX9inLljAHunjm8G5NYFQFNkXCpd1hVML28KJeV/CsZmN
4WhIA57zjdJzvpx+kiGo0mh10BsP6HsWC9V7UWD1lKVNZbjbVHtnNsUTQ5U4
ylbsKkraVRU0K57uDa+/O3lMwfiONejwkcocEnEkzMpAHGlmxdV6fBEzq6Xc
rC6tfB7OhteE68di4Zcr6+GXr5Phl0txcCh5KAXsBkrAS83PW1anmdUC7oNx
1ySzYus5Gd+e++LiCNo1ybzOLlXirTBTvDXbIt5yEsybzGu/dTZ4Z1srWNbu
D7C4sQuWNXHB6r514Hx8MJxbOxiKVgZAYXg3OLWoHZyc/xUcn9WEssHDE+rC
wdFvMPN6kWWDT8Hefo/Cnl7VIaWN/8iojo/5u+1bctyXfK6lTyYnRwm72jkz
OZ5GVrIwuXA0uQq0j+EWloJGR1E97WqukQ1Tlw8lMsorZamQUei30AJwMznB
NF3ILK94xfNweeULULLmBTiZ3At+Kd0Bv5RshV+ubmQWmAJp81r4wCc8bWl5
dmmh2fJwLWh5BYtrQkFCB+6vi6PYI1KxwGX/1yP+2EE1IfwzF0R87oLoAe/A
pZRJcD5hFJyLHgpFUf2gcHl3OLW4A5wMbcHSyc+YBX5EfMQh5CNGvMTSSclH
/B42tq84Mr77Y3zymV/Y1ODeLTfO6aLNZWQfPz2wtFPaqMF96KtneE6J+aQY
jyRrJ/jAVha9WNrWmRF2ttr3TmKYFo5EucgpD+KWl0LGmKAZI0VvrtFBocPq
eWVGrcgtDJyOMkNA5Z9ZVhPOM2P8Ooob43cxL0IBGuS3e5hRZjGjzGBGmQ7r
Q1uXezp51GyMi5kxMm+PHv9UQkf45cIa8vK6UUYogd0SJbBbYArslJThZDmm
DMIo4wKfJ2OM+sIFsYHvw9fps+BS6mS4kDgGimOC4Oyq/nBmRU/2PjrCSUxD
ieP4mHMclIa+DPuHPMs5DpaGbu0kS7aN+ORMfl8uc79d5V6IVorPNSiIbMf3
RX+aklhVGT63ztY02zgzzU5uppnDTfMMM83iXMGbHfS3ME0/+jj2o/WRwdD/
84eoEwN51yUK7xqr8K7oTc30GQZcaApkmhHcNK+tfRFuxL4ItxJegsLUPvDL
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
ogZVv0+1cGRPUjXrUdIy9xHSPKc/OTj7PtI0425yYFpf0jhZePE+1Iv3IBte
8da1kdiA4X5WMNwLtJo6bqHXUEHLo2+52FbOTmOECtqJGnaaagerkv8FTlWF
Brf2Yu7EQb/zJZS+R0LpcgLNCUqvFPq91hSln8yIwC1Zygk0B06Q8ybTOg9T
/d5bfpj+/7lh06MuwWSYtA0OurDshBJz55WcYvcqvjAMaFAOiStwHnMn2Im5
3RjCAFu/SqrOyrYtaeOWLM9QuegMZf93bGE63V5dmunwnnSsPhO0Gy4XMbeZ
itvqIx+nzbTp1Z059WzFqYcXbp7N2jv+JtpXnDn1MjecepIbTj3CDafOOk7P
bn+eVE+9WQHlu97pQw6G/5ocCh9EWuf/krSE/oKq+0PkYPADpGmmcOq3Mac+
4Xqy5TVfk7YST1H5HzXOG/J4QtGhtJavlMuhpFbHjk4+wcrmTOEr2DHKilOX
UXueNtFmidq361D7JhPUvlpB7SezInE6yjvjMqkzP0DepQqfld9GTpz+D4Zc
dUpdWXuM7Gs4Tj6zOXgoKaWID/h8nKzflKUpfhXril/6uYh2wvJYrvCuwnKz
zSKjZ+yTW1baSytbYUbhW/YUvj/7CUXqW1Sl72AJNappnZkwBKU+E1QfLorg
hfIne/2rdF+Z2jDpWO5iMEs5GxyvQNHMhbsX1Zyf293PUtz9/24YT04m/U4B
7OB/i2c8TlqXPEuOLBlK2hb/hhxe9CQ5tOBXpHXeY8zdhzxIDs7i7n4quPtb
SOIb/l0A7H5WgN0LFN4xV1F5qKZjl8yhcjx1GU9M76wz8fcV3N+Xqg3t7uD5
RiOe19S+LfD8qewoMnJChiFoXRZfocG0Mp6ngSspqWghJ0+b43nDUVcfmxXL
jJMEi3Sn1IkJivLpGl0K2FfIAbv1LpKCMpaRa2k7j11oXdZ71dF7M72HrwHQ
U2C/hwL8rH+53r8ob/+W/H4k+P3jn7TmmbStOtkzCkO+u9nv/+8D00gZDcJL
OIzPCbyJVM59ihyN+yP5OPZl0r7sRXIk6hnSFvk0ORzxFPf7j6t+f/b91O/f
Q4P627F1xW0Y723i3heiuu8V6i6597L3VH2H+juYh6+P1bK6O3bRNHC3v5+7
/RrJ7as4X3X7BWqyzinO525fwflbLXF+Z84yMil0n6YZG2LZscEHyKxFFU5x
fn7xQfr/Z8bhJi5GArPamvFIWaW2xuP4HCmOt+5UtR/HW+06mQLPPl+N4w+1
f9bXU5X3Y2qOKotuHtR80NVzmT6o9b6qty8R3l4urfnY3mrixv5QScd99LNb
mHsfwnpiMvioMld7Tyzd+26P3ft/1M4gVdPvUOpkaaNuYTPwYf59/DA8lubo
ilfIxzG/I+3Rz1H3PoS594XcvYcNUNz73on3kM1/0Ki2BN17O4Pu1m58nuLG
ZdUG1AEfudSxn7XWnD1IvkM1b2TNcuje9ykNsX/tqDJB9sXWyP6gQPZp5si+
1hzZd+bFkinz9xvRLQ9ntcj+v8yRff1x9/djiIEIsFXapOBWokH2FzUTzzUN
qxabRN0K5S2HPRjGpW5KTMz0SL19GHpXvTlVq3O5oHTnMkHBUckZsPeFH4O6
k8pi4eBlVXfesAovM7zd0Oiheo0G1E4991bhudWmVcOGE2eeO8+J595i6bn/
p20xObf7PaU0Bq60YuFL5NhGNoMThmYfXzcCj7Q4tup16rn/QD5ezj33UvDc
v9V57kdJyeT72bauLPTOEiCn98BH+ytbvE0SbTzTtlCTaZMRecUoVZUBVID2
XzpejxV5ptLNpp7bPENXqs3QuVtHVxD7NlPEDntDp4fXqd7LosxkitjPSYi9
XEXspmNET1qX2MyOthQlNtxC5iRY324RrANi9zhYpyo9fm7T2rfHZt1k31s/
KAB65xYekAtvnQsqdq4YdTpX6DUD7V4Mv4Myg1JDvc1thXa33c0sEFfHJzJ3
/aTirrVtMlbuusKJu0516q7/pz2GHIwdqiDuvI/uIPuj32ATvmDOLszYhfm6
MBB//UjmrlcLd/17nbsejO66lbrrsukPAwK3h7j9FMStS6h5gTI7wjReWahz
zft8M+nhavL9+Tau1q1crQ9ytW7U5eFqNHk4IyDXVc+bzarn+s5VLSA/U7iK
zIqoc+mxXAHyQ2aAXDmjw3hirVWzm1xYMw/Ev7LcGWo3EF+48qRha8mMiLaW
sSE1w94cnewHqmkzs871uf/3nSlcl7dw5M28sxN99gEcDnicY/JUr59DpVmj
29P6A8Got14EOn20eMdK11tMzKY6uOmtLzcvJ9Uz71UAdv64u0hHSjBuQYTd
xTASBGb2wXxdmK1r7a1fot76BdVbL/o1KZ/1GBbAnfaSukiT+WqdMtNk+jOq
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
OR/Zlwq8PdJx67CYCb+i7jRdcqcNTLKOc3faLrvTTEt3eiQ9EjGzuhdzoqbq
3ZAQRD4rXYejhbTYPJod0wHuNNPMnQZp3OmJDVJ/PLjTlcKdvqS6U6XNhhXS
WsMec1FIM+90/+sZvTt1kW3j1fQLB/PI9t1HNfs3zBrQzHZcreTZNu2+SSPW
nmOBtWcvqpSx9trS8laGSQNAwYJC50filpWWtvPk1Cd/a2lqPTcsPbMCOl+8
VL0CSIsukCsKfJ3E4fDPpX/98NX/xezsbFJVkpvUVF1ANYo6wksU6l7upBp4
TtJDVEEVA3tp1LKhu9QSml1AHYVqolrab21HPewFeoguUvGJ2+j/Cazv3bGQ
+sQ/Rm9fPpn5RCptYO/xiExTn7jH1Ccez4nFCFe/x6Nwcn/SuXejpsUdB/zh
kZUUCBeZ+cQwxSee2TmdnEmWdqqAT9wYqPWJq97gpa7fW/e2OCl1NSilLrVn
HdJdrnvWZWCrprsutBSSHVnHDD0ehr0XFgfjWQFbeYKQK2Cbkl4HwHZteWUr
h5CBMSvWnU5JLYBbfopGoIa9JBJXXD3g65dEwepn1ToKPy+UBx07UNi+r4xe
lUWTTh3eD8Em1Tlv0DmehmahZ7crn9p+olc+UDgNUrWvfL6gcvCCUeVIpm3g
DpdTV7gVLvia3V5A3eGTp2uyt5FvjtczAZPc4V9ld9iaY3CHJwvisTlMrgmX
LxlGvmpI53WqXWwkAIwDqBauk7vDYjVVZXSHwcwdpkyV3CF0qo7mxad3peln
Ul/JMpO+kvm/Mik+3a0Wn0Tqaby2D92t1JM0nPjL1mKSmt3BZv7o+rHNxnjp
a83ykfGi4xQ3fVnM+8HzpBGUHtWD0pStSZlc9G+SRX+GJ5riA5oigrRJp1r3
e7XvryqlAO5U+wFQF+nqdJh5Kle9Wp4pi7IDC7yVQ0nWVCa5buG2VJweoC49
UC/AYSVQh7VdcljzwWHRIG4G6dhfaHRYHbLDytM4rNrIP2gKqm1pkeTr5lz2
Pn3WBh3WVhOHFat1WFmyw4K2renkdLJ+a2WgyWZp3psRo+/NeFLqzbCuz7jX
oW2difnqcAnZnXfcYrMg71R2Nh/LBDouNxm5oZziagEdP5heNWzwC8GOUE+U
IkB0Iw368TKvWF45l9RUX0OqK0rp/9XebnqSbmxklJTDT96eqHqTkp0+niG5
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
xOcUiFEkbiwZdGsL99sIx4Paq3aJ9UaJlEq5vTVv1Kw5Rem70/kSZbWpzibq
YK8Hb9vz5V40k6RsWknCQqZ7olisKOOr5/8gkdWOVfZa8JNK2ImUYnV+Qouo
usEy1iwN98iA8jpCX7aEZIVI8do1CAJRPupsug9bA2VWsKfClcjeoAoXM+La
+EMRrC0SFZR2jWS2iq6vhWVve7K1HEWhWZe4GoDRbAj1ICGt6mZbrDcTbfqW
cMjGwUWxU7iWKGGeLISlIP1I2JxZw/dlxnKjmyCyOkrSgRdblkXMnZK9Ncrr
2bO1Gxze9MtI+q45uAwvdTEt4XNmeiKseP6vow+EO0/zhFdfCdPQBS6BJIUw
BSxVvyZE6IwwrOG7EiLoz2LUJS0JpoIb7Al92JJugkhWyYPTf5RxW4S2U6IE
D+LnbdI4cr6acYYdLyA3HamjytNiYFmwymTh3T3jGMuC+N6fvGnxntjIOYI4
+euWiwyCr+Qu4+GvU5EKc3TfnxZFAaHNUHJxeMm61MzSR8Fcx5KVP2rTe6Ww
n4h6cJjUGMIDpT5UcmdI5j5BWDd4drJs4SyBG2EJnsolzxlCemMyr5HwP4+p
DyYMR5kMMruBS2iMXxri4JYFwBEYT0/wHCN7b32+MVDK+YslwAKorEWGZGwO
5wEp/cvTX4sIwzyjZ9KP1QVF+tmDG7KfsBJYEacLyEZM0pr50CzDI0tvKCbg
83uwEmGnROXYobaBwD32SX/Cq5HX8wWLH/cVFmILKzUov9bmKpg8+iyXsvDw
zLyGJsRTpGl4JozzJoVEzJ/lqLL3BwvZPYVqHqwZv5ny78/8+zP//sy/P/P/
vc9gktdL7VnweUnKlqu+wVsYbVYwh1fuqkSHGSu/4a9gX5ZyBwvfCTwKv9zs
ww0SJkgyFuh9l0vgEf6hRcef8Z438Us0v5Bn1ybKv9Cf/ULZJUA9AJsj8bcs
6xL9eEOB0kyA9/DVT/ZvAg7An+YfuZuTyPBo4nOiiI1VT1aX8xW/R/xe/Ls+
JrTlzlReg8MLP+0tGB6m9oxqmSoeW/wu+NdL+/vwux4qAXzkIvxk0Wwa3XXS
8me7eebMmfBtoMRm45qlTyhirTBFpbC/hlL0n+a3s8/7ivbplyzYpCVPb/We
tq9Efog3ZeJFdRtt7hk/frwC9Cxpo+oZ+479QX0roTMqib+DcsmpJNoTR7lF
pT7Kn3B4y+GhkGDBM6S59AsED3iFqjuIprVibElinepD+ClLYK0msBBh4tRf
yRsc9PQS33O4q/+RJZWuY/dEG7fMQqF+yGrps0pxvvsI9Lj85zmBVhgIxLpz
vAN5xKk6i5+NOteze+KvyQawVBZm1SB0n6YJOyH9UV8hDkMNtJFsgvLLu88K
8SUJKcFfcpP6FxUrpD6EX3dShL9PlNpLJZ8jKCL5Fx9Z3eCZ2F8LEAoPHxEG
Ab4Wpsrw97rg4/zlNQisAj9g+ymY6L4kuTHHDVoSJyl/s7vIyaywsnZvha+o
b2Z4i0mT94OyTPlb/SozzOWlfSZm2tirbJHhM6wr2QfeKv+KG9Tl+4JLgG9/
Prtk9lzsEz4P8gXBBf6HO35Yq7gNGMtrLiyqx+MTJ06U/wRweiJ/21zNrhpf
K9r5OPu7AfLfhRtP0D8IX68Q22/U3wi3o+BxZFoKhCpU6mGdE5zcjU7wfuWr
X7BPjDL8Ub6qx6WWO0UJpFWJlrzuXdUAfI+/MOhP8xwV3LyeN0oJ8fA1mNef
D4yqCzQzRw+we4JSjH7sVRMe0H8Y3nCnmiSpnWdUbFDziL3GjBmj/PQ+k3uS
XCtS2J/9/mGUUiu4AMM1YMKECbz9Fn8m7sPXaIBsRk7/N0fF//7Mvz/z/9vP
EPjJDHjx+3/Jiv/9mX9/5t+f+fdn/sWf4eX5Fz/55JM5iYmsYabA3q9g1Umf
qLNnz5Jz584BJExdsmSJzd/CerD8GuhvaP/09HH4TWtyUjeJ35Zv77eV4WuA
+G2DruS+AL8RJsDLv9Vm32opvvaUfusrg65kDsbffKUmaNCVhpCgbStn/9fS
JUsa1q5da7O3twRfe+t++9Ckz080Jn1+qmnQleKR9K+Mg78CLQ7wVy5s3bo1
x95f2Yuv18mUgb8y6HLq4KTzHfXw19i94uFmf81m53URvvqDeMFfpL+9Sf6L
QZ83wxkM9CeOgKAvm1PUv1xu+Ms2+91ZHT0A/jL8/qAvWzP0fxnuewV9fiDR
0QPf8nnzLkZ0ILS6gG+2bUu8snjxYkeWvRUwBejhZAXb2J+lC/AadDn5IUdP
+Fq3FE6LGpQskFtYSqa9leQbVpJlsZJtDh/TlShcaQ+ePjVp8bwZgigZ9lbC
FM5Pu5LMV/hKBnpRkezwGvC3nQN8DcugwpEpCUcNnIAe0b4hYQ0sw+ZOm1zL
ZbwABMFlOHxgHf0v7x4A/9Pl8DX1gjXRNxyT1vQ6XdNosaaS+NglwCi0p2n2
FpajLgy003xh3rCgO/6S8ei9f9rxCxSdAX5safAlvAUupOmVXOulpdpbGtN8
P8lwvG5cmi8sCZYGF6Nb6gBHD1gXe0OAybLmycvaZW9VeyxXNVRdlR/IFuXk
E8BNlaOpA3qaLgztLFhzxVfAwmxuI2XG4nrDwi5nDgWdgr8J9lasjNLtCcFS
WCHSrZdxea+YLQ9cmc19ysyC9LBanlB9SqjfOLxggV50dU86fGB9sDZxMdbC
V2KdlzMHS1bUsM4Ue+tk9iXA1Tq9gdmosYNgsbBWoCLcHgAWbUCA8yWGyEu0
uUl/t7pE5qdxiS+YLtEbqegtZBG5fD2+9gQrDOszs/3CDwKq2G5vdWmM0aqp
a8tiBsu4QtSTwQ5cI8gjUNNxo7o61RDLXrpG46VtDqlItVpdrnF1Prg6PxBJ
wWPO5ydAi24yW2imfqERYqE2B6MwsxRgvtDcoUnnT9QD8/zR6MCSHN5AQrE4
x82Wq9MYaLG6RHurY7ZJ9WcXcXWvCDJyt0GXgEaR6QrjtaAmLNbBdNxb8B6X
bE5Wg2cReMDm+KAdhoXnDLpKSXJVWrgXfKVbvZdKZx9uOhVhgJ8NvMXesrfY
W3aK5bLR83D8AIIBa2dX6lCmXr5AclizkA9UM/2iuSWQFl3MFn1FXbTN8Vu8
oVYxpVep9VMX/YKgde5QS4Iz0RC0dqguQYjLQLhuFb4rdaARi6hPIaAbFo1s
DmVmNrCHxaMMRefKAhl8DvNHYj7DW9gS5upQrmDpN8BT+CugFL2G9Azl+Awy
cLE5AZHvB9E+Qi4+AkV9aUysRMSQO1R6Cl/5KYT+OnwZM+B7wQi4esJj9NE8
Rqr+MTT4K8HeYzAz2lt6jOGmjwGcuYqPon8cH/3jcPPJn0TWd3gMePoBN5s/
kAI45Adab++BmOUNcMUXL7gBjf/qMzmseESf52nJvgqFUZ7uTvQQoDCDFYWB
H2kgSs28NVkqGHWss/dUW02farj+qXxMnkoyCaAOQ+nKn+VPNEQgBWaIYdGg
/AP9VegdwJ4k0/RJAGyttfcgzOb1EAmFoIvtebqHyRAPA7ti3OKRMMjMqMGz
4KMALhvYB8Wvp4DsDJxlSjmCmpA1WTuVp1lj72k2qU9D9E9DuQ/pEgwD4Wn8
8Gl85KeBS2bPvX/KBJY8J11Pcg/zG8YeMAcDb1afSQ3xAYvkDpefCbAIPFO8
vWdiptxP+0zlyjOBWBwH7Xnd3zl70C6AkMEFAodSBXcH3uH6AWAMugBTq+09
wAarByhWHwCXLSzd6w7pUYY0xj0RXLrkIfYoYMYynhV8QWj9nAYZDnY84PJh
0NWIh1ll72ESDA9TSB9mNHpLihDxYfBZkCVMxnxfyFs06Pj0124iF3c+HFa2
9MEh++IeZ3YAuJI5VKg/yNUjlsvXeHux/JX2lr/elBejGS/48n2U5TOF74nL
D3nrJrJo5M3k2z0DyHdZj8JjDD629Sl4iP6X856+4y+Fz3FuwNMojqa/yeOY
OH6AYPA4cfYeh1ltP0iVMzNM+as+zutCN4qHq8/kjc90XXDsmH4k5M0bSVTg
rSTivVvIt9mPk5+Kf0m+2/OL442x/X5xaOsT4rlA3OChgD2Pau1X0vmORqvn
ATC2wt7zMOMtuRX1eSBC4iyDczzLh4N6IDjAC/Zm8SdkrrQPPuGsN24k0R/c
SpaNvpVEjqJPmTOQ/LR3kHjS0x3r7x+8PfhhplCFz6G1flqHFR5RvY8/f1ZN
NkLJ58bae9g1Th72ovKwefCwI+Fhy4ezBy4ejlZ7OA2l6NMOPrv1eXzU0OE3
4aPG0Edd/uGtZGkgfdzcJ8hPJU8qj/xT0WPtnRsfHPLBy7fB4wqmPub0CWvU
J8TWKN6kI++xFWNY9QO24SZ8L3qhTXoj/QOl5iD4DHQzQc8VNsoNtUdS5lp6
6Eg6Uk9SILMD6WopSY6bKGFfDoscdTdZSLVeEDaWEnbFR7fi99/mPUV+Kn1K
IvCvKIEfP356y4Oh2fPuFVHa4xrwAsTVgpeSlbFLgLgAwx7hzyQ3cDHS9hQD
x0Trq/OR1gE3hISEiF4xuZUUqA0fkXa6iLfBb7RJ79UGEQ5S6K3qa543EtyH
/QjEmIky+gnHzZaEjqOEXjn2Nvz+2/zfkJ/KfksJPpgS/NcqwYsfJ59s7T8r
K6wfqu5NLAiD51EUuK81B9C3l6xcrqD7h004wJsrxdxo0eHG243lcdKsE87b
kovae0PsEXuVKbHBXoyEhIEgNpB5NDMad8hGA4gNpEZHvEgm9Rgg9W1I6tXj
bkPSf5s/hPxUPkRH8icUklMPGLk7pN+Qfcsex4yenuR3GEmugVMyyR8yIQ1v
gQdJfYGLZz+1pU+zRUMmObxfbO7tDpIzd9xDLTd2HtKRPY/h6fY8wNNUyO/S
C/ngs9tVki/TkXwVJ/ma8bfh998WPEN+qniWkn4oJf3TWtLvHcjcVtaj4fnz
H6Ckf9Rxgwnp72QeGooBLPIzUv9saOhsQf3+ltRXRv1K05p99dOaVRb4qL8H
e8ZF06fjGXs0Z5BBhmjFMs0R0wSoMn4nEHpo3drnEKFFUacHRAYHKBM5nhJ4
zYTbyLqJt+P33xY+R36qfF5HbGpiSsCeS8SmGKEh7j4g9vUmtL7LgO7SBK2T
FodOptdUOZp70ITWrJu0h+aegzUXy8ZZpTPfX/ISd5GekDjWlMTUVRarJEbE
ESRACUQk9PVuIPkLecueMhB7hY7YazmxEybdTuKphH9b9CIl+O/o9QIl+nNa
omucqALMXt425YHrTIh+tyXRlQiBEj1BEP0BS6KbDfb0EfcEJOlh8labVmS5
ntzHKLlrtOQGYQ5CmnMQSKnNLMo9wbETHjgeivRmQFbQeyXQe5yg9+0KvTcG
3U6F/XbybfFL5Keql+kl051amLIhJnQH8PIY0P3V+HH3OvqYEP4eV4Qv1xD+
fhPKMcuC4zgWcckW44vFPgzN/GLZuAOM0b9ZbKzB72yClxgDW0oZW9DQjBax
oIEt6GAd91K2PKSJL6zYsl6wZfLtZPOUvmQt/f7bvb8nP1X/gV6/5+x5Ucse
xe8asCU1/v0cvS3ZA2m/oa5YJFIxoh/ejEfLOQ6Hb8RgYrHDQMb2TGWkg1bE
dHgRCIC3tmmg+IBFHWuCvNDsA198TfjCUOb9Gr7EyHzhzlbDlyCVL1un9iXl
y2mQVPs6+anmVYk/L3H+PM/4Y8BFGihK+XMfZjYHO3xfqlvziuAPXEgvdNCY
+jTVJU1sKdIc95rwiRNOgz/VDbav2KN4NPs4axQ5e4rbKLT/gG4YyjlW6I90
f1Sm++Czu4aFRY6+3zROWikBHKQ51YMNOponTutLKmIp/fa9SWn/BqN9jQnt
FV+tx6QDJUx6N/hqX4SfTFZHZUS9rdAe0smD++hp35rGS9CU9uVKN4SgfT8T
2vO9wmKeD+EoSd3+bZP8UfjKA9ezpwZdbZghkb9QdRsNQQ7Gg18IHljSX8b0
QP91Ev03SfRPovTfNuMOUrliEPn7/uEqH2pfo3z4I+XDKxZ8EJjJAFD3HFiB
mIlXhX1fLY97XTjUdUvnjEFaIniF4AGqN5lDHT2kMhtXBA0zIoEZjnuAUDwF
IYNRsR1f3ujkeNkeF9hWo14uuFDK7jcEwc8ENygX3kmf8/YdppGVDPPBSZty
YTrjQvLMO0hV3BPk73XvOOHGyxKYchvBYoWCeo3w1fNHK9uxIIM/GKLmoT1U
LqidnBouhIg0pWOBPcIuwdcAlbA1poSl9r0hBF6C/JCqj1GqjnIdPElQk1G1
L9kCVJ3GqLqdU3XHrDtI9conyd/rR1LqjqDUfZtS9y16DeM2X6KuATI5harP
54Q9JLpdND7ZW6Hu9VbUVftilTTbfHvUjTRQN0SibrGgrjdQF7ykJL0M3/yS
xk/DKaS/WaGzs/hJQEykM7ffgs4pnM67ZlNar/o1+XvDKC2998v0flWHgV4w
wUDWENVPsR83AW2xPcJNAs+zR+DFpgSeAbSTCeyrEDiI0z/IwXD9wJd3zH8R
CexuzIQEnuKEwMF3kLSQO0nN6qcokQNtEPolLdgstwSbFMw8iGBGpXFPGzQO
s0fjCHz1V9MsgsY1QfRPnQK6g62lBB4sSzCQF4kbisS1h8QFcbcJ4lLC7pyt
Ejd9zp2kNn4w+Xvjh/T6gBL5fUrk9yiR30X7/JNsn61QS/mzTjNpDDE+wHA7
EvkGJHJPEyLzVqOGGSUrYyNEzniuPTovZG+QoHUF0NoLiO3wFqRGQgfg628E
qSmwfoQBaz2Z3QDWgsxgiFUy34lk3k3JnDH3TrJvzW/I3w98ZElu++BEnz3T
JC6xIHwjUPx2RvGk8ycanVFcpMzm2KN4OL721FOcSW/NDInkEdC8zKj+WxDy
4NhJjzgNZdZIFDeD1QJQCIqn6iieFXoX2b/2t+TvTeMY5Q/oKF8vKP+2B0Dk
1zog8mheaeS9mDJGZ3gPozqF37t403waUh0bryC2qJlREq9SPcQe1RlCCXBF
dbDWEYzkT4cu+ehRsvBd96MYK/y2w4TcmUDusLtI9ry7SN26IeTvBydSso+n
JB9LrzGU7KPNDbmCUF5zglD0+E+LUBj+exwB3v2sI+IKkv5LTvqLlPRXFdKP
BCKtyUlNEKQPtkd6Bl+kxMqJChBsTvoQL6C7D9AdfeU8ID4ywAdfhz5fsPIt
MuO1G7EsbRnMOIHR203YAKZ8N2VBZqjKhpz5lBXrh5K/Nwep7GhywQ4zv+p2
jk3Kbc542FthR4CBHRkSO1AT1uSoibXZ9tgxT68Jgh0Y3YQAN6jHPeIHHPFD
Fjzz8o5Fr5KIkbc4jWLcwduAA1NDtOTfw8mfS8mft+AuUp/wDPl7yxSVDQfH
qwYJXEGDMEgewBvnOPLlbcEPO9AO9WZdhNTyIx/kRsPXrfgwyx4fwiz5EAJf
Cyvlb6IZDLo/i2xZPOqWrkHzYJUlGRYsKQi/mzQkPEv+3jqdsmYqZc1kypZJ
9JqgZU23giIN8gyuj33odoUzfsAZ7Iei7LloYM9wbrU07Jlpjz2h+CpSMJ3s
QAM9e07VQiMYIqMIBvefQ6Ysff8Wt6H8NpkhOrTJGHIXMiSHMyR/wd3IkKyw
O8l3dZQZrTO1jGnWMUbvxD2CT5ZoNbQi6kEICWTO9FA4k2HkTDH6k6BtsTPF
lpMZ9jjDEa4afjVHODBV4PDVcobNLGfccXi/nLpk2B83h76I72TvfyE8euyj
iKI8Cwvu1DAqS88oyqSChXeTokV3U22izKqnTDo0m15WDDNx//XC37iDulwl
4zjendsPWtUcPbVM6wVMYy1uENEdx820Oq6BBog8qGO6PbYxmBygUygwaPNk
tnmLgxMaojgExqPC4HVYzLSXT0977ZbTNTEPhBdGDmRMfDFv4Xt3OWWgVcBh
Bn+RgdzsAQMLOQP3RtyN979roMw7HMIZOYsycgZl5DStx3IHOHiE4zTwOb0h
7n5gJGY6egEf/RU+wgtvJfW3YCLLn06zx8QQje514jEbwIZ5Dm/KxCrBRHGG
LjszgHMRsbXj1fDIMQOOR4y8nYRTaH0x9XFycdej0SlzfzGkedsHyMr4LkQx
Mqy2YmPJ4nvw/neNlIVtcyk759AruGvsdBsHWiYOj7euvn9IYxyF5UIjewMn
b7TkJOT7G0IUTk61x0kG4v1lTnL/FpH0+ZkjcI8d+Od4U9ZFuICDZMGImxF3
7Ay5jz7Vb1A4v8t+LK886qHS0Hf62g6M0gUHQ40cLOAcLOYcLKUcLIu8h96/
i1w5QLl3ZB7lZKiRk62Ck27ilS5DyV9SaX4kPSO0H9UAjWHt64KNSp7M5oAN
Bv59jTAFFBOZ6C0ddCQOsn5TKObgsznTkZ2A7iGVAIg+NfRB5kjg8agD+S77
ccqqOzXsdIrwg50jfCt2Viy5B+9fOUBZ2b5AZWvbHNXm6tFOt8JQywTonupl
D1LaCW72M+fmcMbNGpWbk+1xk2FUP3X7yYlamaPIUDwKKgDZOHxI844p0SHv
PISAE9gHthPYlD7vYfZoIK3U5nyX+wTFMXfYCtCcRQNFnH0lwD7KunLKuoql
95DKqHvw/pWmeeQfHy8k/1DYGMZtbYgLDOQq82QGWt0pDA9KP7DqYdxB0Rz3
xMs7gn8BuDD3hf7WnByt4WSQPU7OUDlJtJyMUDipnsam6idznO8OaU6fGR3y
7iNKJAGMBUwDjMtY8CiTYQR+z5OLGYNRb12Fee5EFeAki7mTlBlbRRlbHd0P
GX7l4ALK3Ah6LaIMDqcMnk8vMwZzZ9qsc6aWIHeEC5D7ognIRQZT5v4CGBs9
YUgfMnnQ/wrN+OiWwWe3DsFAZADbPiO2O+GWGi/ROM/ieLFbdJI9Lk8347Jw
ls2xyGU8G5CZ3ZHA1tNzht+KdR9gKyRPIDcObAOc07zpGf74r6FcX8wair1b
ZsGivjThKgYxZ2s/ZGvtsn7UDFPWNlOdPbqEXost2NsNWMkK+ppnjimieOT0
O496kY8ed5CFz/iQqg98o9e8eSNl9+DHGGelQDOLc9ZXzRkvV3LGjgn22MvB
scxeRLt4tFxzPHAXXSw7iXa0rMhwMW6/zbgN2UrIy4AFBhwEXASF/rpwOFo3
dFAUc1zMfgFTBc4iTncDlhLuWIHblZzbNZzb+2P6kTJ6/0oLVeRjUUauyw7Y
ElfJKbruQ8hrR99GxlJuTxroIIuf9yf14/uQqtF+eZuH9fCE6+PtcZ2fTWBU
6uZY+vV+HuM0BChHMjoCX96x7P3T899hFRngNKDfjZzT4FtBTwEBf108kvk1
oAylysXc36O/dhmauhHTOON03fJ7Ud+vtESSf3QsYxw/JjhOJaB9oQnkCvYc
ctlA0gljbkdOTxlE9fv5nqRx8i2kfsJ1lOP+p9OGe7vkOItqNRwfZ4/j/LAO
leOQPWrWc/wAHv6HbHd8CLo+LCb4tdMLRjCurxJcn8x0F7gJXATuAXe/LhnN
dAT0g1KpdcszaNUtC0Q24qAKzvVqzvV9EtcbYu9FVHaldSn5x/HlEvfp90cj
uSPvAlJzpzprCrifI5vH9kWuT3/CQSJ+14c0zbibNE65lXL/elL1YcDp9Ld9
Xl03aYDDDfaLTC+yf6w99jOQHsC2TUIMpZ6TSdmusN9LOatTnHiawM4vdowJ
jxw7ECUhlucSwYJv4pKQwiUBchPASeD212XjmPVEOPQhyV860GmNyu0QimNw
8Ok1VAr2USnYv7wfqadS0LDiXtIYdy/9GZWGQ9FUGlZwiYih0hCtkwhX0E4v
EXpoZx+7H4gbQKZSaZj1ayYRJUH3UYm4h0rEbaR+4g2kbmyP0+nv+AyLGd2f
CYScYM5SA+piQ2XmI3vywKC+lKlU5CFelYczB/CwVOb6x4IAKCkRwOLrJ7JA
C3A4GHVQa2AkMBAYV7h8KDOw4E7RqE4gBVFPuBWE5euDsMV3m2L1WhMBOEAF
oGnlvfizK4co40+spBcIQiwThA4hCN0MAt3E+AB4QQhCnnLg/2XTHibNc/qT
pplUEKbeThom3UgFoSfJfccnPPn9m/uAIOAxDLcq8wteB3EQYgFmYiSaCehO
DpKlwjHGnliw2KCHhVg0CLHAM6Z9TGwFO3d6AopKOBWVFZKoADYAUdnBRQWQ
HbAaWAy6vTfuWWadgfSgf5TchdFPWVbvNGGdU/yvFZU6E1FpXnUfObLzLfKP
U2vIP06upuKyil5xOpGxiSC7KW64uOc5Gu45SOhvqM140kEqZv2StM57jIrM
Q6RpVj9ygHrYhkk3kbpxvUjRSJ/wje/eDHjC0Yt5lGePbxvWGDJzEn6HEhSA
W8bFRnkryfnQnuRMNDMoeMUnfX72WPun506D5HiJU+g7kpWjodHpMMkJovFE
SHTIe4+QJVK2B2IIkJ5tXHpAEgA3gJcArgO3gculq55HzqAiA7qjnCj8f5j7
DugormzbXpIA28PMvIkPT3S2x2Es22MbcMQ4YIIJJucgco4i5ygEIggkFFHO
OaMslLNQQCIjJIKxAc/Dnue/xpx/z723qm9VV3V3CXn+n7VKIHUbxOjse/be
J9ztb+mrR4MsU4yeAh49p3n0lOx7Aqr8h8O/mw7wKHIjjxBFCl5iDyuVdIgN
VkpbBazrENRb80i2Wf02yzzpy9+A8nWvQ+nql0kUPQenFz0BhfMeh3yX30Du
9N6i+hSCCCNj+67VU02/wK/9UiuI6HT2hhXz0LDHqqdporEgmqEXRHUe5PNm
DCK869wJg4gdP3Px+JGDRstJQiMe6QYGQDgPGswoKRvZDxdJZKrbAA7v9ZQk
3s1fRB2o7hKhEklVB00pCZoyNxI4ASNI4HiQ5yAJHnchePYIFMYWqV2hpDBd
dpHNwdMeOQAWkCNnbV+WrTJX94fKTf1J8LxBgucVKFn+PJxeTIJn/h9o8KCI
TRkvi1jpCFp6aN0k2iOOnz0iR09Pur9CCCEX7y3Tub1srt5NMBZC0+nHXtZC
CA8cHkSmReJJhA+JpbXhq0b/hS6TkOyrQ9y+OsFjKZjHEqYeTDn4c8cUgywE
D6KasOk8dWylP6uOzEWE+vaRY0lL5toSPFqxVKQRSxX7n4DqwJHw7+bDJJ4O
qWJqnyqmuoMWS2V9230YaAUsJgfQhv4mWP6mCbLWfwjV2wdA5eZ3oHz9P6Bs
zd+hZMULcHrJkySm/qiUySOoTO7NOBCGk5TV5IDqrQ4onthovUIOqPHGAooJ
rUfMA/EttVJiE4PKSSOmMJbM5tgUS3MMqQ3KH4wHjINEIZYw0eBZgbHQUbCN
/fyQxZJzoOPUcpoIDYnnLYJ41pBMLJZIIlPFUqX7k1BzchT8u+Uoiakj5JFi
6oBAl/Zo0KVuYNgWLrpSarVHfwrLSBxtfscEq0hyy978GdTuGQTVOz6Cyi3v
QsWGN6HM1ZnE1N9ITD2lEN85U6j4Rqn1GC2QUM/ccWz4rvE+G5fNoJ9hk8/g
39gVVeOMRRWXa4Idk2Pid8/jjevyUdXDHFaLMawG+u2a2bx65O9lv1V24eZJ
LhxLWRgWsTyk8MeftZUdHfhjxh8vpqiOot0s7eCPkfwIO3LWUGFmVYUbFGES
Nyol4VS+3xxS1QeehNqgL+HfZ4+R0PIUQstDFVpqJr7tJ2fi12IGUba97T0T
rOtngtztw6DOfTjU7v2chNZAElrvkdB6i4XWyheheOnTTLwpVHwvDC260eyT
R1ls8RzIFp7hC4Mfl2MLS3OSsjeHl1yaG2ssvCabDy0pvLhz7yGGVy+MLkca
XUuGbl8xonnNqN/bdPqQOaPeQtKDUYA/ffyp408bf8pV5CeL0dBxej/76eJP
lSSgjrwNRMc9binv19uW93qarYQfVDSy3NnfXX2QHFjkqQseTf5+L/IcZxHW
coQnRQ/O0t1VLF1NtIywdPurBddiBlMmvvN9E+z+wAQe456FhkNjod59BImw
wVC982Oo2vo+VGx8G8rWvsa1HtoDf1HYA3Ffoj3wu5/J59Ykws6n0wVDf6Yf
0UwMY2PMFZHUTGST/BhZCzq9vWhkjTEWWJP0AqvOE/1DLvOKH8HAYlpvuRxY
usYh940iuW+EgZUuBBYynDIeWHWHnqRB0FlCfohtPuyHS46OqrBZhFn9waoZ
kK4qBtqSc1JgVQqBVevBvoe6kDHw79YT5PEWAuyoEGD/b5j83bQRcGDkr2hg
7fvQBAfHvwCNx6bAmcPjoP7ASKjdNwRqdn0CVds+gIpNfaF8LZGBq17mZgL5
/2Ce2UxIHtvD9fCXvyOsqz87reQTjG0NYyvZlF8TIk9a62wZeexMG20s8piU
fEwv8rg1VUpiLoo8oTQCTStdN05/DdaMtGVa/lE2LZN58GF9IX8no0QYCJiv
6skPvunoU5B3fBT8eCEUfjx/kgShLz1lUtwHdbss1Au++sNPQX3oWPJ3+5EA
9OFBSE66lmPmIGwWqL+CpgnUv647qL9lEIYseBr2DTCB+0cmODTxJWg+4QJN
x6aSIBxPgnAU1O0bSoLwUxKEHxI52U+Wk8XLn2NyUuFF9Ny6Ywh6Ee/zNXWO
B7aunDE8fs9E9hn7+FHJkfExqxbOpJ/9VQpC8/5EOpU6EekUrjvJx2YIN3l1
9ihjkThB6wys45HYIkciHn9R+P01hWIs0nikdM60mkTlG9RKl/3RWSp/dBkT
imqHC48sPP4wSjA6MCowGppJVLYdfxoKvEfDj5ei4MeLYSQ6g0iE+EPi/sFd
jko9gYkMDqOyRojKBvJ9nDnyFDSEjYMfzwWw6MQjGo9JmofVTK87RIRGm7Jm
Kw6LzoB5z9Co9BhogiNTXoGzAQuh2Wc2NB2fTr73CdBw8EuocxsGNbs/I8KU
ROfm/lSYlqIwpWbHk8zsQGFKK/a9wr2/eEyITnoPMyZj6UjESMWvvVvvPRq3
SUUN70HLelbCEyu95ilA00hj4TneHJ4sHTfmo1DFZOzS3loshaeTRng60o+u
AwP3zYE5n/2XpgFry0sr4OGJYYLhgWHR7EnC0+tpuOjzDBT6kvC4Eg8/Xo4m
YRpODtJgSHIfal/BV61Z9yg1a7mbUmBI4VkvhCce4GfCxhN4BAph6iuE6XFL
QSKaunYLktVdEiSB85+l4Xn4YxN4TneGtuAVcDZwEbT4zoEmLxKmRydCg8do
qNv/Bde6A4ggQf+EaN01r3L/5CkoXID+ye+of5IyvhdqXSFMnfAQlTZiEL07
C5t3h/eWIrPKvsgcYSwymUaWqkvNeGCypynQHJmtJIW3RZn0w3Nt/9yIDXTw
XbZ555ptXoU1t05pzWGORWKHSqGGhMUZEhItJDTPkdC8REKz3f8ZOO0/AX5s
T4UfryaSEI0hp2kEJB8Ybg7NTbYr0Lra110ZmnUaoYlQaQwn38P5YMovWIj6
m0NUl3Daq2g2dk3R8BANWvAsHPmEhOanJjg+8w04H7EO2kJWQmvgYhKic0mI
zoDGo5NIiI4hIUo0857PBTtG0sx/g9OomakdwzRzzpRHuR3zEg3Fn2Mo9mC7
aq3Ho9ATM9xYPDJR/ZgqHn14PJay0/N8hfP9y1EYkz00QpJayaZ1QVunPWPh
FAfwcLTm7mF4IMXDUwpDoOXY03DO+2m4TMLxmv+zcOHE09CcuRN+7MiCH6+l
kbBMgm+bwyBhx1vdK5g9pHB8ioZjoxCOZ8n31Bg+kVHeC1JYBsK/z0lh6SOE
pUBBbbrP2zTcZ+M6KHjh83CMhKPXZybwdnkLLsZuhfOR66EtdBW0nlwCLX7z
oNl7JjR6TlYJ7YFEaL9nFtrUyhHq8NTKeaw5YlSvQQdm/Z0un2Zx+TNzXPJl
qBZxqWjW+cJYXDJN3kMZl00Yl6E48MBswcup5ElgscniU/PMZAG6PmjXzOdk
69mHW8/2+IR4XmFgYEBgIJzH4PQlwRnwLNw4+SwNkM4z5Ky8ngc/dp4iQZoO
nTXBlBpodeA+jOhGpntGCM4WHpythPk2RUzidEIK0iAapD/SIJWYqLfARNV2
tpZOUjPRrumkkEUvgDcJTp9B5JnTFy4l7iFBuo0E6QY4F7oaWoOWwVn/+UQn
zdIQ65IbJIl1deX/V0SsPwZRo2Q3iMXobzBGZWsxVbIUXdSNQ6ZhxoJztF5w
tvHgdMDYxA8JGIosNOXAJB8HhB5eviR1/8A3W7P38/DcGLR39nOyhW1pNP7J
wmgU/aDGoywMLpDQvEJCs4OE5s2gZ+Hr0Oco67zeRM7Nm8Xw4418EqLZ0Fkb
TsNeW/z8xQ5Jri9+8HtpVoUmvn6v8SSlEuYQDWEhqmCh1sSSLVvciFhShmgo
CU+fz03gP5g8E/8MzbF74HLSXrgYtx0uRG2Ec2FreIgu0JHyn1ApXyFLeXVb
wa+JlBf9pPedlGHaky6ml2N1mnSIWsTqUGOx+qUqVn9gyd0cq04Yq3huKk9S
Jt13DN2+YmLztE9+R7Lwc0FnvF/HiKXkc//0/za3POo4l/kq51IyjzAiMKtf
8VNG6r2I54k+ItHakgUPvqqAB7dKSMQWQmd9DDWn7JHpWrU7q5HqiYyDRSra
B0iE6w+TaG0KZjbCpUgWsWgnyBFri5SqbXaNZpi6HV3WTWFLXqSRGjjERIlo
dcRuuJp2kETsPrgYvwMuRG+Cc+GuRDctt5D39bK8/xSqRHmv2csgmE8e75se
w2j9LUZrbxvRijVBGq1DjEXrKHO0el1sraPR+gNJ5T+Q1E6jtYf5ZN1rPlnb
omicLhn6e1g9AseN/wb3o1+sv3ry5UEHNkymPTDqzkyFyUni57RoJx1iyRXj
4eKJZ+AqidPOwGfhVvBz8A2J029JnN4KfpbGXX26Gzz4uhYe3K4k8VpKiQAK
L7FB20KvS6LIgF5nccpOUylOkYjg6/eaQ5lQQz+BxmuEEK9G2Kq9rr0VEaWK
15Q1r8BJEqfBQ02UodbGuEP7qWNwNd0DLie7waX4nSReNxMRtZaIKH2dX7Pn
M6FP4k3tPglmRzX7DnHEeHWSD9dfYrg6yXuELWNWMWI92FjMMgdAmA5rKSRx
G8jjNoGxVUfnHyhbTZVP21STm3jmuq6e+mb9ilF96J7AfdP7wB16aQ3b53Dh
xLNETvVh/aIafmiB4IdqGU4YwNdJAH9FAvhO2HPwz8jn6e/P+xCgxLxMVP/z
UJO6D/7ZXkICuYoE9T5KOYyoekXdUQhgtYyiAezFJB7SFQQYHsT3mskheyWO
BHEsD+QoIZB1GG2rFqNVO/9dlV3mceRrqTOotAr7gkms+oQj0JHnB9dOHYer
GYfhSsp+uJSwCy7EbLHDDRhk6QZYNGf8QpqMwED+FcbwLzCGf2ZvDH9uLIaZ
a/CYMoabMIajXNpbKzCEyXnc5PzgchYJ5Kxe5vh1XT39TbqtbhtfGuW35K+K
afkmz2epWSr5+GqjtERllKrdqOsnVXEbQuLW7+9wP45vmkv4O+5VgOoTAwlx
yIUMcnB0Rf7LCuuQvsJq44cukheMW/weMa7vtZBD92oCN3VjuWsW9ZB0V6s2
YFyRXUubBcdJzEYON1GKeybFG64XhUBHvj9cy/Yi8XuExK87UWS7ZdvgnFXb
4HOzbbDhbf0OkCmPNkeMchq6fcZLj8ln8K/sjd9BxuKXuQuPWMZvG8ZvFf1a
5/laBxLA+eQsZmEsnsXu/YqTPUgsvw0rR/xaXoCG3UX+y55QzJjn7HyK9m5Q
01/HWTVbWSyWJSsL3YLbJH7vhj8H/0NiGePravA/hJ0h4jqCl+Fs8KcQuvGt
h3MLjmjH8jkxlsn3h44GSkf8nu+djaY2G3WAMabpuRxjByG2o5BgU8JpEGIh
pq+lucCJQSaIHmECP0KCGzMC4GZZFFw/HQqd+QFwLccb2jOPwpXUA3BZchmi
NhAJZ81lGAw1O80ug2bPCbfCgkb2cvWZ+Dsn+UzuQ12vR80L8/FyRGVYyxu0
PzMW1sPUYd1aLNFhMawdFWFNQ5v6DqmmgxjWW+ePeY3ueMawlhaJYidKwf5X
FOtq8nY/Izu0WYJDK5lgUlhrmWAsrJ+H/4l6Hs75vAhXQ/vykS9p1LufsKqK
LVGJW/tnq06D3frNU6nfWFiz45mGtR+jQBj291rJ8dyeQkI7mYd3gjm8rfLn
AIE/Gy1C2KP3VsK19LngS47ouFFM2zVnh8JXVYlwszwabhSHQWdBIAnvE9Ce
5QlXqN4z6lB8wB0KVceLbKL9jJloE39HBd5fzJFtvvbTMrJpd96nxiJ7qMWB
XYxRjaHr0n5ejuweNLI95cjmBFqI6t/KUY0Ne1h/wD2uOF8m7Xq5n9AXUjc/
IVu7eZK1K/lngrWr5Z/dI1F9H6Pa92W4EfcpX9rwqXlXhbzDi68JSnwNMrY+
YdOV6Irau6iKaiRImFjaaGTHs/oIlu7a1dFtjVSf1CHVtmoZ9qvDaxnzqWOR
+KUJgogSbMmPhtt1GfBVdRKJ7hgS3eHQWXgSOnJ9SHQTdZiG6nAfUYcG3Qxh
MoO20ij8t94kunuscRv931hUG/2sgeg2eLEHcz0e1YnuWh7dDc4POvJN6hD/
gYV3s8tgdkXrDr6OWApv7N7aQUIeZ+KkrQrfxPajNrGePaxnuolmRr3nS3An
dbgwtjnYPLuLOzuk1Ul0z9DrcGr7E0ozQ6O7uStaUArvq1J4k+8Vv1+EwL02
EtIdGaowT7KDe4vaUY9726iGWB0YWQsdmQup0ZEymoV5UcAW+KYpF76uz4Sv
apLhVkUs3CiJgOuFQUQ7+kI7asf0Q2YTJMYOE2T3Z4phEYueHJffQNrk3kEB
4371koHo/thYdDN/hI+otTWTyKZGB43uTim6LzYQst1R3NMc3f0qko82zxai
ejdf1I8jIQf5ytSj8/4CdxIHyhPj38S9S50IvT7EVqsW3XMkql+B77LHCauE
R7IJU2lfgbwKldGUdsLGcXLeqsNho1CspxSvqKIav190ZfB9984lsQI3je50
8qRymtIdLNxWIUWv64xFd0fWYmrfpY0xQQKhJmFrhsHd1mIS3XnwdUMWie4U
uFUZDzdKI4myDGbOCFWWZmfkokFnpHyDqpWHWXxBvuN+TyVkv2KPz/5GQ/wx
ayGOrRHSlQkfGYty5qD00ojyLPJ5a9W5c60mEuK3KpB43yrGYBfOc6+BIYfW
NS8Z/ns6xStFO/Y5ukvRPpu1SQTjmi/hIpq2gLfoOS72Nyr8vBM6fh4h4Bci
hsB3eVN5N+pExQJtthpvKPl7lPSlPfRtaoQ/TOVZT0tK0d4hRftJJhYunsCI
T6GlSBb1mTzq07pOzo0WY6xoz46sZdTrSyDnuN8QRwgb7gA1UXvhVlMB3GnO
h6/PnILbtakk6hO49gxh2jPbm/kpqV3wUxQTNegH0u6gIN+Jj2OwJ7z9j8/q
R0/1wYu/THZGvtR8McBY5A+yiHxkLsrId9KIfCZDTwzdvXYejXzpxhtz5JsX
9nryHaGhri8KbGMQlB36u2brpDVHEKOtPf5L+K5gNu/VmsFbCSeZR+YUCynM
zKY97B3aXqmO/O6Qm0jMxchHxnUr6Dn6vnvnyfl+PZchAHtGKALUzMYYge9a
eceyRw5HK9HlDh75KKROfBRyJveE5DGOUBa6EzrqcuBOSwF8cyabEPg0Jk/L
opn7IslTyX1J2kPkqR3uy17RfVE0IrUFTPxjm/MbX4JzXxf46Iu99RNcwj6I
3vahiAA900VEwIfGEPCZBQIou3H+oSNfRkAPDQQwf9HXde30fjIC0GjZo0LA
EQEBuCQe9wGK61Iqjzjrdmha+IhRzEdsTxzPC28LWecibQ+T+r+lXT1j2fCo
CgntEe9TaaxluDysNJUQcENCAEEuohfzw73z5My/ns+RkMORILCgLnN8A/Uh
3ba8LZC4/h06CoT1GDRHcib3gozxThAz52/QWZ8Ld84WwjeNOQQJ6YKURaNG
krLGjBrt0aSXIGn2k/Dq27Pg9Xfmw/ufbwaXNVWIhCVrFq3FtZeCpa4PAdMH
xjDwqSYGiD7tKJYx0Iti4KSIAYx9RT1oz1TzynYW++YN0djqdHDm7+Fa7DB5
n9z9jKFQeuAFu8xGtGXOB74Ft3KX8Y0nvABNi8/zeffuLPNwvoITSYsehkDD
ibdJ1vmrMVvGHt3KGb4i9sn3/jV58H33LpBT/0YBa8vSw4C9SqBba0xM56Zt
fp/Wc9A+wYFxioEpj1AMZC17FdpK0+Du2SKuc9HOkXQu2jlE5+b6CsV+e+2c
oczOESajUha8AM79ZsMb7y2CD4dsgXnrqmH2mioYPStuxdI5q1QQ4OGfRS8d
UPROvW8MAp9YQCCVQuCBDIE2KgHqGA6C8AXXtTPfhcUk/rer4v8A33N/hG9I
l3ZBYsc+Kt9rcSPk+dg7KcOoZSh2nFrYkhE8/k++Dbfy13C1to7XsFfy7T+L
edPQXJvMKGfvK4zzK3yb7lG4UvzjuY/Yxe8fVfqVyM/gX+0k9m8W0UYvhoM8
8uQY0waXojUUsY42MFiXStsygHortAaETVFYB5reG7v1IXtSD0hd+BKUhewg
ivg0V8SZTBFXxBFFHGFWxJLfk+JGFPFOoVdAx++RZ7AG0CattCWvwmv958I/
3l8C/T9eA3PXnIb5HAcT5mesXDJnJdUGzyEY6B3Z0sKGrAW0J9sSDu8ZgwO7
V/dR89ry1lIOiXwS+RWYEbwunm8lWGhisOhJYRHSryI7aOvCCW8qalB7VbA4
yleVey/oI689xp6tyI3OisHKO2kjKDWyaWd6vw3fV+/gR9lW5kpTR9qVt3gs
t5su5e571e4WAaNS+JYaFkTU3CXPpdSFtJ/sx1vFBB6nOTwKODz+E8LBdl0r
bdtA1oSN5gzCY/ZvaZkU+7BypxLhMKknRI1wgHIiHO62lTDp3JDFpXM83KSG
kdiKIBpGRDpHrGeG0cnFRDqrDaMvBMPoHZj/xSB488PlBCLzYPaqbFi0qRbm
r6+GOa5VMHVpoQyPX1Dh4HRg6+pZ0gKd7btcXX6OX37MLtS8aww1zHYSa7gV
TEtczscaAHdLW1BINFHUMGkdpoua/SrUSJel+PKdkoga7B2P2vS6YgHDlYhP
aMRa2KVhDDUYhS3ho+D7WjdukOzh5sg2bgduoEY3rVbaSbRy3V6z2R/eJRnN
RYSEGrQCUAxhre5y2iJ48FUZRQ/tIEb00ART8J8TGzZkd/qOT6nBc3rRX2nT
F1ZgcVIRq7B5039Bl1ug7E4f5whZ3htk2f01yu7aNLhVlWCW3XLTwxEquy1G
K04u1TeedgyEhSOHwlsDVsLr7y6Aea45sGxrHSwm6FmwvkZCj2w89abooRex
D48/OJ0PVUzE3+PX6JTFo4giekG6GkpeG1bNQ0kidwe/YwxKA9RQOl9Fkw+R
JARCjRKUEEBNiKc65s9GIJTCF498mt0tKdXTppnraSKUpE3sOB0kbUykg76b
31BM+zf69rPuxaYtge8bDvMQOMi5xV6+wGo79xqNcbbTB9+wq4HdsB4PYVD6
RobS85Rf4rFwJX0xPLhdQSBVrgEpgbN1ipzNina5/DDaRbtGl7Hzc1oHw9E1
bGCnkJr3OO2l1NLv2bvHMf3eIuh32mgRo2y0QCdLV7+rnSw2Urdo9Ejo+9Fq
qlUWrc+FVTvqYfk2AqnNBFIbamDu2mqYRiA1bubJ/rnun2JTPYGUIyahKYG7
Z7LP2EeEFSYqBJSJwurnali5eO+cJ13oJDfP9TcGqw+1YNVBYHWrAuHEYHWl
taecoUzRiCtEVfPswb/Xr+fxC4QkVLELStge0lCOKuxqvpY8RTFj2+z/jqbP
i1TrWo4rfN/kzaPiOHP3KXt358x9t2HKdzdrEpS4v2hd6XsZV/qi0hFRhf8W
7P67kr6EdlvT0QFEF01aJWxQ6ydRREY69ZgzkLFrCHWgsA6H3XBYacYuz8J5
f+DOwG8snIHUhS/C5aos5gw0Ss4AumOSM2B2x2ijB46txKmdAbU7NhIWjx0N
/QauhbcHrILJ80Jg7Z4GWLWToWsJQddCji6X1VWST/woAxKyvHfrg6Yw7kfh
xHf2YAsq+QwnV6fhZIsLLZnHcU85QXQSFBDrZwxizHt7zAJiDxBiV2SIOT+4
20a+1kahZopFrL2fGunZvGT44wqUadURpauAEGXSXnkceJE22WFOu5Y6XR55
+y5/OrT6vmrRvIfR35G3kUfMSaadkdpQWuOpzGcGKSLejoCVFnv8hMt6fsJJ
HT8hzIyybyWURTGP5GrGUnjwdQ1BWjVHW4VAEbtLYEUqBZZdjYPm2mTGnmG0
9oejgzgPgM15ONyC/ae2/IemwiSV/5DM/Adr/SbRmwna1rLlGiofLnfbEIqy
dz7dCEPG7oUNbo0UbasJ2lYg2rYQtG2soT6c4EX3kOkfbiPycYlZtWQ2xVQf
M7J4vVIfWX2NIYtZekKr1fla5IMIHTOy2s8TZF1GU+Iux1bc0N1bVlBc2VOl
9OGX9iKugkVc8R1+KLuupc6UB/TuZM+g2QJjU2ofPB/yEXxVd5IvfYngMRLE
T2NfFhcoG5rVGc0+vngtZSqtnD6UIRGkY0hwaaXAVfTz8F30C4QjLYMH39Qx
fH0t4kuLL3ZVgkUblGDKymfm3hFsuS7F1yu0vk7Hc3HmBhtgqYHRR9PAiBsl
GRjFgoFhu+NFnAU6SztemL+Xt2sU9B3oCu9+thmGjXODLQeaYOP+Rli39wys
3tUAK7bXwVKCr0UcX9znJvhaj4ujU6f1oGByZAuVghjAHrcNMLkH/W1jAGMm
YS92bQqa4B1ZEsC8Ll5kJjgRW/cv48e7l1kKu9tGOwSaTIkDQ7z3Nc8bwvpg
9GqhYj3In1+LEbzMvCiabmHlG1jj6ZUay+Qx7js5LlTfILPC2D0fOhDunY1h
MUTjJ4afzWHsTEbDi8aKxCCPstZW9H8Vtoc+g8R5MOyX6S4L4xvRwohQ4uw7
grPvY16Af5GnPQux1sDxVsvxViXoMysMslOLQWrps1jr+syih1JZX22NWwbF
699mQ5pYycceRazmU30mWB7ztC0P7DQoCtwqWB6nmOWh12ujml0yrzyZCwX7
xkO/j9fBe4O2wfAJ7rDjcDNsPWjG2xqCt5Xb62HZljpYtKmGGoZmP331m60B
Y6mRYeoxKNtzjs/GFXOIHJvN9kWtmIOrzOxBHe2xfMsY6pjJyMf221op4oge
o+rLATHXAyFHE5opDSkjok16EHOwmm98FOtPYv1VrD/R26j4YvZIjrc4vpcW
B6UTdr6j2JB0M9OF24fPQr3fQPjXlQweU2ns/EZuhHFETedwM5c8Z41L7mX1
d5rrLLnktbTZtD5ll8/Be4b1aq8WPgdXZPdVeEMMZh2fAP+8Vq7CXY0B5Zb7
Eyu3Y3SLdc6avrReij1k2DeAA9JUuSl8kT8b8EWyzb4IWo3FGh0+GlZj2eEZ
MGnscnh/8A6CvbWwfneRjLtN7o2wfh/B3W6Cux31stWoNOpdEXc017lQD8QF
vREi4ebgalW7AfemMcC9owm4OgowBznJdSDqpGRnkfKoh29Kdl0/50N6d4Jm
6Zdf+CjWuKSr/0ToSYvGcWolCa8FqjKPwF0K/5imjksFB+Ff7Xk81HL4hqx0
HlqJPKSM0s3dbFYJW9xxTonTzebw0dQcsccMUZd99cyQbwUzhEHvBQa92Bfo
+64GvAA3g19go71n8+HBHYRgvZluWpNzN7tTzllvNe04vRey1rxDG9iwVEsh
uO4NQjdfpXNWFubJfH3zJGHei7St4g41T3Lgdn2GsrWo0HZr0aqZc+GDIbug
/yfrYdO+07DHswV2HmmGbR5NsJlD0JVAcJUAQUu3f+yjZqKJv6OfGUl5/zCG
QOZa9tJCIOKPPOcYBoXUly6mvujFo57VrCvrVcik+2xwX4cCc5v/TF/ryFqq
WAvQEvQxXDp9FP63s4RSLbZRqYDH1ykmY+jiRA3qeUGHejZrUU9upxDqefro
hzatEXVNWcsawZqyhYTjmMNU978Ec/jf3gh5hU6w4Vj9/4lnI8jnqtMI9s4I
2BOopzWpZ62tybDUs6xVd5x2g6x1H9AaMMPeO7SBtHzdPzSslKe4lfJHXSsl
cf5L0ChbKZajO3JLU5Z2S9Nql4Xw4dC91DbZ6l4M+71bYe+xswR7LQR7zRR7
G9wI9lTGpVwWWCaVBYY7MOyhgyKLPEcNPLKM+JjkWXpdbCpT4zHJbecmaQbi
dWOQ7GcByQoGtruXZUgSIN6/RXHpRFNilpgSEZ79KrKjoleOe9ZQtU261Vra
2Czdeom92vga9iiLI7R5gfPhf29W81U8VTwkS1goouPQKaVHzlCvPixD3QLF
ngN0nRW93m+9orWF4os2M9AbwX+jc0l0fJpu1nhN3gxz9tgz0JZ/VIOhVj9k
beHhlGFH8X7I3jCQdvJhkRk7WunGE9zhh04MKkPqxLzIBjXtcGLkVpJWsxNj
7rSKtOy0EpzONXOWwoAv3GhaXL4pBQ76tsnw3HW0BbYfaqZODMJTcjp16goD
/VZ/aGL4pIVwlIb4GeJ0zrFttK3kSZYmEZLkacR169iP63y/mECymEIS34au
pek1Y5jsawcmEYm3HORcqcQkVYdITxGLh1VYVNToVlhiEWfxEIt0LTVfcYXb
MDqyVylmxu4VrYC2tLVwuSKUxSRSNbrSrZS77TxtdpxidEzaNyxR1ks6lPWs
DmWt3wEV3h9buC/tfta70PWq3v/UUYNXA16E+0nvCbfXv63a2vEK20YTMYdg
ssJMWS1Uo5myWm3x6jhlRTXG260aO0sOQA5eDYUd5thViPMWODCNmMQuW+rW
vE7dGpy9KJHdmics3ZoZOm5Nc4EwGYXtXcyt0WrvOrl9JQwYthcGjjgI42ce
hSMB58CDYNL9RCvsO67E5EY3yR2tl91RZfUhfMmaRZs4Jp3QmkFwYe503b9+
Dm4xcMH+ExfTIwyQrY0MjPlLXdob0jqrKkohJydnWXh4uEEsMlNHuBjtfCuj
rLewnHeeFx+u9JBTpEBdMwgO3WmXvFxpmGe9ghcrY5Dt4JYxyFchprp9pBzE
F9ZM4HRyzSlv+Gd7KY/DShp/jMIWcocw2+ziXJVcHOMUttLnU90pbnsdGT1Z
iF/Hjuc7CQNUN8z3FzboSCtG2GYoM4U1Ih/V1YrukY+dpR6Qu3UIvUsL13Jg
CyPOPmGXL25UwgUGTD6+Tudf5dq7hYPze00HJ2PnOOiQHBytGS1Fs5g7VASu
J5R1D3w88hBMnHUMjgedhyOBBIt+ZizuJljUck71KxWbTBR0tBnfieDMxdSD
oI4ir7WxrhpxcbmiosL0hjG4vWmGGxOfFxudf7hLUx+B20UJbpj47vZQ0dJs
KQUSKvq8XcU96eq3BA456bIQ6fZAaSFTmvtA5SCpYjnAOpoKa2JXwvWzudr0
9IZITwX3BhulLkUr6CkrdFnS03sVO6HO6x82nRh7C+YS5GRVGP2BPKIp3eHN
oCcthZC2+/yDq8dX5QVWSE911aNuY9lDqkdVp3Nn6WHI2zEcGg6Opr2POGSC
a/lx2MqsHvtz9fgGU4+yc/Msd27+YtO5wbYX2bmxGAozm6dVIVtJ+nODT0Yd
gcmzj8GJsItwPPgCHA08D4cI9A74tIKbF4Gepxl6mwj01u9Vmqdy0cK1CqYs
KZCKFiYcknd5BOH3KIWfE8IP8YFP4NGjRw16M+ztj1oi7z5BXruEvHbnBz/c
Nang10OGX1v06vHPK2CnV+uTbltM5rDDPZcIO2mZKi5SPYUwPPSp7uyeuJuj
LX0dtJUEwf/eqGShp8VEO0UmqjJwLoTpMlG8mBT7WAw1+OvU078XzZhQZ7iZ
MMx8JzrdWMFn9+l2jAHK5VrS+iGBibb7P8f2ej5U/eLh1GFn2VE4vW8M7eLC
uRbs5MLZFjr1u+tTBj9Uh9S86atRp7fPvME+mMbCRMG8Uc+jMeO0JnIPfDTc
HT4dfQxGTfGEYycbwYfAz4vAz/MkgZ//OQK/NgK/VoVxukkwTm3VLn4pw683
y34oAF3aaxMkCNLsZ7Ak+IZF9mthku5+hxmDne0Efj/cR6P0h7sIRHxM6mSY
06+iILl56+Q/GqoCMiSy+14kJBbyK3PZFb1bzU3u8gSV1m2SmBSXQ03KLsJH
y4SkWMa0kBYf1a0qKvkoVsIaDj9pbGjAluY76Qx30kcL96OONG/TwGVg0pYk
O/moRTlDRqQlH+1ubfjtGX8oP+4CjZ5T2G1fHmPYijgcp0FEUm04kE1fUm3Y
11zJV/g1TzO/ZoHo1/xKw6/ZwXbFNOcp/RrsTCsKgrY0T5g6bSd8NsaL+jOH
fSvBP/ISQ2QIQ+RhgsiDPm0qO5WVMjYIpQyxy1qrlNFLBmRPxKPJCd1SCZH5
SUlJBjtjXlcnxSstjGRSQF6RAOn84AHD431HOTM6mLGYOzDE7xC4Tfu9dklQ
qzzBcXiKXweWz3EorU5En7SjcIdqqlHvsgSzX9OatpbopFQNv8YKSb0ikVTR
r2EkteP0PtqBpjdxYHclnuu+9pgh8F3uZGE8z7zdRrnRQI+k9hVWUCpLHG35
R1Qktca+EodFN5sxfVjku4SNteEUwZGJbDjn4Ci2Dwm9Ghxxk72a93iF/02N
Cr/o1Tyu69Xk+uAwUTb3T0+pRvGCYdOqnfD52BM0Q3oGVEFQzGUIiLoEvuEX
wZvg8RjiMeCc0j89wryazYJ/qlfemOAShuUN5tVQQP4cAdkLAemAjoypB8mT
yagUET93i4qKqElqsCv0NWWuRGMUDRmEntfFixfRJEVoOiI2rSdMVufPG7p7
+1pauNCsH/JrnNWFCgQovU2Fb4KkAOUbIDP3/gPuVbtrrCbSo7Ob5JaY1vg5
hM4GK80co/VI3grXWXyAtowaqtfrqMSbSSPhu/yZwhztFOW99blfqujsIGEV
FV8xaEFnjRQ79NrgHk5N5p1YwtqjcYLu2FQ6g4ojP3hVJlWTkpGDapIaOao+
ANHIUQxR6Bk5jrQVp6NeWLYjT/1FwZY1+2DwOF9qnnqfrIbQ+CsQFCsANZQA
FY0cG6aqoqVbc4DiYwclRHtRiFokToMDR7wKiWas9KeYHPAj4vEHMygdlUrS
gUIxP3rDlBfsqheKNQoZhnzFMF3Eync9nTo8RNWRr7XoVMvg2SAYPCv0DR65
/midy7alLKf1Q2tmjV4Xtqwaw9+Em8ljhJtg+SVx0i2wOEqfL2wCkregaHHZ
D+ysc5RbqXN0r7rM811ON+dgN3Wz9yxoOj6NcNlJZnXpLqnLz83qUtEa8IZl
a4Cd5k5nfZ7S3KlKhK3r3GHIhAAYMjEQXBb7Q2RyO4QlXIXg2CsQGH0Z/CIu
wQkCR/RVj+r4qlsOaneALzT7qqzGsXQTdsVxKP5MO1tiFcPoXC3PlqNOReyv
yoj02F+XHQjnWhqCLp/JCrrMkM6V5YMfHMwp00lMmUpqy6BaEL1x6gsWpURF
GWOjZRmjgMO0RIApLiXBOfLso8M0BkJtZVDLZa1tacwQYhnEWmlSu5uuNuhL
zWEJqyV9QVK2+LwOdwqWCFeOLhTm6MWhX1tU9zNhhakkPdVU9yFLIVYHo/Sl
Z54fa8TG4SJc90nH+bym0xl0s/QcKUhPnVYB19c0hjZsmUEvMjPorNkMasoK
gkFjvGHopCCYsywAYtKumeEaJ8DVTi9W2UBuUQZZsXThWgdZbP6XduI0uIGF
AfWxZ+5FD/PKi9gDaRFHvHLDtladq8+tP99QSABbWH++pR7prTKT6tJbUzGV
nziEoR5qslX3oHvN+dJQXJtYzZcG4ef1cUs0BnLU46VWrCJF6XIR1NpdulSy
3bqQMTZL/bpyM3owfF+2RrgUSLo/cJFqQF+P7Y5SLPXTZLtatRMV2+1S550B
WZofsIZtWQlaSrC6iO2KoFiVZOkES1mq20IgDnyINpG048LSJmIDVjvklcIt
uRHw+Tgf+GJyKMxdHggJmR0QS7AaldIO4YlXIYRg9SSRpbJNpGfcIlZ1jFtx
Owytm8xz7VfsPRqR+hvLvAq5ubk0rxrcH8bg+jPnu1GDyfOBS2nYsqqMUDfy
7HGrzzwK5xvLgy43YI4tlnKsieZXLbfIdJog1ZOObqhHopJ0yiTSnRqIUunW
Trrai6+QQBR3lh1R9VWe0N5gYsBIOpO4mhlJdlc7E6A+dJzhZgB8361MF/i+
YqNw44CrahXgYhtkeLwVMqxVaun/05VabGjT/JPr2MgujjjhCgocK/Sbr9Cm
dH3YoXFslZ5uk0E/yyYDrfUZOiZSTdQ+aiKdLYyDweP9YPiUcJg45yTEp19m
aE0X0BovoDVc29TdozJ1rfWnD53oN9Bv3SDTb7QT6ofGEOpMP/68962o0Qyl
of2dbwW+SZ4XMbFCavghlmDrMMEWkASbLyVYk4PV7Mox67p/+SA4ueQP9hdT
uImLeJXWsCJecd8Y+jTIjDvLPFXzCDqZ1l5fibNi5isFCZnWepm0PmyCXR6R
LE4j36FjXOYm2q1CUWitMOOixYpnWWHFI0mmlQoyeqz4pyjI2F7OURC0gc5m
4NUOOCKFyy1wAb5ZxM5kIvaoKGJHMBGr1aGw4W3rsyVWPKWy0F1wqTKDCtYR
UyOp0RsW2wAp2Z2QmNUBcQS30QS3EUlXmaekNn+DtM1f2tt+oNHC/JWKMTNX
FEVPdzmOt8cjZuW0ynsRDK4nZ5jt1ecWzaqI2Q8IXl9FzOKvs8pDF5kcMM+a
ernVpx3TyrK0JKMLXVMxYjd6+6wXNaexrJVeKgTU4vJYaZ0MDi0WHuoH3zYG
qiYa1IO0Rm0oWyXVcouS6rdtCdDk/75uI4JF+3nUu9CRv1WV/Xeoln6s0+HJ
863w5HFWeLK1HiMj5ZuuT4cVBG+mw4043YGD/DhdhcsylJp2Fl2awTTteLOm
lRocdqsbHN4WGhx0Fn1IFtRM1VqdxX+HbVt8YOT0aJp1IxMaID3vOqTkMPTG
Z1yDmNR2iCToDUsQHOEI+xxhccmH0PoePWPuca5ekROLHQwDuwJcJ1SvBLif
cOC+6YioNT2qzLkhUs5FUZvPazjnhDIqbXE3lbzZ3lobvcvlJRml9tZfqg6Y
VzwjSqVVNDhrle/9pTCDFKYacFCvku2aCyU1yMsulEbBFe89x5Yie5oU2hPG
wvcNh4SBFXfhe9hp2RZlN0+eYubJeWN5Dce8OlufJ6tbkozWcOxcHULQWpNy
ENpitrM5SLxLGq/cCHO1T9VKzQ+yqrXR/GCxNgQdqN/KDlTmpEfg+JgXaUPD
qBmxMHiCP8QkNcKpwpuQkX8DUnOuQ9KpToLWDoLWazqG8UV9w/iQ2jCWm+Kb
XZYlERU7AXecauVZg9c8cbgSqA6ncL3FuLEThWtvhCumWi5o3ZKaS+KlVIsU
WWgJvI8p1kEALRGy3rTTQQFYG5UayQKu54t3JcDSYeQTT0PBiTGq6rp6eFAn
1epaUnoFWJ1uel6A7TwTTzserHUzIGG+mLYMvm88LrTyHjELbel7kIhyXfcR
5f9jQZStdS7pVHu+6WK1R9hB0lkbDpVBm9juDgQu7svBPQK4AU4WuIsEgTtD
ELhjmcDV6ZKgdtQGNtFSZjHRIq5c/S2cmv5fsH7cKBg+NYIANg6+nBlPfh8J
Hl65kFt8C04VceDmMuDKdlSy2Y4yYh2rO+jnryumgra3do41eK/mq+wNZkGL
wA3s7yAjF3/3oukxKdMmlaf5MPu4iWTaJpppsUNCAVtHAbYnl/3BetVG5Qgj
ZBsEyEorqRCyyIwbUzao1l9EqQYngrT9KXXeNeBPaXXjX29Mpk1K1vobOnJc
zUOiYhuwNASjWPOqZskbu5ElG2tyMlr50W46ZNDtrIuE6tBtdJAL13/g/DPu
6rZf447T7sK36JvQ96ZOTOsLLhM3Ug07aiZCNgFGz0qC0S7JsHxDJBSUfQV5
Jbcgm0A3s+AGpBHoJmd3dpuTjB34izeWUtj+TDvXGrzomcHWsc+tVMmH+sBE
MWtCdix5Uq/SzziEH7XMvk3lKztqoyWDCnsQ6cIECmKC3+i9c1+xWc0pd+PX
d/JqDsUuXyknYZfuIPB9hqTkJ6CzJtiyb+aSKgXb5VUdMuRVqVv6rzel04FP
dSs9VbAxH8FXNX5C07DYyn9C+D4OqwZL9whq2wh3nmmFO2u082v2P+kPe3et
IsSUbmd9NEnju+j+AlydhftDcEjakNK1aOW30WzBfar8xc/A8envwbDJwTTV
jiKp9stZiQS3STBmdgp5UmHlxigorrwNheUcw6cZhqnSteZT2fSXlftPVu2o
jl6w1MfUk+F3VtSh+V6Ht89jQ6G1ybQdyeRI+/Sl/3UJ072c7yYQTCdIPtWb
DM+US/dnGKegdqSgfsQyLzcUruyoT5LysoOIZzeCZ72aT6lOzYeuhzzGsCyt
z5KmxjBXd9aGqSqE8VaGGnluVl+vYreDpRwK+Cp3iexgXSz0oA6Vhc6NHAj/
Oh8tNE9FmM8YeTjVx1zD+klptT0DAdabqPTrRqoFDnJPo3JCDj2C2qh9bJly
+iF+8d4+doeGlh4+uZRhWtbD083DAIc0hgHkjgzleE7O0pdg1qSNlCoz2ow5
OJHmYMTy2DlpMHZuOqzeHA1lNV9DcdVtKCKYzi+9BTkE01mFNxTuFcV0qoDp
WEvv+Yie98z2qkQvWuFjYh2KPap2b5hHB7uFnMwvLjbKpZ3vI4DRr4rqz+Ea
2l+Rl1mW5hCu187L1ZFiXkYU96sozm72WfqkXALKt1UCEszkNgm+fBWQNHlW
6fU+fIu3ZMvF/hQhPYub91UwPt9Fa8vKLEGR7ziLpoprhbvgXxcTzTtY5H0P
woy5POhqjWLve0iKPU2+GMU2xdZqrjJSRrKujjsb4qAu9iAbDsXVQrgnIfUg
219irzr2Uqtj/WYN3M4ZsHAILQOhRcXSMKPQYyh8Uyl8x83NgHHzMmHEtEjI
zD0L5bVfQwnCuILDuPim0tbKUttaVyCYwDiQwNhPx4TeqzSho5eu9OmpLYSH
GgPv3zmjvk8YNQL4ftQnmG2j+pt60ExMK72hWpnYicK4TjsT18qZmKph7P63
qAPpOcxHzQ4zQveSCF3efV8SONlytMtqNv7pTK5q7/cV6vdW+UGhz0rsi4wX
lLuaYfv9Bxm2nRMGmvPqNmpJVvojO88kQH3CEejM94eOHB+6fgjXK+DVBnar
ZB9JJVubLvgYyrZ8CFtnz1OYVSKDpll3TjqBbiaMn5cF4+dn03rRqfxWqGr4
hkD4Gyip/hpOV9ymKlnL4KIQ1uuNRGc6WNuZRgiv211BVbGTZXcGZuBhXcHw
IyKGWRImz92oDyQcO+glZIbkWjEhe12sThATcnNqSgrEuP5RUSMqs0CwtuVM
EcwXDEkDbthtWHpyiqqfJ9MyIf+HPK+WkwMpgm/Gfw5fnU0TKsE5cv3EPCOU
YNbvFrzaX4NXH3oIXj1Pg1dP0uDVWsMJtvuxjNaZOs8kQku6Dx2CwyUpuOcP
lxbhtgbKq+3RytTvkrTyNKVW5j0d+Zs/hrkz9mh6V+rEO37eKZhAEDxhQS5N
1LlFbVDbdBeqG+5ARd03UIpIrryt7XfpWNUno5nfpbSqzyms6o1uVYhijXk8
TMR0Hu+LriAZN9cjkodzJH9AfkWfi/zOZlbuwbAsZWW3+sxjUlZO8Zz/rNWp
AT3/GfdoXhXxy7v50evCeDCXLsQVzkIX7VWDWbmLvlcVIZbt0Z/Dt5cLBAJZ
JHxvp5TDRfK0gri8KUT4XnyF76M7ifUMDWJt79TCw5ed0MM/k+bDhstxTXxB
IL+awdsOfbzGij5mEwvV7l9C4OopVv0rln0zePYl+F2QAxMX5pInn349NKYO
zpy9B3WI4zMMx1Qfa3heaXmCb63XU6npW5+FnYcbXLeu34kQxizM/SxskZRB
aRDDr9CPvWhp6X7CRPIMFnA82DCW6yzycoT7FM0aki0fmmKYLxeTBuewLxHf
d70xxdIHVeRlaeAsuet5mfZK2/a7iuN2wrdyybhKzj/m/so88zkjM+wkwVeP
Ejx1NcP20mDYbt3EsLVmeLWmGqx3a9lbh7relAptOSFscxIOpuPiMlzfkuev
FMlpokjeoRTJIaJInieL5IoDE2DOzD0Cg9b2rSQGzfIvYjgPJi3Kh0mLC2Hy
4iLYtDsJms99y7DcfBdqCJYr67+Rva5CLa/Ljj5LDf+6ee+BOIsRv5FdAW+P
PvTCMwQvber4gMtiAl9MzkippYcB2ES5tQPFr5NUhZKenhTGVTQlh3rtoN0c
eqMGTQJ01bYz3Qsozbzy9n9seUKIX29KE0qSvJvgul5KVntd9pai7PO67pVu
hLYCT7ZnWBocvF2h2lsjjTeI26SEeV9pt6nsdUnHiY/gdUlHCX4P0jEitpE9
LLW2d9TB+hi+tX0ZVRkBdD4Wty/hHlBcgIY3kTFqbVwkN5yYC5Hbl8D8OQft
8KyE1Lsgl0O3gMCWQHfJaZiytBj2Hi6E1ov/hBYC4cbWe1CPEG68A1X132j6
XBTC+ZbNlhTCCdbtai//U9J4gunLrsDW6Zl7mZO5AqYtHU4yYj+xhlhHEbE0
/7LaMeu4rFgRsG0c7eXQmzVosWI0X+erzW7LgGX9iRWhs4RapFCzEHsJ1Pn3
J3a47pVugst5u+D2xdNCvpHqKiUCN8gF5dKpFA0uHW6DSx/+D3Bpe2YdjNea
ylL96J4J3FqIS5pwaSiuTqOaGLm0niZOUGvi1dAYsBR2r9xsyKlS5NlFLM9O
WVJMAFsCU5eVwq6Dpwhgv4E2BO55BtyGlrtQi8C15W5Z6bucM2eOhUG917Nu
3fbt202juwLYns73s6Yxsct7sCh4EwY72gXcR6mFVeF6dM4fqbOsN1FgzUmW
drh8w+dypL7hqjAXS+1EOWixRp9tttkjMlJMsqdPWsO76shZA5erouB/b1QJ
vVniDJLau0pX7bdR14SDVAuL7eXIm2xw5Lk2OLKtiQbrU/p6haSytEC2tAmX
T+C9FLi4CTmyrHdPqvTuYaZ3k5V6t8pvOSyYf8Q+D2q+2YOySKQEm1OXllKc
jpubRv68cIhOrIWziNFL/4SzBKNNbRyjOr5VbgnDaGa+tm+FGEV8Kh3oC+Du
Vd8HoWYQny+zV3rfwoX8qRyjVMgORh6cMBrByT4Xnk+4sHVSC1sK10cYXKOP
z31cYRmfMWAZ49irtN9FgioWX8pCXIQQUBchSlSjaOqB7y6mVqtD+2pOvAka
UzcTWVsmcOJK/v0Va9hUGaC4g0Pc9y/Uf61z4v0PyYmn2+DEGmMNVNa+a2PR
sbJwVJMTDnea8+j6JrqNFHcf0lvmYwVZG2SWtaeUsrYtdgdE7t/M67TG7SYG
VUyhp+UUihAeMysKR/JwzRMOv8PitUkEqt/AOYTshX8SyH5rv0Wl0VqJcFW3
Vh4NaBk/bd6BLsK1D7+nW0qj6CHjdTi6cHWkcHUUoUr5b/+eFKuVb9bud472
mv+4xUSBpj0coLSHpUUv0mg69jhge9JVv2fh9LFP4VsFvaqxKDcoU63UWntK
O9V22Y46atWOak7fCmVJR3mqFe2oEg07Sq/gG2mjpVKPDu98SDpsa/TXvtYr
dYmosSiObg/GeyxwxxNe/4T7Eb+q4nRY0rFFljq2JXYvzCcp1aatpCrrqG0l
llJL6O8nzE+HKYtS6R4oXFaBq9lwuczMVZWwfHM21NS3w/nL/wOtBLN2W1Ea
rZSI14hEZkUJmPVasSGiS3B1mlWbtBevAudwpZdZje4SXHswuA70nvMUHQ7q
iguMUJX2vCBU8fdXiRK6H/uqHAadlX7c1lGnWlXnnW5FKN2+ipBuJ7R1+6kj
dy3Me80EETunCddciRODavtJr7Krx459NAaR/hPs2EiblbIalBuyBzob8th1
UPTC0lx2OXcdV7DIjjUUbNKJQ7Bo8QkrNlK6jo1kTqmThZSKn0+an4ATAXRb
Bc7N4i4o3FghQXYWgeyY2UkQn9bIIKthPVVas56ETkmEq6JTkrnHXms2G4Xr
S+xrH0ZEREB6jK9XQawHJ8GOnBxPROTamWk/UEKX2sWmKgrdvB1/1XWA2604
wBS2fBAHZ+nO+74Ed6LfZI6kUFRAwfRtu0bWFYda1Fn3YYtAbf52mVAdeRvA
ta8JNvY3wb4JL2mYUEYKukY6Je1hymv0mbLeohx7hhh0C0AvUqYcsn06HFw2
A+pyScZtK2FbFZvy2O1RVNymsPu+ubi9khcI7ts95cKrLTPJomhjYSaVweSF
6TB7ZQas2FZGty6u5BvE6Y02m9jiClznhktnZq2uJH9uBkQl1thlQBWJBpTQ
IYnQlQ0oYUz/qH8tFbMG3eGXZHa8YFZtwt6qzKhj5PEkv99BFyxPozieyEXu
aKsCVxfHjgzH0T6L/thlU5iqWYJhVLk3It5mN6hZxAg74i9GDrVMx7erFWaV
7XTczZ3PjQcgYFk/2P6eCXa8b4LN75ogePnHcIGwQaVZZaSgq9cyqTWUJA70
28Oglxhi0NrDC9aarF6lt1JmbXgbVk6aDvOXBUJieDTcO1dKVy7idnFJ9d6u
SaWVoLNZgbB4mb8h00mveiOn3QUpsHJrAV3HiDcB4PoKnKtdJWAZl0ctFLAs
qd79ngVU9Ro1qhDLiGOtVkmf0Oau47gn4phf7DpxVm3sVkiP9iE5+bAulPHD
YActS5nZyoKl7MBR7EdQrGcdd2pYx2o/iq4Jj3pXVfJ/TxkhQmY+E7uQZ+Z6
ncysMab2E5aHfJf2h50Ewbs+MMFWguL8XV9C+f4xkHVwtsrDEuq6cmbOUd0S
lGyjZVKPWIvXPe/qBmJtZH6BtVndj/8HtHm/AUmrP6QjuKumzISR02Po0sVg
b1+665gRa6aFr1enQkZ4mGpmwB4viqBXx4saOycV5q5MhM37q2nzMF2syq9I
xgl5ugJuJ1tvQdfAba5VaGGXNWb/6kzLDdm/atbwr0qJFkbUJqafkVsl8XML
/4ogOSCi5SGyMbvrVWqzwCfVxeSAudnkSDLzLolZ0ww92iiOTQX9sre93Jyy
8U8Uwhe87bCUpa0xfBTnauAr0B49SNWNJ9qc72h24l2MHAKXi72E9gfLxGy1
TaMLVSQ9a8tv2TsUwnvIs40k5YI9Y1iX3tGJcPrYfJqYGXnQs7bsqfSKXZNG
SfZm6ySbdlnpkGzNSWHLLqtvYvpCxuYPoHTXUDqxh3MCq6e5yNBcvCYYklPK
4FxZOhQlnoRr1RkQGJBMIBxoxaKy7Dy2VvWZviQT1u7Ign1eZ+mkvHQVCEIZ
p/Kkq1sRyvSmge31Co2strVWbM6G8uoLFrZWvdnWckDcmh5jSCYSGVGs0yzp
tXlPrEEQv8heYfUhfLI4kEkGxrsQFph6zKpN2oVwxtSsAWYs/mKHs4Jjf4LN
VayGVCpSbIQ0UcjP0b4pLc9ZbWTdUxlZ5/1egTtpXyrb5TUDRsjRwtBLe8Dz
NEf/U8rRYmvtT93CIdSZ/Je/C3s+NMFe8mwn+blg33jWQn9sCh2IiV37uR3m
lz2lYb32ye5i23oL3K2PCrcFfAhFez9jowIHR7FxAQLq1dPnMHOKABRH49EY
ysisgcDjRyAzs44aQ0vWxjITy8XSxBpvxcRS14VWbM4At2N18mwethFL96Pj
9ho6Pn+AbbBZz9k2rp+SlPMSqpxrmHIWjK8vCdvHsrA14yun6IIjBXYvvelg
r+17Y42mZI7mPvfzVyF28S4TzqJdkE8jmhHhiGRENE/PCjQ7imjmrZJO6lZJ
NoFUM8ht2l/pAg1rdrSFr4V2dPj75put8HYORQpQpel0/TSN/gqmaVqJVHhh
emlafaPcw1eg/Je/R1HsNsBEmXbh/olstA0b6Y9NhfiV78MWwryPTneG2xeL
7PTC7Kga6w4p/WcY9/20QdDoOxDyd39JhwXoCN+hMWyM78BIWOuySEYmDsUj
I0VtGZ/WJPtEy9bHGW5EFitGM5dnwfpdebRBwpPf1OUh7aHiQ/M4qreTopmt
fdwkoHmNygdbrOGDTVyYDaEx5TZ8sK8hJauR5uZ8DR8sKauj6kRgWW9E56gu
QfqZe/nLOaSnsQcv9DNDGqHM/bBjUvK2BukzFt3PBNHRwcv+xDxqf6VHrfa3
/of7W3RBRdwIuJs9Q7VAcaLKb/lC1RikUmjJqiztr5Wlq61kaZF6q7K0oRKV
LwQRvCKW93/EVHPRgSm0mZ7evuM1AzwnPcdeJ8/afiaoTT1qpydmT1XZnoEl
cdmWDepdaot6swGHOylD4dSeYVB5aBK78ItLCzrMd2gszdIb5q7kFd0scN0S
a1FxRZW5bH10l72tRevSwONEBe0oxqYnacgHmxPZbjm2CIOO3/J7arfz5ZCi
il4jqugtdbIfNl/DDzvTfJOpaNkPu6fwwzZv2WP2w1Sjw1FJ5/p0Fc448s8z
NPJpzNL5SxHSAqLxJUzU6Iohum0hukGN6OiQFX+SkcxuZtZukZR8rvaEMTqZ
YNpDZupXWaaOGAJXzpzS6BXRa8sUe0U07srSzdQM0Z2lHrDpHYbkA+TxHNWH
9tXjeAwdQD/hQtD8An3dnb8HOXnsnmmW3titsm4oOltbDPDwvPu77HFwPmwU
ZO4aT04sF5mF0CF7guhGRPQRhujcbUOpaEZkrtseT6O+ikS9WJBdvTlRxatt
V5nmu+bBdvdC8A1rpr0VAXwXxgl+vy1tNw48R0f3cFbAnSNaS0xvsBDTdbKY
VvtiU5cUyj0i5y79j1VfTNHXxUeIY1PP9+lCdv4be4XI5y1mSNMMvQBhmb8K
oUpl9QLpa+Sjo4RvhmvqlfUkv9/qLE/+J4yWIM5aqOsldA/0XvI32hytdq+1
uilvRPSFa0kTBa63VBlBXcrZfFJG1ciLORt5uGXO5h2cdrWV2GeX4SUuyKkR
sQcHmsB7+iv0chA2yDqfLmE8MulvDNUD2Xs8yHPoY/LeWc5QmXBQsMv0BiPs
rUmLE03dz8O/y50C5d5joeb4HGjxn88G7pGPnGB8RHQNkIfn7RhOnW1E6cK1
mVBe00m7pGQEVH9NkB1vyPaatTwNfEJqaN1HGsjFNgy26YZ1PEpTQDhgf1hC
tx2q2pWvYF+pssrU7SRolcWnNlqzyiz4CO/a9HI7nNA1YDMljblZUtP5Symk
tYHdSwK2mLzJr+60rUQ/dw9FdFNk4zgSolqv7xLZ943IfnArf40qR3DWp4gg
VRX0J8vfBrpObPhmneXHaJ3qIEfriel/p2OtbDXjIjhLEHB08osO+AbTNvD4
mL3tMHmOfMIIe2XiQdWdEFoTFfYWqX8aQn4zfSqUHp8BtScWsJ049J+2QEFN
muh+nOkyIc/bNZIWkhGgCNyi0nMWttK6Hal2tUVjOt++PxMiEttoS6Q0IRSe
aN5GF8g3Z0g37FqIbApus8iWwG1LZMuWGd4dyEW2ZJnJItueXrHTN73cDyd0
LWU7EUG9lqB1KUN11oIeVkHtIoFa0NnYd7LVCqjrXMOWPwUXTzxtvTMztD98
X71TRf5I9FSt7VrazraStjXaT7Ab9FIJVrlqdLpBVe0ndg8jMyR1lnvTipWE
Up8Zr9K9E21ByxmoAxeB19SX5PSM7zn8CUPzUfJ4fsoOA18XZ7h9ocjG0IW1
grXROSm9uySUpPy704vgQpwLZB+cTRfV0d040oEVKKDal6FaJOX5u0dTEo6p
Fm2v0ooLhLgKrRkk8jfsSlOQbpqeFyvT87w12eAfWioXd9nALmvViEoxD+0G
8304ARzVXZXZa/ecsbvtRJ6P4tZZk4Z1VlJ9m7aQ5Zd+VRUaV0VtMoPz/gzV
qKvXc1QvYL9SYr7eyT50C2nbG9M2R/codYUrOmrNX602brZnLITv6/ab84OC
/NmbtqfaTtsZVtJ2AkvbDYGfa49oPGRLSmelD+x4jyEWkeo705lOwlJ04xg7
QYH3tJfF/OyAbzRtoaA+Rp7jn5nAizzYZ9aQZms6w1oJ27JPVHOiSrHAS5+T
3y1YCnmes6Hh5Co2mR+2Bs4huKV/Gi7NUegNJScv2DuW+tqYgr+YEgoRcdU0
tYm8NbuglfpketWpdTuzIDX7IhsW5PVenGKQtk5i94a0VAN7saQJpIdT3LY7
UURwz10ZC2darHtoUk9ZRu6lPl0A9gsSEa8gQC4WwE3wTNBZvIWiej1T3+xr
+avwwwJzwUuBb1lze5qasOtM0NuD32w9MTA6hmBbq5kTLbJrp5bD92eOMA5o
EUw/ZQb/wGoGN/ep6DWQGph2Jhnzdn0QtcKkDOw36zUVEFZAAMnIEu+W3kdB
LQDbexCh8IPYe5L2Cbaa4XK2Pc2jtnn5xeTlUBG4FC7EbIYLUZvo9hw6wR/u
ytZvCGdXKwc4So4Wv7kyLy9wmwCfj/OFsbPjYfqyQpi+vAQOnagg2c3MXfOL
z8EYlxSLgtXCtTlwPKBcHlFCU1myoLD+K03tY1OHtCFaIbpj7RfdewTRvZWK
7kYmugVLTS26xf4UyVIrr7pg01I7VXC5z0NgG5N0MRfaFMfrEdUM28UqbFO8
L5UyueCoySiXesGRn7NMHi1l8vqBfiteI4h5ytIqix4AtwrW8c4nHxUnPKjs
eupSJp+kMREkLKPRay5NMjeXNgQOsq+5VPOOXWVJLNh1kAK1wfPegvNRZjRU
nlhMy1wW6JaQLaDb53OS/T9n7zk5xxnOpB9V2Wt2lrklM8BmY6klT/++ahuc
TVwJFQFr6W4sup8jZgvb0SH/u9gJZounYwl/nEuYwoJClK/ZUQzV9Vdpujtd
dp6qaLGEtXlvNqRnt5j3vxOlKu+q5F0eUvmI8nSOclTfUYL6Dn5I9W2zYUXL
Wkuzbq0VlV+fun6jR9cQjlh2lq00RHTxTqxePyTCm7B5BTM5U+OxWwm636R9
olL/J44p34gZCB1EhVJyqIgoVd74/yCXK4dBbPWc6o9TB6/9XEYrKuuaQFe6
CYOumopcD6Vei8F9gA6yJVQLyPYbbAJ/8gQMZiq9Oukg+R67UvS2t9/UvP7g
bvkOKPRbCU1R29narIRdbHVW3Da2Pkv4d6k5CnMZlGS9yH0KzF1ToN3ssSAb
YpPPQGFxC1Hd2bSkhSgPCK+EksprNOdRo5mrVnEbLfZxSU0faiUeKyjxMEmJ
xzyEErcxAKI1zJVAEG7FX/M67p/aJXQ7qdC9hYCzwu3h0T2czYUkbEV0N8Xt
eFfpm9F7UUgkXY5TDSMIzPCst6ocIxRbFbLPzhxeYCWHGxoQKbOz+dTSawtZ
N1hGKrLvcv81ilxX5r0Mdn9gIlKbYNo0WhPVFNEqVAcOIbl7CHuPH2H2WgtO
2MljrQBurfHUzNTx3tZLpxDVG+i+HroQL3kf3621m+2cjttO/l1b7WDqS2Wm
XnZkJkF2jkWRWJKs05aVwKZdiQQNmbBoXSYUlZ5nkpUzWinXoSclyVZ5mQBr
/3iENm0+p6G4L2krbgHE9Go1QXHb07WittN2uGfp2WlevgFGAfy8RMAr3AQQ
r5Kg2x0obpTGuJrid74rN4BeSJwJ/7qUoqHxIv//ytOpenl6iCpPazSd6pTC
QtcPoexZ0sUVgesUEV/ms4IWtq0xbUSvhNyAIWb0Bg0lTB6fYaylpTFDz1Sz
VujWaDgVfh54iWsN+T7PJrjT9T30ZrXUg2w7XrIbQ3Hibr6ByzgTd9+wT8lY
KYrNjHXC/Exw3RIBDc03KQyY8WRmrMxZFto9pJoRb+JKz70CW7YdMKC3L3dN
b2vOg+i3sFisJhIMtZKKa9Q8G9ElfD9zr3Q3x/d69msFpd8VbpSZOxkC9Nh+
xR6fNVcdfJIOXF077Q7fXkhXGTcC2etSat5BAL1V1SXx06ZmaS7EsgxmPTWH
rh8qAxOJdGXQRhL8e+TgL/dbTQm4HcTaAVFscoKTQ804DhlGvhw6zGRaRd+V
vl9vIsRaaVu71/SrKk+ojd0LrcmH6IJpuuQy4whbdJlG4JxK4IyJOWmfbdod
rqTdrZx279+wm2U2HXqK5d+pSwvANyhX7sWUBCilp9J8srCVi5WAzbQ7PY8t
tPTySzULaxyhyOiCsPY1KKwt7LMaza1F5yRhTY6p8uqOPl1GMgpnbnevZ7+v
8MCv2kTyJLUNPtBv9bv0iqavqo6ruhsF6aaXni90c3outpKec+xNz8qZkM5K
X7u2kn17IQN8pz8np1WUwlXBmzkhZXFf4e9K06mdJJpglgCY/AQ5hCmCHSDs
C8Rx+BfsfRHznaEp46iNeRB1QdvcZfqvtjC4UnQMikP2sEW1OSfoIky6oSvL
k22bTj/MNk4/JMl2W79dYRtb1IU4S52xohQWr0szjzRyqSmxVDXJLhFINs42
BkcWUixLEjrlISS0hyCh9woS2p45EEWLijDVJa4zqm++PX7/AT+DOH6OvdL7
Vr6nGcs0I7shUis8rYOZ1bSapDazIXtnvwV1RTEqH0YIIKNpufWnTsvDbadl
1SBIa/IyK90pZfJtRuhLSbwYuXMV3tqdauakFYHrqWI2yqM5gBG+FLwR+Aw3
QSR5okaww6A2+aCNIRB18ToZ7rVEQEmkG5zPPEF3ddH71PL82Jo9GchSYuY8
O80oz3aVefb+DTsVQS8vAdKo/yAfXbElH8JiKmjAa/HsGqmDQ9VWLdW1EMgS
z8a5Rolnx/LbICKFwnVQd8po8m9aYcMLExYbeYVEZHYJxD25bN7JmkxYMna+
X+dJcUz1s4czfQvHti1YfynBetCBBX2bG05Hwj/ly1Mq9XM0hpNFoxMvk+rl
6KafOkdbX68gdZOy3WDabSl4kQ02fvnzvBoy9Um4kHxAkc/yD0yn5WYNNm2d
Tjua0Twc30qwbFpJ0RxNnpgRDPXBc9U+mHoQxFyxvlIeDA2px/jCzBB2+UPB
SbY4U0I1TdFedPFte6anBd2+YpBuH9i026J1Q+0Gi6u9aFWX0G3/kCLz6JNI
t7l6llo31HUsXAkUk1wPB4+Eyeo5WVDPMVrqOdqgetYZANFsR1GZY7s9TqF6
9gqLyDTKr3lefuZezQEB0m4UyQ5WQU3dsZ0siRdvYT0p+s2kMsaJih661X/f
QjhXnUqCS90Scdp6+r7cXel71U+evvWaS683pVNlLKXc0CXvsSXuAij85/Xr
Is92lMBNoe2A0Cbcm4J7pAliyROHzyjy+SJnaM4UbTLlPMi/rmbDueIQetHa
zdJIup+Pgvx0KFuzWUhAXhBAt1rr8vCMrvFwjy17LGYmtOwkCgghzc1YUUJ5
OOvNYtpTKvlIPNxaKQtTt1SsVpayrrGm0ofQ1LpzIDZaUphFVkj+XUlQVnUB
NfTwLmHcpSrD25m1k0kp2wex2m0YnyxOgaDObi5ODVDm8q+6kMuxp1Ex7/9T
53J7ViW9qpvLrzdnsoYQnn/Dlr5vQWkD5vfvDgrugMAmP2wB2uRr8aNMpqWQ
MIq9NUNhnTGa8e2lHChL9IJLBeHs4qbyGLhZFsUhHi5APMiSoecgxL0eiqEf
2rZPWdlVyVKpd0MLDjNXlsKyjacgr7BBZugt3DEWF2NXadSzElIbwCcwTaO1
1IbUjjIgtXVWLoirRyV3X92PMmdF7JMm4/h+lr2CtBzS44O9ClJ8GYzrWA4P
7E6QDxVBjsncNc57NSHtERr9jYIG7FCbOf/vkrm8lidLJ5nLSxmUkyLSgOf1
llOsc4wn3/ClH6gY7lEIXvSOXfa2Fh93FPk4+RpBtmkFTdkE2RTXCV+aIJE8
SV+yP64gzoceQzfO5kJ7XSo05oTAV9XJ7GK2ygS21J5iPJpeSIGbslkq1+Lr
vjb4+gGbfP3Ybg8zt9VTrBZ8nVlPEh7GzUmGiPgaVu2ifP1buQsT07RetQtf
s+wuVanwVH0V7qNW4X76Ktye2RD8N81eU1YyZlYszncYpOcM2lxxV+ysyowP
IE/wrNqcYOf7TYFdRLdW67htsEtZPTotzE01aFgu3IuYZ2H42JfVpfbG7szq
OvOeNrK6NDhSFbeXZmcpC0cs+1CVBo9DyOJ3RWZujJj30iTmHOXkPQTjpsUU
5cmj2YnQkh8NLXmRkBvrDVdL4+kSbXp1RU0y24VfhWiPh1vlsRTt9CoLTeIe
CB35jLh35PjYQdzdNIl7jMc2cDveqFg6ZCa5yjqwQslusiTuOw9kKYg7qvPg
sGQoLDkvF8MquTrPLboC7gf99LtMFepce8bTbnVuz7DIlrqSmctODR0xxacn
ItZgPwqDuRNHLrLznQTi/g5VmcmheM1GXigCnT8+xnW53YCfqAY8z/ArSYYP
J6AvYTJWK8NblGuE0tmFMMsMf1Ynw9frZfjl3ZThtSdJghf9nSGW5+PI5QMU
KMGceHLRe11yyiVvTUC6SNOlVJ40mgE9ZTR7a3tlKt3JSzdsN2Sxe2oo4NPo
5nwEPEvx8UKKj2IpXqbxUooPVFlyWjT+kFUajzX93UcqFenQWnVJXSmW29LW
VlnQ+FZO42n6LjwrV8yyC9rYdrHSDkXFzFrTqTz+aUCpu+sq9UaF+7B0U6n7
5PlRdFTT4JJCBvJHBJBTio553KsgPQzSE8PxV5rTqS73YS/XMZh7OllDt2af
mtb+FXVby6ckpfeLTgt3g+uEPVrU024Uqboeu5LSDxJ072e3tD5USje2wuFO
pDOU7PgrrX0JLBuiVnzErnYSWG8o4fAPRdB76hF0B4S06SMK6tQxDP/tVens
wrimXALwbHodxtcNBNy4Rr8uja3St+DvUkYXrbgQfuONFf4uWItXdfg7lvl3
HSql2c/DSvZTc12L0vF6JX/HKtoFoYpGsrkD7yP19o2kRTRpUlJdRFNI9Bz9
6U/DEl3eisg6W9bsrChZuDZ96EQXf0zcBi/WeYa9Qui5pxnWdSQhN/kgvJpC
cb1RXgSmcXxITpcSuY+Ztcu4ruhOXH+Cvackcy9vbiiIMJtwX1V2IXOLTS//
6cxt3uJwJ+YtiJz7O2qIi3jGbNyQfFzBby9n+0Lo9KdFPAtc3Enk4mYjrace
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
6ixWIUTTa/s8pbl51L6mktuu49p+Z1Hd1u9E0SRdgOayyED5NrJs2V7VSbPI
Zs+o+KLHbIqx2eEnMdVyqvc66XW9S9rbzpJzfR/gDDgYfwgjsmAWXL/A26Nj
OeeGxHyLOPsh3o6TcDao616jxDaYpVhS1XfzBDHDTXpgR0lTfZXzZEuVH4WQ
EZad1VQKYgr2QCnkBj0VaSGIss/R0GE6M6YidDArN0t5lDutOaQyK438fHqO
TF02xl2P+8Nd9L0UWbYJZHbEKTJ1QS3pPnMDL4ENo9dg7hSM1xykGFNx5jun
9fjBaS0nfu/cZBlfL+LtWJ3hNKkOq56ap5yIEbgclMMagL9crfVVwGGWptR6
Lgb7ACkHYsfOUnSsTcfG8PQpzlppNCqoJe/3t6PLbVYKvtKUSxYv3e03O33X
kJ0AQXPw6CZTw+rI6bM3cIgfTKuEQa1wrWSGqL8+etY6hazl3JyYb9UHY8OP
Ic12x8Qc5qjJXqiRAUq8AMltU0QweF0AIgEkXovALId7hsO/dgIDBDEbZ+eV
sjzcFMEQ9DggCBnJqFvqg7O1w+dqsslPp2SMMvP8T46bbjInEo7T9PPrSc+5
mzjgV8GPxEhDI2Sk074xknPzVsvY+T9uZk5u0q7WVf6T0MhQOFjEDnwcWDfS
VFcJ/z8i7OhrAww7Dpl9JIPGffRD6KNfO1lD7roaNxclh8fNnx1JDUsNg4xv
LGNjNPOsRDMnDGkG4PI2HFE9CMteF7s0+/Xb/yDDMnyAfm6MEv24PNKPM2G7
VeP1I2a8VNR4qn+CncDLQ5mkUvVAgZQCkAyAhRONH0DxfCnXIFNWCRbe9HBN
fvrrCUtegUeLZs7dMUrsEejGHm9H9tDn3o7qtX0TIXfm/C1y691/kJv0YNDg
sLhlwCrDZqxy3ydWUWHxRxUWvX8ASFhlkh8zTEgOjT7RKVkhqrnssmTeMaEU
FwELMLS/vgqH9lcblXUccllnVGrfGIbxrkwgDx6VRbJ8OzNC4rHDU6fHW2CL
5y2xBQUImRt1hsyk75k8p4Q4DzSTy1d/T269J0FFhsujZxFn4o5CqzD5DwUm
wlk5q93cCTARtEFhwl1Z36kDSAigAvRBwYIXDbL5kJccCT7cbcwY5uRS4kj1
hywYVzwrAaFbB4RefG7qgiOUM46SeVEnyNsRJ0j4+mOk8+RFcvu9B/8UDqk+
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\
\>", "ImageResolution" -> \
120.],ExpressionUUID->"4cb8b97b-3515-42c0-8353-6e79619405d4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The confusion matrix ", "Subsubsection",
 CellChangeTimes->{
  3.7982872628490257`*^9},ExpressionUUID->"e45e9341-626a-4f8d-a32c-\
268fd6ab1424"],

Cell["Let\[CloseCurlyQuote]s look at the desired values:", "Text",
 CellChangeTimes->{{3.798314465137385*^9, 
  3.798314466742836*^9}},ExpressionUUID->"ce66b628-8f91-40e1-8880-\
881c031a6c95"],

Cell[CellGroupData[{

Cell[BoxData["yTest"], "Input",
 CellChangeTimes->{{3.7983144941694207`*^9, 3.7983144983275948`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"cf1a7e3d-0ba3-4369-b73c-689be788fab1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.798314499406479*^9, 3.798553957550289*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"535cc30f-5e90-4fb5-944a-943c8da8e1bb"]
}, Open  ]],

Cell["and actual ones:", "Text",
 CellChangeTimes->{{3.798314484047187*^9, 
  3.798314484905753*^9}},ExpressionUUID->"7fc6a27e-26f2-40c3-b61e-\
9382a611def6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Round", "[", 
  RowBox[{"net2", "[", "xTest", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7983145056116714`*^9, 3.798314517962767*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"0dfe1d21-e74e-4773-8080-4d1e20110261"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7983145097180753`*^9, 3.798314518353734*^9}, 
   3.7985539603627386`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"22ee34f3-f481-4feb-89c6-0c173209f8f0"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s look at that {0, 1, -1} value", "Text",
 CellChangeTimes->{{3.798555995848605*^9, 
  3.79855601094221*^9}},ExpressionUUID->"37b6c4b1-3908-4c94-8fe9-\
d7ca299a09c4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"softmax", "[", 
  RowBox[{
   RowBox[{"net2", "[", "xTest", "]"}], "[", 
   RowBox[{"[", "16", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.798556017777918*^9, 3.7985560251043634`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"ce163b16-2ba1-4c5d-aebc-4b6b831fe7fc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.23183927963784365`", ",", "0.6301726492613912`", ",", 
   "0.13798807110076525`"}], "}"}]], "Output",
 CellChangeTimes->{3.798556025628004*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"51ec3657-df70-4798-beaa-09aecfc8871c"]
}, Open  ]],

Cell["This also decreases our testing error.", "Text",
 CellChangeTimes->{{3.7985560664887714`*^9, 
  3.7985560792854977`*^9}},ExpressionUUID->"d34a2a21-4a20-45ca-94eb-\
95351b77e85f"],

Cell["\<\
Let\[CloseCurlyQuote]s look at the difference between desired and actual \
values:\
\>", "Text",
 CellChangeTimes->{{3.7982872997961507`*^9, 
  3.798287317855825*^9}},ExpressionUUID->"6e30c888-5b2d-4106-9787-\
5e735c482a99"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"yTest", " ", "-", " ", 
  RowBox[{"Round", "[", 
   RowBox[{"net2", "[", "xTest", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7982873236374073`*^9, 3.7982873238907213`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"ad6bb307-5548-4b19-abbf-39611519c887"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7982873255352707`*^9, 3.7983145926921287`*^9, 
  3.798553963692827*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"307c6d12-ec65-4992-8722-1565c7b0c178"]
}, Open  ]],

Cell["\<\
First, we will calculate the number of correct predictions for each class:

setosa classified as setosa: 15
versicolor classified as versicolor: 14
virginica classified as virginica: 15

Now, we can calculate the number of incorrect predictions for each class:

setosa classified as versicolor: 0
setosa classified as virginica: 0

versicolor classified as  setosa: 0
versicolor classified as  virginica: 1

virginica classified as setosa: 0
virginica classified as versicolor: 0

So now we can plot a matrix:\
\>", "Text",
 CellChangeTimes->{{3.798287364115452*^9, 3.798287381692594*^9}, {
  3.7982876387967257`*^9, 3.798287639999477*^9}, {3.798553997660844*^9, 
  3.798554000071395*^9}},ExpressionUUID->"c98677e2-8463-4aa4-b58f-\
08defa3e6874"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"matrix", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"15", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "14", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "15"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"keys", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<setosa\>\"", ",", "\"\<versicolor\>\"", ",", "\"\<virginica\>\""}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{"MatrixPlot", "[", 
  RowBox[{"matrix", ",", 
   RowBox[{"ColorRules", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", "\[Rule]", "White"}], "}"}]}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<actual\>\"", ",", "\"\<predicted\>\""}], "}"}]}], ",", 
   RowBox[{"FrameTicks", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          "keys"}], "]"}], ",", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          RowBox[{"Total", "@", 
           RowBox[{"Transpose", "@", "matrix"}]}]}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          RowBox[{"Total", "[", "matrix", "]"}]}], "]"}], ",", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          "keys"}], "]"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"#", ",", "16"}], "]"}], ",", 
         RowBox[{"#2", "-", 
          RowBox[{"1", "/", "2"}]}]}], "]"}], "&"}], ",", 
      RowBox[{"Transpose", "@", 
       RowBox[{"Reverse", "@", "matrix"}]}], ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}]}], "]"}]}], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"6a949321-e178-41f0-b1e8-009869b26c60"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{1., 1., 1.}, {1., 1., 1.}, {0.857359, 0.131106, 0.132128}}, {{
   1., 1., 1.}, {0.8929546, 0.38966159999999994`, 0.1794008}, {0.6660832, 
   0.7430418, 0.32293540000000004`}}, {{0.857359, 0.131106, 0.132128}, {1., 
   1., 1.}, {1., 1., 1.}}}, {{0, 0}, {3, 3}}, {0, 1}],
  Epilog->{{
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[1, 2], 
        Rational[1, 2]}, {0.5, 0.5}]], 
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[1, 2], 
        Rational[3, 2]}, {0.5, 1.5}]], 
     InsetBox[
      FormBox[
       StyleBox["15", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[1, 2], 
        Rational[5, 2]}, {0.5, 2.5}]]}, {
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[3, 2], 
        Rational[1, 2]}, {1.5, 0.5}]], 
     InsetBox[
      FormBox[
       StyleBox["14", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[3, 2], 
        Rational[3, 2]}, {1.5, 1.5}]], 
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[3, 2], 
        Rational[5, 2]}, {1.5, 2.5}]]}, {
     InsetBox[
      FormBox[
       StyleBox["15", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[5, 2], 
        Rational[1, 2]}, {2.5, 0.5}]], 
     InsetBox[
      FormBox[
       StyleBox["1", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[5, 2], 
        Rational[3, 2]}, {2.5, 1.5}]], 
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[5, 2], 
        Rational[5, 2]}, {2.5, 2.5}]]}},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted\"", TraditionalForm], 
    FormBox["\"actual\"", TraditionalForm]},
  FrameTicks->{{{{2.5, 
       FormBox["\"setosa\"", TraditionalForm]}, {1.5, 
       FormBox["\"versicolor\"", TraditionalForm]}, {0.5, 
       FormBox["\"virginica\"", TraditionalForm]}}, {{2.5, 
       FormBox["15", TraditionalForm]}, {1.5, 
       FormBox["15", TraditionalForm]}, {0.5, 
       FormBox["15", TraditionalForm]}}}, {{{0.5, 
       FormBox["15", TraditionalForm]}, {1.5, 
       FormBox["14", TraditionalForm]}, {2.5, 
       FormBox["16", TraditionalForm]}}, {{0.5, 
       FormBox["\"setosa\"", TraditionalForm]}, {1.5, 
       FormBox["\"versicolor\"", TraditionalForm]}, {2.5, 
       FormBox["\"virginica\"", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]}]], "Output",
 CellChangeTimes->{3.798554007923378*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"8c5086a8-ab6c-4901-8d6f-1040f495a24a"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7985557190259714`*^9, 
  3.7985557200980964`*^9}},ExpressionUUID->"2d1c38e9-f5d6-4dcd-bd56-\
6c2115e28211"],

Cell["\<\
As we can see our second model is a bit overfitted, because this time we got \
pretty small training error, but testing error remained the same.\
\>", "Text",
 CellChangeTimes->{{3.7985557246678686`*^9, 3.798555747864787*^9}, {
  3.798556090884454*^9, 
  3.798556122314309*^9}},ExpressionUUID->"9b68a73e-ecf7-43e7-b0aa-\
38083b5a3eb9"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Initializing of our third fnn(Neuron \[Rule] \
Tanh,OutputNonlinearity\[Rule]SaturatedLinear)\
\>", "Section",
 CellChangeTimes->{{3.7982877162960052`*^9, 3.798287722676928*^9}, 
   3.7985561854518805`*^9},ExpressionUUID->"cb7b4515-30bd-4b49-8625-\
e1f443ddb595"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net3", "=", 
   RowBox[{"InitializeFeedForwardNet", "[", 
    RowBox[{"xTrain", ",", "yTrain", ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "4"}], "}"}], ",", 
     RowBox[{"Neuron", " ", "\[Rule]", " ", "Tanh"}], ",", 
     RowBox[{"OutputNonlinearity", "\[Rule]", "SaturatedLinear"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.798287871253987*^9, 3.798287896514711*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"c6abe38d-64c6-4980-b6ec-fd212960fc31"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"net3", ",", "fitrecord"}], "}"}], "=", 
   RowBox[{"NeuralFit", "[", 
    RowBox[{"net3", ",", "xTrain", ",", "yTrain", ",", "60"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7982879025476065`*^9, 3.798287911153578*^9}, 
   3.7985554303434114`*^9},
 CellLabel->"In[34]:=",ExpressionUUID->"fab795da-1bd0-4434-b5b7-93c250ddbb3e"],

Cell[CellGroupData[{

Cell["Graph of the global error", "Subsection",
 CellChangeTimes->{
  3.798288277011907*^9},ExpressionUUID->"1c64a800-5615-4251-9863-\
645cedd6ba1e"],

Cell[BoxData[
 GraphicsBox[{{}, {{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJw1yQ0sFHAYx/GbmPOS91SGjiGv5+WOw8X9nHM4L6sui5WXUWu0ZdPaYl6O
YZRVXnKsq5gybHlLYRXaZJYpSoteTAwrWqmE1axaz//Zfnv22dcuNfPwSS0O
hxP0d/8+u9VCrmW+x5Tkv75KVrxadW6OviBzYCCsVJ+amCBzUSYtCXqgN0Y2
AX++Vi+raIRsgdq6DNHz6sfkPdiqLWpL0zwkW2ON653gM91P5qFha+fB7Y4+
sj04TaOnecu9ZAe0fHDavZzJ7IQzjsPqyX3MzvBWlCpyBu+TXbGwZWxxxZ3Z
HZdt+OjbuEfm46dDeXXqW2YvqPySF3d1M3vjex5PbJvM7AMDW1WWiQGzACL+
q1jd0R6yEI+Uv3ou9DL7IjFbbdfRxeyH3Isx2ZttzCJMWQXOWl1n9kdiyPiG
oYo5AJY52/5DEcyBSDCNKnBdu0sWY2zm4yL/KfMBDAmivggKmIPA27RPaT/C
HIyrFUrVu2BmCeY34vd/EzIDg63jgY0WZBWQIxyfa5zpph4CM98VXbmSrArB
icb+s2GfO6lLsa4cDWhv7qAuhVG95JIs9w71UOS2h/8otmmhHoqlo0mFczVN
1GV4X3a8IlTYSF2GdmOX7cBODfUwuIm15rQ1auph0NlbJ7a+VkldjnLP/Njm
ngrqcsS7uXdl5JVRD8dr/bZPSnEJ9XAsRKyZawRF1CMwkLbeWZ6eRz0CbwSl
/atL56lHQmSY4+h5K516JOLM/C1vDKZQV2CHxtySWxNHXYGX9X2THvmHqEeh
yt7o2WRzDPUonOsWBZvKFdSjoX97wKdqNpx6NJKGg3836MqpxyCJo//Do1JG
PQYjguniJ4mh1GMxm+ys7XJMKvkDnPoHBA==
       "]]}}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {
     FormBox["\"Iterations\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"RMSE\"", TraditionalForm],
  PlotRange->{{0, 60.}, {0, 0.31527664329226357`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Print",
 CellChangeTimes->{3.7982880052325535`*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"0c32a358-f00d-41a7-a6ea-19c94519bee2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training and testing error", "Subsection",
 CellChangeTimes->{
  3.798288290181662*^9},ExpressionUUID->"d01bee82-cf10-4337-922c-\
dfed780483b8"],

Cell["\<\
As we can see from the graph of the global error - training error is really \
close to zero
Let\[CloseCurlyQuote]s calculate testing error\
\>", "Text",
 CellChangeTimes->{{3.7985540645594254`*^9, 
  3.7985540756050444`*^9}},ExpressionUUID->"aa3a0caa-0f6c-43c3-a7f1-\
54d9dc05678a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"100", " ", "-", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"Count", "[", 
      RowBox[{
       RowBox[{"Abs", "[", 
        RowBox[{"yTest", " ", "-", " ", 
         RowBox[{"Round", "[", 
          RowBox[{"net3", "[", "xTest", "]"}], "]"}]}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}]}], "]"}], " ", "/",
      " ", 
     RowBox[{"Length", "[", "testData", "]"}]}], " ", "*", " ", "100.0"}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.798288300805233*^9, 3.7982883012141848`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"5b154e4d-4590-4f89-90a2-f9c0731bfb54"],

Cell[BoxData["2.2222222222222285`"], "Output",
 CellChangeTimes->{3.798288303529977*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"75b80ea7-864a-4c26-987d-c2cfb4d47348"]
}, Open  ]],

Cell["Still our model may suffer from overfitting.", "Text",
 CellChangeTimes->{{3.7985540829983587`*^9, 
  3.798554096307782*^9}},ExpressionUUID->"62958416-da99-4e3c-baa1-\
312a97200d4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The distribution via classes", "Subsection",
 CellChangeTimes->{
  3.7982883310915856`*^9},ExpressionUUID->"500cc7a4-8ee3-4701-bb95-\
9491b5923754"],

Cell["\<\
We can also look at the distribution via classes on each 20 iterations.\
\>", "Text",
 CellChangeTimes->{
  3.79855548608669*^9},ExpressionUUID->"339450f8-829e-4d72-8fff-aa57eef6eba4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetPlot", "[", 
  RowBox[{"fitrecord", ",", "xTrain", ",", "yTrain", ",", 
   RowBox[{"DataFormat", "\[Rule]", "BarChart"}], ",", 
   RowBox[{"OutputNonlinearity", "\[Rule]", "UnitStep"}], ",", 
   RowBox[{"Intervals", "\[Rule]", "20"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.798555477482713*^9, 3.79855549029347*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"4553c4ee-56d9-4440-b9e3-7657d9f52aea"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{70.85255967159858, 
                 116.66072926437043`}, {-107.11765448609371`, \
-26.631860225597066`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 35.}, {1.091, 0., 35.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 35.}, {2.091, 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{98.08173517705494, 
                 141.23296336963034`}, {-124.81674066284997`, \
-46.54313568443331}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    0.}, {2.1820000000000004`, 0., 0.}, {3.1820000000000004`, 
                    0., 0.}, {3.1820000000000004`, 1., 0.}, {
                    3.1820000000000004`, 1., 0.}, {3.1820000000000004`, 0., 
                    0.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{119.02411271572642`, 
                 154.1252346520568}, {-92.76258964996876, \
-64.65825965707945}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 0]& ,
              TagBoxNote->"0"],
             StyleBox["0", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[0, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 10.}, {0., 1.2, 10.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 10.}, {1., 1.2, 10.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{56.02152542179063, 
                 95.395034489866}, {-86.58529470867953, -43.54753623625628}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 10]& ,
              TagBoxNote->"10"],
             StyleBox["10", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[10, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{77.40048396726694, 
                 
                 119.00083576669584`}, {-138.38156212218334`, \
-61.927710973658066`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    35.}, {2.1820000000000004`, 1.2, 35.}, {
                    3.1820000000000004`, 1.2, 0.}, {3.1820000000000004`, 2.2, 
                    0.}, {3.1820000000000004`, 2.2, 35.}, {
                    3.1820000000000004`, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{101.4416961894606, 
                 141.25213457676068`}, {-153.07075520617443`, \
-78.71060312550952}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    13.}, {0., 2.4000000000000004`, 13.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 13.}, {1., 2.4000000000000004`, 
                    13.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{38.34310433355315, 
                 78.03366649908433}, {-104.08486246156498`, \
-59.15800168194585}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 13]& ,
              TagBoxNote->"13"],
             StyleBox["13", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[13, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 28.}, {1.091, 2.4000000000000004`, 
                    28.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    28.}, {2.091, 2.4000000000000004`, 28.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{59.77946438416488, 
                 
                 98.96550011517694}, {-140.04086531329574`, \
-76.17714855186787}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 28]& ,
              TagBoxNote->"28"],
             StyleBox["28", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[28, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{82.80722395325895, 
                 120.93718650296022`}, {-164.423037471903, \
-91.76956605581243}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 0\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -196.56}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True], InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{70.85255967159858, 
                 116.66072926437043`}, {-107.11765448609371`, \
-26.631860225597066`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 4.}, {1.091, 0., 4.}, {2.091, 0., 0.}, {2.091, 
                    1., 0.}, {2.091, 1., 4.}, {2.091, 0., 4.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{98.22364704167067, 
                 135.64941957976936`}, {-81.80056629797546, \
-46.54313568443331}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 4]& ,
              TagBoxNote->"4"],
             StyleBox["4", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[4, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    24.}, {2.1820000000000004`, 0., 24.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 24.}, {3.1820000000000004`,
                     0., 24.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{119.02411271572642`, 
                 160.0970238542771}, {-124.04458876035, -64.65825965707945}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 24]& ,
              TagBoxNote->"24"],
             StyleBox["24", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[24, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 7.}, {0., 1.2, 7.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 7.}, {1., 1.2, 7.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{56.6195652237291, 
                 95.395034489866}, {-82.84601314862213, -43.54753623625628}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 7]& ,
              TagBoxNote->"7"],
             StyleBox["7", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[7, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{77.40048396726694, 
                 119.00083576669584`}, {-138.38156212218334`, \
-61.927710973658066`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    5.}, {2.1820000000000004`, 1.2, 5.}, {3.1820000000000004`,
                     1.2, 0.}, {3.1820000000000004`, 2.2, 0.}, {
                    3.1820000000000004`, 2.2, 5.}, {3.1820000000000004`, 1.2, 
                    5.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{101.4416961894606, 
                 136.24871484179536`}, {-111.03446931498497`, \
-78.71060312550952}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 5]& ,
              TagBoxNote->"5"],
             StyleBox["5", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[5, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    18.}, {0., 2.4000000000000004`, 18.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 18.}, {1., 2.4000000000000004`, 
                    18.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{36.92187365678095, 
                 78.03366649908433}, {-110.77445255351066`, \
-59.15800168194585}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 18]& ,
              TagBoxNote->"18"],
             StyleBox["18", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[18, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 19.}, {1.091, 2.4000000000000004`, 
                    19.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    19.}, {2.091, 2.4000000000000004`, 19.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{61.366135576504156`, 
                 98.96550011517694}, {-127.08753711013799`, \
-76.17714855186787}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 19]& ,
              TagBoxNote->"19"],
             StyleBox["19", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[19, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{82.80722395325895, 
                 120.93718650296022`}, {-164.423037471903, \
-91.76956605581243}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 20\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -589.6800000000001}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True], InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{70.85255967159858, 
                 116.66072926437043`}, {-107.11765448609376`, \
-26.631860225597066`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 9.}, {1.091, 0., 9.}, {2.091, 0., 0.}, {2.091, 
                    1., 0.}, {2.091, 1., 9.}, {2.091, 0., 9.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{98.20351743589805, 
                 136.4425166512426}, {-87.93721596127384, \
-46.54313568443331}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 9]& ,
              TagBoxNote->"9"],
             StyleBox["9", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[9, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    23.}, {2.1820000000000004`, 0., 23.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 23.}, {3.1820000000000004`,
                     0., 23.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{119.02411271572642`, 
                 159.82147339183365`}, {-122.60573884003325`, \
-64.65825965707947}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 23]& ,
              TagBoxNote->"23"],
             StyleBox["23", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[23, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 8.}, {0., 1.2, 8.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 8.}, {1., 1.2, 8.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{56.42207251190775, 
                 95.395034489866}, {-84.08133492998313, -43.54753623625629}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 8]& ,
              TagBoxNote->"8"],
             StyleBox["8", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[8, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{77.40048396726694, 
                 119.00083576669584`}, {-138.38156212218337`, \
-61.92771097365808}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    5.}, {2.1820000000000004`, 1.2, 5.}, {3.1820000000000004`,
                     1.2, 0.}, {3.1820000000000004`, 2.2, 0.}, {
                    3.1820000000000004`, 2.2, 5.}, {3.1820000000000004`, 1.2, 
                    5.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{101.4416961894606, 
                 136.2487148417954}, {-111.034469314985, -78.71060312550955}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 5]& ,
              TagBoxNote->"5"],
             StyleBox["5", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[5, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    11.}, {0., 2.4000000000000004`, 11.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 11.}, {1., 2.4000000000000004`, 
                    11.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{38.89356713849669, 
                 78.03366649908432}, {-101.4904177039797, \
-59.15800168194586}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 11]& ,
              TagBoxNote->"11"],
             StyleBox["11", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[11, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 20.}, {1.091, 2.4000000000000004`, 
                    20.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    20.}, {2.091, 2.4000000000000004`, 20.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{61.19619209805214, 
                 98.96550011517694}, {-128.47703847335112`, \
-76.17714855186789}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 20]& ,
              TagBoxNote->"20"],
             StyleBox["20", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[20, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{82.80722395325895, 
                 120.93718650296022`}, {-164.42303747190303`, \
-91.76956605581246}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 0.}],
             {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 40\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -982.8000000000001}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True], InsetBox[
     Graphics3DBox[{
       StyleBox[{
         {EdgeForm[GrayLevel[0.85]], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{0.985, 0.98, 0.02}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0.985, 0.02, 0.02}], 
            Scaled[{1, 0, 0}], Scaled[{0, 0, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.985, 0.02, 0.02}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.02, 0.02}], Scaled[{0, 0, 0}], 
            Scaled[{0, 0.99999, 0}], Scaled[{0.015, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0, 0}], Scaled[{1, 0, 0}], Scaled[{1, 1, 0}], 
            Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}, 
         {Opacity[0], EdgeForm[None], 
          CuboidBox[{-0.15910000000000002`, -0.8500000000000001, 0}, {
           3.3411000000000004`, 4.25, 0.024}]}, 
         {EdgeForm[None], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{0.985, 0.98, 0.98}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0.985, 0.98, 0.02}], 
            Scaled[{1, 1, 0}], Scaled[{0, 0.99999, 0}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{0.985, 0.98, 0.02}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.98}], Scaled[{0.985, 0.98, 0.98}], 
            Scaled[{1, 1, 1}], Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0.015, 0.98, 0.02}], Scaled[{0, 0.99999, 0}], 
            Scaled[{0, 1, 1}], Scaled[{0.015, 0.98, 0.98}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}], 
          Polygon3DBox[{
           Scaled[{0, 0.99999, 0}], Scaled[{1, 1, 0}], Scaled[{1, 1, 1}], 
            Scaled[{0, 1, 1}]},
           VertexColors->{
             Directive[
              Opacity[0.1], 
              RGBColor[0.928864, 0.6119472, 0.1262672]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.952576, 0.7412981333333333, 0.4175114666666666]], 
             Directive[
              Opacity[0.1], 
              RGBColor[0.968384, 0.8275320888888889, 0.611674311111111]], 
             Directive[
              Opacity[0.1], 
              GrayLevel[1]]}]}},
        StripOnInput->False,
        Lighting->{{"Ambient", 
           GrayLevel[1]}}], 
       {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
        Opacity[0.1]}], {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 0., 0.}, {0., 1., 0.}, {0., 1., 
                    35.}, {0., 0., 35.}, {1., 0., 0.}, {1., 1., 0.}, {1., 1., 
                    35.}, {1., 0., 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{70.85255967159858, 
                 116.66072926437043`}, {-107.11765448609376`, \
-26.631860225597066`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   GraphicsComplex3DBox[{{1.091, 0., 0.}, {1.091, 1., 0.}, {
                    1.091, 1., 11.}, {1.091, 0., 11.}, {2.091, 0., 0.}, {
                    2.091, 1., 0.}, {2.091, 1., 11.}, {2.091, 0., 11.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                ImageSizeCache->{{98.19520180587719, 
                 136.77004282953027`}, {-90.46889959844312, \
-46.54313568443331}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 11]& ,
              TagBoxNote->"11"],
             StyleBox["11", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[11, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 0., 0.}, {
                    2.1820000000000004`, 1., 0.}, {2.1820000000000004`, 1., 
                    15.}, {2.1820000000000004`, 0., 15.}, {
                    3.1820000000000004`, 0., 0.}, {3.1820000000000004`, 1., 
                    0.}, {3.1820000000000004`, 1., 15.}, {3.1820000000000004`,
                     0., 15.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{119.02411271572642`, 
                 157.70638292596317`}, {-111.54663244261887`, \
-64.65825965707947}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 15]& ,
              TagBoxNote->"15"],
             StyleBox["15", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[15, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 1.2, 0.}, {0., 2.2, 0.}, {0., 
                    2.2, 10.}, {0., 1.2, 10.}, {1., 1.2, 0.}, {1., 2.2, 0.}, {
                    1., 2.2, 10.}, {1., 1.2, 10.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{56.021525421790614`, 
                 95.395034489866}, {-86.58529470867956, -43.54753623625629}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 10]& ,
              TagBoxNote->"10"],
             StyleBox["10", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[10, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 1.2, 0.}, {1.091, 2.2, 0.}, {
                    1.091, 2.2, 35.}, {1.091, 1.2, 35.}, {2.091, 1.2, 0.}, {
                    2.091, 2.2, 0.}, {2.091, 2.2, 35.}, {2.091, 1.2, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{77.40048396726694, 
                 119.00083576669584`}, {-138.38156212218337`, \
-61.92771097365808}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 1.2, 0.}, {
                    2.1820000000000004`, 2.2, 0.}, {2.1820000000000004`, 2.2, 
                    5.}, {2.1820000000000004`, 1.2, 5.}, {3.1820000000000004`,
                     1.2, 0.}, {3.1820000000000004`, 2.2, 0.}, {
                    3.1820000000000004`, 2.2, 5.}, {3.1820000000000004`, 1.2, 
                    5.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{101.4416961894606, 
                 136.2487148417954}, {-111.034469314985, -78.71060312550955}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 5]& ,
              TagBoxNote->"5"],
             StyleBox["5", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[5, {"Graphics3DLabel"}], "Tooltip"]& ]}}}, {{}, {
          {RGBColor[0.97858, 0.678934, 0.157834], EdgeForm[{GrayLevel[0], 
           Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{0., 2.4000000000000004`, 0.}, {0., 
                    3.4000000000000004`, 0.}, {0., 3.4000000000000004`, 
                    15.}, {0., 2.4000000000000004`, 15.}, {1., 
                    2.4000000000000004`, 0.}, {1., 3.4000000000000004`, 0.}, {
                    1., 3.4000000000000004`, 15.}, {1., 2.4000000000000004`, 
                    15.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.48929, 0.339467, 0.078917], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.97858, 0.678934, 0.157834]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.97858, 0.678934, 0.157834], 
                    RGBColor[0.995716, 0.9357868, 0.8315668], 
                    RGBColor[0.995716, 0.9357868, 0.8315668]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{37.78248159300571, 
                 78.03366649908432}, {-106.72519950564417`, \
-59.15800168194586}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 15]& ,
              TagBoxNote->"15"],
             StyleBox["15", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[15, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.73, 0.344, 0.], EdgeForm[{GrayLevel[0], Opacity[0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{1.091, 2.4000000000000004`, 0.}, {
                    1.091, 3.4000000000000004`, 0.}, {1.091, 
                    3.4000000000000004`, 22.}, {1.091, 2.4000000000000004`, 
                    22.}, {2.091, 2.4000000000000004`, 0.}, {2.091, 
                    3.4000000000000004`, 0.}, {2.091, 3.4000000000000004`, 
                    22.}, {2.091, 2.4000000000000004`, 22.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.365, 0.172, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.73, 0.344, 0.]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.73, 0.344, 0.], 
                    RGBColor[0.946, 0.8688, 0.8], 
                    RGBColor[0.946, 0.8688, 0.8]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{60.85167011075176, 
                 98.96550011517694}, {-131.29238315433298`, \
-76.17714855186789}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 22]& ,
              TagBoxNote->"22"],
             StyleBox["22", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[22, {"Graphics3DLabel"}], "Tooltip"]& ]}, 
          {RGBColor[0.374, 0.444, 0.788663], EdgeForm[{GrayLevel[0], Opacity[
           0.1]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  Directive[
                   EdgeForm[
                    Directive[
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]]]], {}, {}], 
                 StyleBox[{
                   
                   GraphicsComplex3DBox[{{2.1820000000000004`, 
                    2.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 0.}, {2.1820000000000004`, 
                    3.4000000000000004`, 35.}, {2.1820000000000004`, 
                    2.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 0.}, {3.1820000000000004`, 
                    3.4000000000000004`, 35.}, {3.1820000000000004`, 
                    2.4000000000000004`, 35.}}, {
                    Polygon3DBox[{4, 3, 2, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315]}], 
                    Polygon3DBox[{5, 6, 7, 8}, VertexColors -> {
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.187, 0.222, 0.3943315], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{2, 3, 7, 6}, VertexColors -> {
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{5, 8, 4, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.374, 0.444, 0.788663]}], 
                    Polygon3DBox[{4, 8, 7, 3}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}], 
                    Polygon3DBox[{2, 6, 5, 1}, VertexColors -> {
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.374, 0.444, 0.788663], 
                    RGBColor[0.8748, 0.8888, 0.9577326], 
                    RGBColor[0.8748, 0.8888, 0.9577326]}]}]}, {
                  Lighting -> {{"Ambient", 
                    GrayLevel[1]}}}, StripOnInput -> False]},
                
                ImageSizeCache->{{82.80722395325895, 
                 120.93718650296022`}, {-164.42303747190303`, \
-91.76956605581246}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 35]& ,
              TagBoxNote->"35"],
             StyleBox["35", {"Graphics3DLabel"}, StripOnInput -> False]],
            Annotation[#, 
             Style[35, {"Graphics3DLabel"}], "Tooltip"]& ]}}}}, {{}, {}}, 
       GraphicsGroup3DBox[
        {GrayLevel[0], 
         StyleBox[{Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 0.5, 0.}], {0, 0}], 
           Text3DBox[
            StyleBox["1", "Graphics3DLabel",
             StripOnInput->False], Offset[{0, 0, 0}, {0.5, -0.3, 0.}], {
            0, -0.3}], Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {1.5910000000000002`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {2.6820000000000004`, -0.3, 0.}], {0, -0.3}], 
           Text3DBox[
            StyleBox["2", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 1.7000000000000002`, 
             0.}], {0, 0}], Text3DBox[
            StyleBox["3", "Graphics3DLabel",
             StripOnInput->False], 
            Offset[{0, 0, 0}, {3.5002000000000004`, 2.9000000000000004`, 
             0.}], {0, 0}]},
          Antialiasing->False]}]},
      Axes->{True, True, True},
      AxesEdge->{{-1, -1}, {1, -1}, {1, 1}},
      AxesLabel->{
        FormBox["\"Data\"", TraditionalForm], 
        FormBox["\"Model\"", TraditionalForm], 
        FormBox["\"Samples\"", TraditionalForm]},
      BoxRatios->
       NCache[{0.9358823529411764, 1, GoldenRatio^(-1)}, {
        0.9358823529411764, 1, 0.6180339887498948}],
      Boxed->False,
      FaceGrids->{{{0, 1, 0}, {None, Automatic}}, {{0, 0, -1}, {
         None, None}}, {{-1, 0, 0}, {None, None}}},
      FaceGridsStyle->Automatic,
      Lighting->"Neutral",
      Method->{"RotationControl" -> "Globe"},
      PlotLabel->FormBox["\"Iteration: 60\"", TraditionalForm],
      PlotRangePadding->Scaled[0.02],
      Ticks->{{{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.1820000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {1.0455, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {2.1365000000000003`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}}, {{0, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.005, 0}}, {0., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1., 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {1.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.2, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {2.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}, {3.4000000000000004`, 
          FormBox["\"\"", TraditionalForm], {0.01, 0}}}, Automatic},
      ViewPoint->{-1.3, -1.3, 2.}], {189., -1375.92}, 
     ImageScaled[{0.5, 0.5}], {360, 364},
     ContentSelectable->True]}, 
   StyleBox[{{}, {LineBox[{{0, 0}, {0, -393.12}}], 
      LineBox[{{0, -393.12}, {0, -786.24}}], 
      LineBox[{{0, -786.24}, {0, -1179.3600000000001`}}], 
      LineBox[{{0, -1179.3600000000001`}, {0, -1572.48}}], 
      LineBox[{{378., 0}, {378., -393.12}}], 
      LineBox[{{378., -393.12}, {378., -786.24}}], 
      LineBox[{{378., -786.24}, {378., -1179.3600000000001`}}], 
      LineBox[{{378., -1179.3600000000001`}, {378., -1572.48}}], 
      LineBox[{{0, 0}, {378., 0}}], LineBox[{{0, -393.12}, {378., -393.12}}], 
      LineBox[{{0, -786.24}, {378., -786.24}}], 
      LineBox[{{0, -1179.3600000000001`}, {378., -1179.3600000000001`}}], 
      LineBox[{{0, -1572.48}, {378., -1572.48}}]}},
    Antialiasing->False]},
  ImageSize->{216.86580051564633`, Automatic},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{3.798555492995457*^9},
 CellLabel->"Out[35]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
+A9QEo4COkUS3OIwSXRRJGGb2oUSWhfyQ9GfyM/7P6QSob/LqGTK9BL5HZNI
sUNfGSTyVtqcHmLaZZEIdhmWsuxjeBX/giJ6nztRFJ1E6wpz0Oq4OPJp4FKM
PQdCHNg09ghMFc+LyM6wWHEnLxWx/N6cHNiKko4G/CTLAap4YGj8mXb0hJep
LD4JDBv3hNOYb93nBrKY3IVs4bLYNu1B5Kofij4k/yofpMpkH8jkj9zg9G/D
X1NcZ3JxWw/qOj/O4nNwoC1evXcsGyJcpcils0fjPHZSZOGLqcYOSsWL6YUi
iIFFtlkQwyeEhIRYAs3NLVsI46v053zdVGg0v7CZI9zVqZLP7jN0ZoclLfz0
QacRnTyzMTCzk9SZ3cpndvuMB8lmeu6H4o/Jvw4MpjP8MZ3hj+ihn2FH/pih
RwzBicVTQT0EKX2nLJ49jq86VKb2dpemNhhTm3PNTe1C9gY1WGBT6wFza/GU
kBtgwenF7RUVFFuYuf0tTDQNne9vM3pTJpqbVqOJ3jnzQWKj537YQye6Yqhu
wj/g5P9HF3woQwdY+FBiwiE8h+eC7ZFe+t0FU84qUkbzLjpE5ynzPsfcvAcZ
zjugl84qzPspZd6tCqyZN9rbcLaVQM0gXBCzvVma7bjp6mwnzHqIbJ1GZ7yE
znblcDrrn6qzXi7POje5drP+ujPPNalhHTpAMK/yrIscbCdlwjs4mnC1JRcm
HLNQs81N+AKVQ+QJh/mGPB3MOLRNe+OUvyqDHCadOvt/oBHa/S5FaMLZF1MO
YN5KwQ1TvkOa8qTZD9FzdNr3DiP/qvpMmvoh9PiETr3gcRe8Hae+Z2+YYSgn
IJNLiVg4h4bUU5HBHSZkEGBOBvMNZTANJhhkwM/t8UUZ9BXzj3O/COe+jUBL
57fj3E/Vzn28NPfJcx7Ccz+U0rk/OEorgwomA40tdebfGHqcL0oe53Ni/hn0
UxH6QDap/e53OOUD7aZ8lrkpZ3fd7OBgygvFlON212zeXwfsz1o36RmcczOx
kuwbbtPPeQCb8xQ656lzHyLl618j/zo0nh5j6dyPpnM/ks79CDrvwzjpf8JJ
vw0/xi4FaORb9oRyGhQMYd4f/Evum/AczkGDQWq/R9j8Q68W61VEP/Jd7MrD
sKVympJznWlu/pmn4ysSQmyumYsuz78HCgBs6zwQAgrCCx/fmLvws55tB0wT
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
quP8p4w/Yfzpsp8s/VTxJ0q60EhebOU/uRpZXizVyIvCg+8aGwY2xp+O9GSK
fLhyjFcw9pj4vbQmesBP1/AgA1ZymqjkZDua2NlJgq24k1LJ6zU9XHvefMhY
9Dpp1PIVr9HTEisZD6Gcnvck7+FmYg/3R10P15F6OGtGw+eq0bAYzh2dwQ8p
yLGTFa/Rv4EmRvCQh2OX9OzCpMVI3Kk94lleyfJFInIlywtOnLyegXsSXXSV
nITPXaziqgsXWrr+fL2EvQpZ64YV7aU8l7uXpB7cNHvk67TmGwNNmMXE/Qe4
0wKrOXjBE3A7d5qwryZQh4VVopi0Z/x7wr0W9pP+IlX81OPETztC/JSD7OiN
bQZ6Y5mqNwoP9XTMYZA7Ny/7nZtSzfgsVqoZv58LSZ7w0/UsUdUnRVWnOiGa
9SMJvWi2FqiyfUjiTvFiyFzSjXKaVNUru1JeEzswtLZQC5yaIzo9jTMhOr2B
btyZaEJnIg1uWnUmpAMSSpJFHL3J8nw8dNfA3/z9dvo4VtUTmNYY/7zjRf2h
c0XN7YuHtEV9WVfU7ZVuWNn8MX24e2Wq96a5opgxIoXFjGl1TAfgmTwMBKOV
dTt/Fhexpz1IwH4ujj40pG+GexfT+ekZLAD64SfxRxkRcqTrwkNYbkWHe7s2
jPXVFrO+s1OExTVWyNdZIaPoR9F0IXk6/HQjRxR1pijqdBdFtCNTDHsRLV7U
/1O+Asp38QLDmRemAqiomRgoXfIi7wRV+0J0ghr7ojPEDHUX9kWuA/aFOKJB
iZielIgpWfx86N4hT2BB99o67fW+3nO70XUpNipaTv85eXtLXwvBQWKj64/X
1Ypm/xKraZTN7SXqI5tLaW9W3Uci5w99ms6HYfYKs6d+YqUN5q/QEMaJLxpg
d4oWconLRMHtnClULTUprLrbcvn5sC/zeVVgRWA1UCUk2BEl3vynfNaWKFkB
xV4f6Krb8SmvrdZPqW58TCNasboxV/tl6X72veSJKmfIvZ4p0Hu/8tqZ6Yfx
uZHC/UPId6AqX9+d/Ac0eqnKl75obhU1fsejBn7Hbut+R/xmuBCxEs4HyX6H
mrVpjvR4bknfXh/Vv/zG8KqBow4v8Zy40Jkqf9+5Kv/EuMo9r16sxSr3b7t4
DitaW+Wsvrnp4YtV3jxnwGN05whWOe5Ww8McSpVjyhqnxxiuKfPvy5+vKIWZ
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
MOmHJ0HwFAgeP9bw4Tja/cb5cLAlH254FzIWv0GnZCwAaEtsuhtYIp1UWXxS
4j4GPjfIGm0yPUf/VcqGXaykfBjHYYnQolo61DopJ81Oig0tajlzs6ZFOR02
RG+PHDd5GxnNJvePjm0eHevn7dc7dv9EE8dlz5azdTWEPfYK9vb27oTk4BcY
rslAGZ2/NFqOpYzmcootl2MpgwB9tstiEGDlyI1TXZ5BXlks/fL3OxrlLP7+
wT/yOMlMBYNNgcR+7gYgdDeD0B0FKGQkoRA9YSdb4uKZAD3eOii5EJSdHrUx
q3/HHcpuLb696gP6uRnGPpI9n+SLzFN2cg8bsw8x6yhoiyFb6zw4hvHgCKjf
Z8mDWcvewROfNpWm0dCsk+yY0ORcIM4Nv1zTP4ntGN4gezTH8bEB7P9x3msM
eXlw9xJD3sUKHQsW2zFa0i1ncZU2ZnHWwl1CiJ5L3BM6xWMXB50Soj1o6uh5
9WxeQ3NTHWLtq5KSkidnzpxpcqfievtR9ktpTmEdqU9KPemOg1mcw3TiEjmL
W8elm42tHb5xtPVbYtD6zRC3so+fm+s/fsoW1/Em3HzCWjhiDFnQFt46MqIj
wuNTuLxgZdj9y8e5HjK6qxKtTIX7fis5mugw6icBJd6zoO0kNxHQQOCXCmyn
eRJRYZQNKvSdREuJORUOo8X8tbv7ExVmr+xJgWg0Ld0QgqZHXNOcr1loTgWF
IYPcIWzoQ5A/sQvkje/E/nNucDbxINw6XyrQqOdCK77MfYzstJqUc+H55P3N
E6YHdWtJXY+Vw0DYIfxsTame8Eymf+EBr31hUem2tafFimRdxES9PE63ItnG
4MDonI5L3Z/5mGnVuNmpYz4csB2/J5eg14lDTnVWGNQup3f98XK6PfRhU4g9
H2O8CMZ4Yf936OtihD49E5oeIQi+hB9nMOxJrogcHqk6thSu5B0VW1z9xSbl
g9zLS7ZBjUEG1HhYocYhjBoHQs7aD+mQqqOZLAZBQ9U5Sqc6/0mffaR/R0ic
8CgUevxeDY9hVjpzTAco3jsBbjQWS6q0zEmTxtZ8L1I33+NJsDi/bTSQ3rdp
OcR5b4SpC1J6xR+cYZKp8FxzPaLwzqlTp4gKH6Lie9O2BD1nKUFLdWFMe4OG
aINBg2XaS2oDA+y0gTu1beDs1SX+Qycdd+UUDsdfh64/1sn4S3Jj4MtmCGAQ
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
vKlIys2WHF3t/a6n/Ltw4jn+HOj1zXFKV7B4G1o6pxANscmMJ4wOvbMkVyUc
awbP8ITyF7vtpquwAnHwsch9k/JYROtd847lZfYJTSryrwhI1REY8dCzyqtG
qRKzKZc4yaaaJpQkVeot/f39lVcfNzjH36eB1bPsnACq9Gtu79LBCZTC38gq
JjOj/5tz3H9/5t+f+f/iMwReGQ0P7v+PjPjfn/n3Z/79mX9/phk/wyfwoktL
S5Vzaea+gs8zlzU2NpJVq1bdCAkJsWwz9xWs/8cNvqL6bH0tof//R+TSJfhV
JkeTg48e4qu8Lx3YRP8/BZ101+LjY3+ZNm2a2dbNbHxsJb6y4430d+MunCiP
u1BX1fEG3DK6MjgxLnoxfPW02NjYVHPfnoWPbeRv73gjtUvcuROlcRdOVXS8
UTCQ/oo3bPUMv0JmzJgBv5Ji7lcy8LHte2fOnIFfomJJEb/U8XpSJ/rLNXBN
9FxP+RejtiWtFr9otkc5HR/vhJ8k1j/5sveFynjCLrqGnutk+NM0hsafNtkz
zuB3t62fhp+kx/GO1xOehv/5ELrQ9/SmQxhmOIRN5obAYOupHUKq1RBcYAyW
VnHnavbCKe9LlZuYIHJREL13xPk2BEyfJkaRZG4QDOju0iC2yINoAT9pgSE8
D8PAobRgA/K+sC8WP3KhMlEMyDt2vk9cyIwJgfsLNsOAlixatCjR3IC2GA6o
p2ZAMILn3WwPg2rIu+ONshm9C9fP/OecsLCksLAwkwtWUtVhcJJIkYbRSQwj
6XknxjKKjsVPjOXbJUuWmFyXxAzZU7L/3jiW66ld4JfQMik6XHTDaQ1/0iHF
8yGtZwDP7cuGVKQZkmW9uTFttj8m8ZOuMKaWMBCUjjSUVM1QoEkLhgJ8bnJd
XLJzIwFlvawfDhqU9XCQsMVw1pkbzibD4byrG06iizIcVBOzMw8dxcC9wpVx
mF3smeTcQEAundTReMBo8C87QwLPi24yztyQEtUhUVdSYU820pAQ0q0cDKl6
ZXQUDsnk0mZmihIJH96iDiuJ+tiaUvhRdzR6GNKd6kA8VafEuBg4R/bAMebG
wkzQXTuW3N5otnQs+KMeimw0A7luOJCFYiAmN1tIMBxITzaQVDYQT2Ugd2kG
ktRJz8Kyj1xtbiDrnBhIK+1AwLArhWFbsbA8FpN7iMTrxnL58LaON3VjAU+J
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
v/UdcqVqhdqfopxiIG/JlCRNP/K9ylOQTA+W/efoq2Efj3VJ5Ovju0130l0/
swMXOmUNsZBseqXMfod8fzBThWRFCvlWQNJWOEkhaRxO2mkZsLGEoyp8FMnf
Xo0N3WX7KCTLOCRLTiMkt6uQhCkkt4FSU2gZoD8Bla1LTCrxTt+wVg4RL9dU
V8m+0DLQHPhewEePh29QfnpDBmBqb3CM9kDohiAsEU5xVd2u9UZOsW/h1i11
NeHP8oJFF3Ikx5f8TC3X8IwNjWVGSyRutfFBMzWyY7RX+FDPXdf0tO58235S
h1reD8fiDZM615vz0LkrgeGWd6kDyNfu7il2klEWB6Upm4L9W5ySgI7xP01Y
h0qE1UzjTiuKHhyB18/uxCWGgLytH1pIqs+75PtDWykCs8h3VVsoAtNVwooB
ZILDAPK8YQDp3NKOg5FjSeGOalJZdY7srzxLyvedJaVlZxQEFhUzBEJCBxwi
pFSBrKZkHEuOj06XkjNWK5veaw3o2nDQ0QsqFZk9EHgtmf1EkOgAecXg/gB5
Wvd3HN1fY3l5mbLFRBMNAX+m4YLhViv6rfqa5N2cI3TWKB/nt9BEgUNO3wy6
ifTNfpzToV0PQ8CdU8k/LuyRFv7Ku8HL28nIu39Kfl7eFf6WUtKRTlLSW13c
qKSoK8bFUIC4HHql+fyFXDmcS65UM+R9D8g7kO5kqGjdDnDeTDtAkjc5Ej2R
7Nx5mBw8dJ4cqPqKIu8c1OTJXoo8kboBCgpI20r5JqRpouP3eyetDcc0zD1S
OlQX91kGtQZ2sNku83UMdv3o/wA3+hNULCAYTO1tLxh0R/TtkP0eII/6vfLm
0sxA7G9r3rPK9jkFGlYmynJJarH8lO6AtXrh9/xVS6yZrytmSCcl7x9rPffL
iQpNouYNpxI1P58rwc00f6iJIX89v1fd0RoTEqLhZCdfbiVvUyjvF7/5f4B5
OtNBrm/G0W4A9fPFQw4KGVUon40DGeJyP6KomzOAymobRV4eRV4O9XvZFHmZ
zgeDO/XBoBOVfl2SpjBuNTlc8zU5VM2QV3HgHNkHyKPBICRJgWlClBeTcLgu
an2h7N/065g+aBWppCAbQS9PABgH2jvws2msbZc9HXBMsi1hEfm6rsjEpmLa
cwu0ycJ1Ok9nfY7brzUOChXl+kKFreTL61bJl3NbBrHky7fVpDovgFw6FK3b
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
/Osz/+M+g+CV2XAXKHwqzLfntv/1fwHP2Bvn\
\>", "ImageResolution" -> \
120.],ExpressionUUID->"b150256c-8834-45e0-a4bb-16cda5337a77"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The confusion matrix ", "Subsection",
 CellChangeTimes->{
  3.798288414733297*^9},ExpressionUUID->"4cab087e-3499-40d6-aeba-\
2dd8310fc73e"],

Cell["Let\[CloseCurlyQuote]s look at the desired values:", "Text",
 CellChangeTimes->{
  3.798314645931816*^9},ExpressionUUID->"2a0d35d9-4df8-4ffd-a5ba-\
42d118cd5918"],

Cell[CellGroupData[{

Cell[BoxData["yTest"], "Input",
 CellChangeTimes->{{3.7983146576742463`*^9, 3.7983146597466784`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"cf377046-0e28-4523-a4b7-3cd03986b192"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.798314660717742*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"eaf43f44-ddd7-493d-a775-5cee6e3970de"]
}, Open  ]],

Cell["and actual ones:", "Text",
 CellChangeTimes->{{3.7983146507350807`*^9, 
  3.798314653938321*^9}},ExpressionUUID->"4af5778c-e27d-4c65-9fe2-\
6a3e6effce43"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Round", "[", 
  RowBox[{"net3", "[", "xTest", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7983146688769655`*^9, 3.798314716537356*^9}, 
   3.798554172227543*^9},
 CellLabel->"In[50]:=",ExpressionUUID->"15a3bb7f-72f9-4f3e-b43c-1f3d7e3a9e09"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.798314673682356*^9, 3.7983147168995457`*^9}},
 CellLabel->"Out[50]=",ExpressionUUID->"daeb50b0-9ff8-46bb-a58c-0dbf8cd2cbbc"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s look closer at a strange output that we got:", \
"Text",
 CellChangeTimes->{{3.798554211240185*^9, 3.798554341608267*^9}, {
  3.7985546328114614`*^9, 
  3.798554679990199*^9}},ExpressionUUID->"2c6d1b4c-e42b-49e9-b82c-\
844a2a9593c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"net3", "[", "xTest", "]"}], "[", 
  RowBox[{"[", "31", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.79831475340549*^9, 3.7983147849213305`*^9}, {
  3.79831483358438*^9, 3.7983148926179867`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"d614bbff-64ba-4eaa-a829-3503f1860216"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.6474257011448652`", ",", 
   RowBox[{"-", "0.9961991632238789`"}], ",", "1.`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.798314726957344*^9, {3.79831476475575*^9, 3.7983147769094515`*^9}, {
   3.7983148356063843`*^9, 3.798314893914523*^9}},
 CellLabel->"Out[57]=",ExpressionUUID->"d80b737a-2301-45e0-8ddd-132455d983e8"]
}, Open  ]],

Cell["\<\
This basically means that our item can be classified as first and third \
cluster. 
Let\[CloseCurlyQuote]s apply softmax function:\
\>", "Text",
 CellChangeTimes->{
  3.798554664650298*^9},ExpressionUUID->"9b6c4686-c261-4c24-949a-\
dc26fbd560a5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"softmax", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"N", "@", 
     RowBox[{"Exp", "[", "x", "]"}]}], "/", 
    RowBox[{"Total", "[", 
     RowBox[{"Exp", "[", "x", "]"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7985543644816933`*^9, 3.7985543644986434`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"308cfd57-6456-40af-8d68-08e3fb33bb85"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"softmax", "[", 
  RowBox[{"{", 
   RowBox[{"0.647426", ",", 
    RowBox[{"-", "0.996199"}], ",", "1."}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.798554384558133*^9, 3.79855438457808*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"0b1b7e69-0979-4aa6-919c-44c7de8b960e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.38226254817694094`", ",", "0.07388299338909816`", ",", 
   "0.5438544584339607`"}], "}"}]], "Output",
 CellChangeTimes->{3.7985543960334234`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"81ce141c-daea-4e84-b968-1165f1c04aa4"]
}, Open  ]],

Cell["\<\
So we can see that third cluster is the one from 54%. So we can classify it \
there. But 38% for the first cluster is really close to 54% so this still is \
a problematic instance.
This also makes our testing error close to zero.\
\>", "Text",
 CellChangeTimes->{{3.7985547091730947`*^9, 3.7985547130597286`*^9}, {
  3.798554744251704*^9, 3.7985548184168396`*^9}, {3.798554859168347*^9, 
  3.7985548612417684`*^9}, {3.798555076240303*^9, 
  3.798555092854838*^9}},ExpressionUUID->"035674c9-2c5d-4be9-9fc9-\
6a4eafa81620"],

Cell["\<\
Let\[CloseCurlyQuote]s look at the difference between desired and actual \
values:\
\>", "Text",
 CellChangeTimes->{
  3.7982884291078596`*^9},ExpressionUUID->"97516e45-19c7-4122-9382-\
3bffb4765ff7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"yTest", " ", "-", " ", 
  RowBox[{"Round", "[", 
   RowBox[{"net3", "[", "xTest", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.798288439654597*^9, 3.79828843996576*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"f6e90092-b88e-44e5-82b8-59515883b486"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.798288441833783*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"da337c74-a24a-4403-a4ca-6cd43daa0cf7"]
}, Open  ]],

Cell["\<\
First, we will calculate the number of correct predictions for each class \
(including our softmax function output):

setosa classified as setosa: 15
versicolor classified as versicolor: 15
virginica classified as virginica: 15

Now, we can calculate the number of incorrect predictions for each class:

setosa classified as versicolor: 0
setosa classified as virginica: 0

versicolor classified as  setosa: 0
versicolor classified as  virginica: 0

virginica classified as setosa: 0
virginica classified as versicolor: 0

So now we can plot a matrix:\
\>", "Text",
 CellChangeTimes->{
  3.798288462041705*^9, {3.7985548666323423`*^9, 3.7985548872996597`*^9}, {
   3.7985549371053677`*^9, 
   3.798554942942793*^9}},ExpressionUUID->"ebaf02f0-8170-48ff-89d4-\
2a75dc2fcd0a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"matrix", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"15", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "15", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "15"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"keys", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<setosa\>\"", ",", "\"\<versicolor\>\"", ",", "\"\<virginica\>\""}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{"MatrixPlot", "[", 
  RowBox[{"matrix", ",", 
   RowBox[{"ColorRules", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", "\[Rule]", "White"}], "}"}]}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<actual\>\"", ",", "\"\<predicted\>\""}], "}"}]}], ",", 
   RowBox[{"FrameTicks", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          "keys"}], "]"}], ",", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          RowBox[{"Total", "@", 
           RowBox[{"Transpose", "@", "matrix"}]}]}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          RowBox[{"Total", "[", "matrix", "]"}]}], "]"}], ",", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "}"}], "&"}], ",", 
          "keys"}], "]"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"#", ",", "16"}], "]"}], ",", 
         RowBox[{"#2", "-", 
          RowBox[{"1", "/", "2"}]}]}], "]"}], "&"}], ",", 
      RowBox[{"Transpose", "@", 
       RowBox[{"Reverse", "@", "matrix"}]}], ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7985549462479434`*^9, 3.7985549489048367`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"3b756b9c-cea1-4e1f-9aea-d46efddac4bd"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{1., 1., 1.}, {1., 1., 1.}, {0.857359, 0.131106, 0.132128}}, {{
   1., 1., 1.}, {0.857359, 0.131106, 0.132128}, {1., 1., 1.}}, {{0.857359, 
   0.131106, 0.132128}, {1., 1., 1.}, {1., 1., 1.}}}, {{0, 0}, {3, 3}}, {0, 
   1}],
  Epilog->{{
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[1, 2], 
        Rational[1, 2]}, {0.5, 0.5}]], 
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[1, 2], 
        Rational[3, 2]}, {0.5, 1.5}]], 
     InsetBox[
      FormBox[
       StyleBox["15", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[1, 2], 
        Rational[5, 2]}, {0.5, 2.5}]]}, {
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[3, 2], 
        Rational[1, 2]}, {1.5, 0.5}]], 
     InsetBox[
      FormBox[
       StyleBox["15", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[3, 2], 
        Rational[3, 2]}, {1.5, 1.5}]], 
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[3, 2], 
        Rational[5, 2]}, {1.5, 2.5}]]}, {
     InsetBox[
      FormBox[
       StyleBox["15", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[5, 2], 
        Rational[1, 2]}, {2.5, 0.5}]], 
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[5, 2], 
        Rational[3, 2]}, {2.5, 1.5}]], 
     InsetBox[
      FormBox[
       StyleBox["0", 16, StripOnInput -> False], TraditionalForm], 
      NCache[{
        Rational[5, 2], 
        Rational[5, 2]}, {2.5, 2.5}]]}},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted\"", TraditionalForm], 
    FormBox["\"actual\"", TraditionalForm]},
  FrameTicks->{{{{2.5, 
       FormBox["\"setosa\"", TraditionalForm]}, {1.5, 
       FormBox["\"versicolor\"", TraditionalForm]}, {0.5, 
       FormBox["\"virginica\"", TraditionalForm]}}, {{2.5, 
       FormBox["15", TraditionalForm]}, {1.5, 
       FormBox["15", TraditionalForm]}, {0.5, 
       FormBox["15", TraditionalForm]}}}, {{{0.5, 
       FormBox["15", TraditionalForm]}, {1.5, 
       FormBox["15", TraditionalForm]}, {2.5, 
       FormBox["15", TraditionalForm]}}, {{0.5, 
       FormBox["\"setosa\"", TraditionalForm]}, {1.5, 
       FormBox["\"versicolor\"", TraditionalForm]}, {2.5, 
       FormBox["\"virginica\"", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]}]], "Output",
 CellChangeTimes->{3.798554952692713*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"dca64478-516e-4266-b85c-a220b634de63"]
}, Open  ]],

Cell["\<\
So basically our last model showed the best results. But we also need not to \
forget about {1;-1;1} value we got. Even though model got it right, it was \
still close to classifying it to the first cluster.

So the last model showed to be the best one. It got both training and testing \
errors close to zero so the model is also not overfitted. 
Seems like 80 iterations may be good to train model well, but may make it a \
bit overfitted. It\[CloseCurlyQuote]s also a nice practice to play with \
number of hidden neurons, and output layers.\
\>", "Text",
 CellChangeTimes->{{3.79855496037486*^9, 3.7985550486661253`*^9}, {
   3.798555104798779*^9, 3.7985551308261223`*^9}, {3.7985561529194927`*^9, 
   3.7985562459677563`*^9}, {3.7985564049099655`*^9, 3.798556474524659*^9}, {
   3.7985565618046465`*^9, 3.7985565669679117`*^9}, 3.7985565983317556`*^9, {
   3.7985567796822367`*^9, 
   3.7985567841852274`*^9}},ExpressionUUID->"fd8769f0-411d-4f78-b2ae-\
ec29e42baa24"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7982874384896*^9, 3.7982874397013564`*^9}, {
   3.7982874823404207`*^9, 3.7982874960558305`*^9}, 
   3.798287618692498*^9},ExpressionUUID->"43370306-d66a-4a99-9ac0-\
842bd4fb6af6"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.798287745137888*^9, 3.7982877626333184`*^9}, 
   3.7982877995446134`*^9},ExpressionUUID->"ed5bd834-bd51-45e7-b367-\
88eafcd3ce27"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7982877968717647`*^9, 
  3.7982877968737593`*^9}},ExpressionUUID->"dabff8e4-244f-482c-a09d-\
6115230d13e3"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7982876220605307`*^9, 
  3.798287622062522*^9}},ExpressionUUID->"cb5e7036-ee31-47e3-b226-\
854edf3f3b53"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1141.2, 580.1999999999999},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules->{"TryRealOnly" -> False},
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"9d87097a-25dd-477e-b837-63c05c0138bf"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 162, 3, 97, "Title",ExpressionUUID->"489b5234-b6bb-44aa-8fe1-ae36e24ba814"],
Cell[CellGroupData[{
Cell[767, 29, 176, 3, 67, "Section",ExpressionUUID->"d2da1a06-ed3b-45f6-aea9-ea7226a7bad7"],
Cell[946, 34, 133, 2, 28, "Input",ExpressionUUID->"8d5a3c11-b393-444d-83cf-526c3fe93d43"],
Cell[1082, 38, 554, 14, 49, "Input",ExpressionUUID->"1c4609a8-4184-43ca-831e-b21d7e13b8b2"],
Cell[1639, 54, 984, 29, 49, "Input",ExpressionUUID->"9e85df36-da3b-4537-8826-e05c874c6356"],
Cell[2626, 85, 992, 29, 49, "Input",ExpressionUUID->"eca16094-cd4e-41e3-ab2a-64174a673549"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3655, 119, 243, 6, 67, "Section",ExpressionUUID->"b95b27da-62bc-460e-8891-c8894420d094"],
Cell[3901, 127, 613, 17, 49, "Input",ExpressionUUID->"07fa77a2-f463-4e1e-97ff-bdb44f137152"],
Cell[CellGroupData[{
Cell[4539, 148, 151, 3, 54, "Subsection",ExpressionUUID->"fc5d1a09-4321-4080-8ff5-7af1fc45d117"],
Cell[4693, 153, 2909, 65, 265, "Print",ExpressionUUID->"72cfd63c-da91-4e71-a1c7-a94a999e02a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7639, 223, 202, 4, 54, "Subsection",ExpressionUUID->"c91fb9c5-c52d-4316-8663-cf77f815ffb5"],
Cell[7844, 229, 375, 7, 58, "Text",ExpressionUUID->"736e4652-7b25-4c10-8cd9-90a9bccac517"],
Cell[CellGroupData[{
Cell[8244, 240, 712, 18, 28, "Input",ExpressionUUID->"5bc832df-e388-449e-b23a-316e4c424314"],
Cell[8959, 260, 193, 2, 32, "Output",ExpressionUUID->"8f0d82ca-e781-499a-adcb-302d5390a5ad"]
}, Open  ]],
Cell[9167, 265, 368, 8, 58, "Text",ExpressionUUID->"4ffc694d-5b0a-4bc2-b6d7-2b8ceed22880"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9572, 278, 177, 3, 54, "Subsection",ExpressionUUID->"5952f9e2-b598-4a00-8cdc-03ffe6822b38"],
Cell[9752, 283, 223, 5, 35, "Text",ExpressionUUID->"b8663dfe-0262-45b9-9c3a-9355f33d8f88"],
Cell[CellGroupData[{
Cell[10000, 292, 429, 7, 28, "Input",ExpressionUUID->"af1b21ae-320b-4934-86f9-9b1150ad785c"],
Cell[10432, 301, 499765, 9141, 1101, 201250, 4246, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"acdb395f-c040-44d0-90f9-ced864a9c621"]
}, Open  ]],
Cell[510212, 9445, 152, 3, 28, "Input",ExpressionUUID->"88072dfa-ad0b-44e2-84bf-ea832f003f3d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[510401, 9453, 171, 3, 54, "Subsection",ExpressionUUID->"082d76a4-963e-468d-ba91-716807b477d8"],
Cell[510575, 9458, 246, 4, 35, "Text",ExpressionUUID->"0187a472-1d51-470e-9ba5-b21d44b64257"],
Cell[CellGroupData[{
Cell[510846, 9466, 176, 2, 28, "Input",ExpressionUUID->"d22e7dfa-8477-489a-8cbb-82c9c7611465"],
Cell[511025, 9470, 3303, 94, 92, "Output",ExpressionUUID->"800c06d0-a6ff-4113-9078-8c69d5daa941"]
}, Open  ]],
Cell[514343, 9567, 159, 3, 35, "Text",ExpressionUUID->"b00794e5-719e-489e-be89-566be1162239"],
Cell[CellGroupData[{
Cell[514527, 9574, 240, 4, 28, "Input",ExpressionUUID->"5d9bd895-73e4-4f6d-9846-0b101bc9c7b5"],
Cell[514770, 9580, 3333, 95, 92, "Output",ExpressionUUID->"2c8b6492-3c70-4764-8239-6441098eaa5b"]
}, Open  ]],
Cell[518118, 9678, 163, 3, 35, "Text",ExpressionUUID->"92ea973e-8dab-43bf-a44e-e0f925986634"],
Cell[CellGroupData[{
Cell[518306, 9685, 280, 5, 28, "Input",ExpressionUUID->"549fdcb2-82e4-45ac-a629-64574cd17d26"],
Cell[518589, 9692, 3324, 95, 92, "Output",ExpressionUUID->"1b88e5d4-ffa1-454f-9098-3a9075a0f749"]
}, Open  ]],
Cell[521928, 9790, 226, 5, 35, "Text",ExpressionUUID->"70413ffc-07b1-431d-b545-77a9511ce848"],
Cell[522157, 9797, 831, 22, 334, "Text",ExpressionUUID->"0fdb4af4-d6f2-4d54-ba9d-fc7cf465a361"],
Cell[522991, 9821, 154, 3, 28, "Input",ExpressionUUID->"bbcad62a-ccb7-4c54-b419-a162c2bed861"],
Cell[523148, 9826, 174, 3, 35, "Text",ExpressionUUID->"67b7b571-bd21-4a97-89e8-665f434b454d"],
Cell[CellGroupData[{
Cell[523347, 9833, 2869, 82, 127, "Input",ExpressionUUID->"c4feb9e1-ea02-4652-8aee-adf77e02b427"],
Cell[526219, 9917, 3471, 93, 345, "Output",ExpressionUUID->"797e6283-d246-424d-b8f7-ac21cb4b53ea"]
}, Open  ]],
Cell[529705, 10013, 377, 10, 104, "Text",ExpressionUUID->"e7f048ef-71b9-4595-a92e-03ff7ebdab17"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[530131, 10029, 272, 6, 67, "Section",ExpressionUUID->"876dddeb-da6b-4ed0-b1f0-5db8d8042702"],
Cell[530406, 10037, 529, 11, 28, "Input",ExpressionUUID->"e3715893-c315-4ad5-a74f-8a29f44408bb"],
Cell[530938, 10050, 401, 10, 28, "Input",ExpressionUUID->"e6945835-aec3-4b9e-8f69-183970e01c52"],
Cell[CellGroupData[{
Cell[531364, 10064, 151, 3, 54, "Subsection",ExpressionUUID->"7348c112-683f-4f7d-b009-756bc9a3613d"],
Cell[531518, 10069, 2900, 65, 262, "Print",ExpressionUUID->"c6238ce1-924b-4709-b1d9-3b527bf4fee6"],
Cell[CellGroupData[{
Cell[534443, 10138, 155, 3, 45, "Subsubsection",ExpressionUUID->"e80dc04b-8307-403f-958d-b110885a8a7d"],
Cell[534601, 10143, 364, 8, 81, "Text",ExpressionUUID->"0f98e422-1e1e-4672-84c0-102fac42fb37"],
Cell[CellGroupData[{
Cell[534990, 10155, 661, 17, 28, "Input",ExpressionUUID->"c049b448-b683-43d1-8f67-ca27257c8119"],
Cell[535654, 10174, 188, 2, 32, "Output",ExpressionUUID->"d31a60fa-8c41-40b2-bd84-06738eca46e0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[535891, 10182, 157, 3, 45, "Subsubsection",ExpressionUUID->"8c85fa73-0058-4401-bb33-863b3371beef"],
Cell[536051, 10187, 199, 5, 35, "Text",ExpressionUUID->"6f23f781-73a0-412b-8b55-571f2e15a482"],
Cell[CellGroupData[{
Cell[536275, 10196, 477, 8, 28, "Input",ExpressionUUID->"a00331d7-7934-4df9-996e-518956ae5884"],
Cell[536755, 10206, 511544, 9337, 1150, 201340, 4251, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"4cb8b97b-3515-42c0-8353-6e79619405d4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1048348, 19549, 150, 3, 45, "Subsubsection",ExpressionUUID->"e45e9341-626a-4f8d-a32c-268fd6ab1424"],
Cell[1048501, 19554, 192, 3, 35, "Text",ExpressionUUID->"ce66b628-8f91-40e1-8880-881c031a6c95"],
Cell[CellGroupData[{
Cell[1048718, 19561, 180, 2, 28, "Input",ExpressionUUID->"cf1a7e3d-0ba3-4369-b73c-689be788fab1"],
Cell[1048901, 19565, 3301, 94, 92, "Output",ExpressionUUID->"535cc30f-5e90-4fb5-944a-943c8da8e1bb"]
}, Open  ]],
Cell[1052217, 19662, 158, 3, 35, "Text",ExpressionUUID->"7fc6a27e-26f2-40c3-b61e-9382a611def6"],
Cell[CellGroupData[{
Cell[1052400, 19669, 240, 4, 28, "Input",ExpressionUUID->"0dfe1d21-e74e-4773-8080-4d1e20110261"],
Cell[1052643, 19675, 3354, 96, 92, "Output",ExpressionUUID->"22ee34f3-f481-4feb-89c6-0c173209f8f0"]
}, Open  ]],
Cell[1056012, 19774, 193, 3, 35, "Text",ExpressionUUID->"37b6c4b1-3908-4c94-8fe9-d7ca299a09c4"],
Cell[CellGroupData[{
Cell[1056230, 19781, 296, 6, 28, "Input",ExpressionUUID->"ce163b16-2ba1-4c5d-aebc-4b6b831fe7fc"],
Cell[1056529, 19789, 267, 6, 32, "Output",ExpressionUUID->"51ec3657-df70-4798-beaa-09aecfc8871c"]
}, Open  ]],
Cell[1056811, 19798, 184, 3, 35, "Text",ExpressionUUID->"d34a2a21-4a20-45ca-94eb-95351b77e85f"],
Cell[1056998, 19803, 234, 6, 35, "Text",ExpressionUUID->"6e30c888-5b2d-4106-9787-5e735c482a99"],
Cell[CellGroupData[{
Cell[1057257, 19813, 280, 5, 28, "Input",ExpressionUUID->"ad6bb307-5548-4b19-abbf-39611519c887"],
Cell[1057540, 19820, 3351, 96, 92, "Output",ExpressionUUID->"307c6d12-ec65-4992-8722-1565c7b0c178"]
}, Open  ]],
Cell[1060906, 19919, 756, 23, 426, "Text",ExpressionUUID->"c98677e2-8463-4aa4-b58f-08defa3e6874"],
Cell[CellGroupData[{
Cell[1061687, 19946, 2750, 80, 127, "Input",ExpressionUUID->"6a949321-e178-41f0-b1e8-009869b26c60"],
Cell[1064440, 20028, 3415, 92, 345, "Output",ExpressionUUID->"8c5086a8-ab6c-4901-8d6f-1040f495a24a"]
}, Open  ]],
Cell[1067870, 20123, 156, 3, 28, "Input",ExpressionUUID->"2d1c38e9-f5d6-4dcd-bd56-6c2115e28211"],
Cell[1068029, 20128, 345, 7, 35, "Text",ExpressionUUID->"9b68a73e-ecf7-43e7-b0aa-38083b5a3eb9"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1068435, 20142, 273, 6, 67, "Section",ExpressionUUID->"cb7b4515-30bd-4b49-8625-e1f443ddb595"],
Cell[1068711, 20150, 501, 11, 28, "Input",ExpressionUUID->"c6abe38d-64c6-4980-b6ec-fd212960fc31"],
Cell[1069215, 20163, 401, 10, 28, "Input",ExpressionUUID->"fab795da-1bd0-4434-b5b7-93c250ddbb3e"],
Cell[CellGroupData[{
Cell[1069641, 20177, 149, 3, 54, "Subsection",ExpressionUUID->"1c64a800-5615-4251-9863-645cedd6ba1e"],
Cell[1069793, 20182, 2646, 61, 262, "Print",ExpressionUUID->"0c32a358-f00d-41a7-a6ea-19c94519bee2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1072476, 20248, 150, 3, 54, "Subsection",ExpressionUUID->"d01bee82-cf10-4337-922c-dfed780483b8"],
Cell[1072629, 20253, 292, 7, 58, "Text",ExpressionUUID->"aa3a0caa-0f6c-43c3-a7f1-54d9dc05678a"],
Cell[CellGroupData[{
Cell[1072946, 20264, 661, 17, 28, "Input",ExpressionUUID->"5b154e4d-4590-4f89-90a2-f9c0731bfb54"],
Cell[1073610, 20283, 167, 2, 32, "Output",ExpressionUUID->"75b80ea7-864a-4c26-987d-c2cfb4d47348"]
}, Open  ]],
Cell[1073792, 20288, 188, 3, 35, "Text",ExpressionUUID->"62958416-da99-4e3c-baa1-312a97200d4c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1074017, 20296, 154, 3, 54, "Subsection",ExpressionUUID->"500cc7a4-8ee3-4701-bb95-9491b5923754"],
Cell[1074174, 20301, 194, 4, 35, "Text",ExpressionUUID->"339450f8-829e-4d72-8fff-aa57eef6eba4"],
Cell[CellGroupData[{
Cell[1074393, 20309, 424, 7, 28, "Input",ExpressionUUID->"4553c4ee-56d9-4440-b9e3-7657d9f52aea"],
Cell[1074820, 20318, 404028, 7381, 896, 160822, 3393, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"b150256c-8834-45e0-a4bb-16cda5337a77"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1478897, 27705, 145, 3, 54, "Subsection",ExpressionUUID->"4cab087e-3499-40d6-aeba-2dd8310fc73e"],
Cell[1479045, 27710, 168, 3, 35, "Text",ExpressionUUID->"2a0d35d9-4df8-4ffd-a5ba-42d118cd5918"],
Cell[CellGroupData[{
Cell[1479238, 27717, 180, 2, 28, "Input",ExpressionUUID->"cf377046-0e28-4523-a4b7-3cd03986b192"],
Cell[1479421, 27721, 3279, 94, 92, "Output",ExpressionUUID->"eaf43f44-ddd7-493d-a775-5cee6e3970de"]
}, Open  ]],
Cell[1482715, 27818, 160, 3, 35, "Text",ExpressionUUID->"4af5778c-e27d-4c65-9fe2-6a3e6effce43"],
Cell[CellGroupData[{
Cell[1482900, 27825, 266, 5, 28, "Input",ExpressionUUID->"15a3bb7f-72f9-4f3e-b43c-1f3d7e3a9e09"],
Cell[1483169, 27832, 3326, 95, 92, "Output",ExpressionUUID->"daeb50b0-9ff8-46bb-a58c-0dbf8cd2cbbc"]
}, Open  ]],
Cell[1486510, 27930, 262, 5, 35, "Text",ExpressionUUID->"2c6d1b4c-e42b-49e9-b82c-844a2a9593c3"],
Cell[CellGroupData[{
Cell[1486797, 27939, 309, 6, 28, "Input",ExpressionUUID->"d614bbff-64ba-4eaa-a829-3503f1860216"],
Cell[1487109, 27947, 363, 7, 32, "Output",ExpressionUUID->"d80b737a-2301-45e0-8ddd-132455d983e8"]
}, Open  ]],
Cell[1487487, 27957, 256, 7, 58, "Text",ExpressionUUID->"9b6c4686-c261-4c24-949a-dc26fbd560a5"],
Cell[1487746, 27966, 402, 10, 28, "Input",ExpressionUUID->"308cfd57-6456-40af-8d68-08e3fb33bb85"],
Cell[CellGroupData[{
Cell[1488173, 27980, 296, 6, 28, "Input",ExpressionUUID->"0b1b7e69-0979-4aa6-919c-44c7de8b960e"],
Cell[1488472, 27988, 269, 6, 32, "Output",ExpressionUUID->"81ce141c-daea-4e84-b968-1165f1c04aa4"]
}, Open  ]],
Cell[1488756, 27997, 531, 10, 81, "Text",ExpressionUUID->"035674c9-2c5d-4be9-9fc9-6a4eafa81620"],
Cell[1489290, 28009, 210, 6, 35, "Text",ExpressionUUID->"97516e45-19c7-4122-9382-3bffb4765ff7"],
Cell[CellGroupData[{
Cell[1489525, 28019, 275, 5, 28, "Input",ExpressionUUID->"f6e90092-b88e-44e5-82b8-59515883b486"],
Cell[1489803, 28026, 3300, 95, 92, "Output",ExpressionUUID->"da337c74-a24a-4403-a4ca-6cd43daa0cf7"]
}, Open  ]],
Cell[1493118, 28124, 783, 25, 426, "Text",ExpressionUUID->"ebaf02f0-8170-48ff-89d4-2a75dc2fcd0a"],
Cell[CellGroupData[{
Cell[1493926, 28153, 2820, 81, 127, "Input",ExpressionUUID->"3b756b9c-cea1-4e1f-9aea-d46efddac4bd"],
Cell[1496749, 28236, 3369, 92, 345, "Output",ExpressionUUID->"dca64478-516e-4266-b85c-a220b634de63"]
}, Open  ]],
Cell[1500133, 28331, 982, 17, 150, "Text",ExpressionUUID->"fd8769f0-411d-4f78-b2ae-ec29e42baa24"],
Cell[1501118, 28350, 229, 4, 28, "Input",ExpressionUUID->"43370306-d66a-4a99-9ac0-842bd4fb6af6"],
Cell[1501350, 28356, 179, 3, 28, "Input",ExpressionUUID->"ed5bd834-bd51-45e7-b367-88eafcd3ce27"],
Cell[1501532, 28361, 156, 3, 28, "Input",ExpressionUUID->"dabff8e4-244f-482c-a09d-6115230d13e3"],
Cell[1501691, 28366, 154, 3, 28, "Input",ExpressionUUID->"cb5e7036-ee31-47e3-b226-854edf3f3b53"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

